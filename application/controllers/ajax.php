<?php

use Carbon\Carbon;
use Intervention\Image\ImageManager;
use League\Csv\Reader;
use models\EstimationCompanyServiceType;
use models\EstimationItem;
use models\EstimationItemPriceChange;
use models\EstimationLineItem;
use models\EstimationTypeOrder;
use models\ProposalSignee;
use models\SavedProposalFilter;
use models\Accounts;
use models\Proposal_services;
use models\ProposalCustomerCheckList;
use Vube\GoogleVisualization\DataSource\DataTable\ColumnDescription;
use Vube\GoogleVisualization\DataSource\DataTable\DataTable;
use Vube\GoogleVisualization\DataSource\DataTable\TableRow;
use Vube\GoogleVisualization\DataSource\DataTable\Value\ValueType;
use GuzzleHttp\Client;
use models\ClientCompany;


class Ajax extends MY_Controller
{
    /**
     * @var $em \Doctrine\ORM\EntityManager
     */
    public $em;
    public $accountData;

    /* @var ServiceHelper */
    public $servicehelper;

    public function __construct()
    {
        parent::__construct();
        $this->accountData = null;
        $this->load->library('session');
        $this->load->library('JsonResponse');
        $this->load->config('quickbooks');
        $this->load->library('upload');
        // Load your other models here...
        $this->load->model('quickbooks_model');
        // Configure the model
        $this->load->database();
        $this->quickbooks_model->dsn('mysqli://' . $this->db->username . ':' . $this->db->password . '@' . $this->db->hostname . '/' . $this->db->database);
        $this->imageManager = new ImageManager;
    }

    public function checkLogin()
    { 
        
         $account = $this->em->getRepository("models\Accounts")->findOneBy(array(
            'email' => $this->input->post('email'),
            'password' => md5($this->input->post('password')),
        ));
       // print_r($account->getAccountId());die;
        if (!$account) {
            echo json_encode(array(
                'error' => 'Wrong email/password combination!',
            ));
        } else {
             if($account->getAuthLogin())
             {
                $mobileNo = $account->getCellPhone();
                $this->session->set_userdata('useremail', $this->input->post('email'));
                $generated_otp = rand(100000, 999999); // Generate a 6-digit OTP
                $current_time = time(); // Get current time
                $account->setEmailOtp($generated_otp);
                $account->setOtpTime($current_time); // Save the current timestamp
                $this->em->persist($account);
                $this->em->flush();
                $this->em->clear();
                // Print the entire session data
             //   $this->send_email_otp($this->input->post('email'),$generated_otp,$account);
               // $this->send_mobile_otp();
               if($mobileNo)
               {
                  $mobileOtpResult =  $this->sendMobileOtp($mobileNo,$generated_otp);
                  if(!empty($mobileOtpResult) && $mobileOtpResult['success']==1)
                  {
                       $maskedNumber = str_repeat('*', strlen($mobileNo) - 4) . substr($mobileNo, -4);
                       $this->session->set_flashdata('success', "Otp sent to your mobile number $maskedNumber");

                    echo json_encode(array(
                        'auth' => true,
                        'mobileAuth'=>true
                    ));
                  }else{
                    echo json_encode(array(
                        'auth' => false,'mobileAuth'=>false
                    ));
                  }
               }else{
                      $this->session->set_flashdata('success', 'Otp sent to your email id');
                   $emailOtpResult =  $this->send_email_otp($this->input->post('email'),$generated_otp,$account);
                   if($emailOtpResult)
                   {
                       echo json_encode(array(
                           'auth' => true,
                           'emailAuth'=>true
                       ));
                   }else{
                    echo json_encode(array(
                        'auth' => false,
                        'emailAuth'=>false
                    ));

                   }
               }

                die;
             } 
            $this->session->sess_create($account->getAccountId());
            $this->session->set_userdata(array(
                'logged' => 1,
                'accountId' => $account->getAccountId(),
                'psaAlertShown' => '',
            ));
            //print_r($this->session->userdata('logged'));die;
            $this->log_manager->add(\models\ActivityAction::LOGIN, 'User successfully logged in.');
            if ($this->input->post('remember')) {
                $token = md5(time());
                $account->setToken($token);
                // $account = $this->em->merge($account);
                // $this->em->persist($account);
                // $this->em->flush();
                // $this->em->clear();
                $cookie = array(
                    'name' => 'auth_token',
                    'value' => $token,
                    'expire' => 432000,
                );
                $this->input->set_cookie($cookie);
                $authCookie = array(
                    'name' => 'remember_email',
                    'value' => $this->input->post('email'),
                    'expire' => 432000,
                );
                $this->input->set_cookie($authCookie);
            }
            $account->setLastLogin(Carbon::now());
            $account = $this->em->merge($account);
            $this->em->persist($account);
            $this->em->flush();
            $this->em->clear();
            //print_r($this->session->all_userdata());die;
            echo json_encode(array(
                'success' => true,
            ));
        }
    }

    /*
     * Login stuff
     */

    public function ajaxCalculators()
    {
        $response = array();
        switch ($this->input->post('action')) {
            /*
             * Ajax calculators formulas
             */
            case 'calculator_sealcoat':
                //calculate amounts
                $area = str_replace(',', '', $_POST['area']);
                $sealer = $area * $_POST['applicationRate'];
                $response['sealer'] = $sealer;
                $water = $sealer * $_POST['water'] / 100;
                $response['water'] = $water;
                $additive = $sealer * $_POST['additive'] / 100;
                $response['additive'] = $additive;
                $sealerConcentrate = $sealer - $water - $additive;
                $sand = $sealer * $_POST['sand'];
                $response['sand'] = $sand;
                $sandInGall = $sand / 22.3;
                $response['sandInGall'] = $sandInGall;
                $totalGallons = $sealer + $water + $additive + $sandInGall;
                $response['totalGallons'] = $totalGallons;
                //calculate material costs
                $sealerPrice = str_replace(',', '', $_POST['sealerPrice']);
                $sealerCost = $sealerPrice * $sealer;
                $sealerCostPerUnit = ($area != 0) ? $sealerCost / $area : 0;
                $response['sealerCost'] = $sealerCost;
                $response['sealerCostPerUnit'] = $sealerCostPerUnit;
                $sandPrice = str_replace(',', '', $_POST['sandPrice']);
                $sandCost = $sandPrice * $sand / 100;
                $response['sandCost'] = $sandCost;
                $sandCostPerUnit = ($area != 0) ? $sandCost / $area : 0;
                $response['sandCostPerUnit'] = $sandCostPerUnit;
                $additivePrice = str_replace(',', '', $_POST['additivePrice']);
                $additiveCost = $additive * $additivePrice;
                $response['additiveCost'] = $additiveCost;
                $additiveCostPerUnit = ($area != 0) ? $additiveCost / $area : 0;
                $response['additiveCostPerUnit'] = $additiveCostPerUnit;
                $materialCost = $sealerCost + $sandCost + $additiveCost;
                $response['materialCost'] = $materialCost;
                $materialCostPerUnit = ($area != 0) ? $materialCost / $area : 0;
                $response['materialCostPerUnit'] = $materialCostPerUnit;
                //calculate labor
                $tripCount = $_POST['tripCount'];
                $tripHours = $_POST['tripHours'];
                $tripMen = $_POST['tripMen'];
                $tripHourlyCost = str_replace(',', '', $_POST['tripHourlyCost']);
                $laborCost = $tripCount * $tripHours * $tripMen * $tripHourlyCost;
                $response['laborCost'] = $laborCost;
                $laborCostPerUnit = ($area != 0) ? $laborCost / $area : 0;
                $response['laborCostPerUnit'] = $laborCostPerUnit;
                $proffit = str_replace(',', '', $_POST['proffit']);
                $overhead = str_replace(',', '', $_POST['overhead']);
                $overheadAndProffit = $tripCount * ($proffit + $overhead);
                $response['overheadAndProffit'] = $overheadAndProffit;
                $overheadAndProffitPerUnit = ($area != 0) ? $overheadAndProffit / $area : 0;
                $response['overheadAndProffitPerUnit'] = $overheadAndProffitPerUnit;
                $totalCost = $materialCost + $laborCost + $overheadAndProffit;
                $response['totalCost'] = $totalCost;
                $totalCostPerUnit = ($area != 0) ? $totalCost / $area : 0;
                $response['totalCostPerUnit'] = $totalCostPerUnit;
                $response['requestAuth'] = $_POST['requestAuth'];
                $response['success'] = true;
                break;
            case 'calculator_crackseal':
                $width = $_POST['width'];
                $depth = $_POST['depth'];
                $feetPerUnit = $width * $depth;
                $product = $_POST['product'];
                if ($product == 1) {
                    $feetPerUnit = $feetPerUnit * 12.5;
                } else {
                    $feetPerUnit = $feetPerUnit * 2;
                }
                $length = str_replace(',', '', $_POST['length']);
                $material = $length / $feetPerUnit;
                $price = str_replace(',', '', $_POST['price']);
                $cost = $material * $price;
                $response['material'] = round($material, 2);
                $response['cost'] = $cost;
                $response['requestAuth'] = $_POST['requestAuth'];
                $response['success'] = true;
                break;
            case 'calculator_striping':
                $length = str_replace(',', '', $_POST['length']);
                $pailSize = $_POST['pail_size'];
                $color = $_POST['color'];
                $pailPrice = str_replace(',', '', $_POST['pail_price']);
              // $totalMaterial = ($color != 0) ? $length / $color : 0;
                $totalMaterial = ($color != 0) ? floatval($length) / floatval($color) : 0;
                $response['totalMaterial'] = $totalMaterial;
                $totalQty = ($pailSize != 0) ? $totalMaterial / $pailSize : 0;
                $response['totalQty'] = $totalQty;
                $cost = $totalQty * $pailPrice;
                $response['cost'] = $cost;
                $baseCost = ($totalMaterial != 0) ? $cost / $totalMaterial : 0;
                $response['baseCost'] = $baseCost;
                $response['requestAuth'] = $_POST['requestAuth'];
                $response['success'] = true;
                break;
            case 'calculator_tankmix':
                $additive = $_POST['additive'];
                $additivePercentage = 0;
                if (in_array($additive, array('armorflex2', 'qsa2', 'maxum2'))) {
                    $additivePercentage = 2;
                }
                if (in_array($additive, array('armorflex3', 'qsa3', 'maxum3'))) {
                    $additivePercentage = 3;
                }
                $water = $_POST['water'];
                $sand = $_POST['sand'];
                $baseCalc = (100 + $water + $additivePercentage + (($sand * 100) / 22.3)) / 100;
                $response['baseCalc'] = $baseCalc;
                $tankSize = $_POST['tankSize'];
                $tankProduct = $tankSize / $baseCalc;
                $response['tankProduct'] = $tankProduct;
                $tankAdditive = $tankProduct * $additivePercentage / 100;
                $response['tankAdditive'] = $tankAdditive;
                $tankWater = $tankProduct * $water / 100;
                $response['tankWater'] = $tankWater;
                $sandLb = $sand * $tankProduct;
                $response['sandLb'] = $sandLb;
                $sandGal = $sandLb / 22.3;
                $response['sandGal'] = $sandGal;
                $totalProjectGallons = $tankProduct + $tankAdditive + $tankWater + $sandGal;
                $response['totalProjectGallons'] = $totalProjectGallons;
                $response['requestAuth'] = $_POST['requestAuth'];
                $response['success'] = true;
                break;
        }
        echo json_encode($response);
    }

    /*
     * Calculators Ajax
     */

    public function printCalc()
    {
        ?>
        <?php
        function showTables($boxes)
        {
            foreach ($boxes as $table) {
                ?>
                <table width="100%" cellpadding="0" cellspacing="0">
                    <tr>
                        <td class="head" colspan="3"><?php echo($table['heading']); ?>
                    </tr>
                    <?php
                    $k = 0;
                    foreach ($table['data'] as $row) {
                        $k++;
                        ?>
                        <tr class="<?php echo ($k % 1) ? 'alternate' : ''; ?> <?php echo @$row[3] ?>">
                            <td <?php if ($k == 1) { ?>width="50%" <?php } ?>><?php echo @$row[0]; ?>
                            <td <?php if ($k == 1) { ?>width="25%" <?php } ?>><?php echo @$row[1]; ?>
                            <td <?php if ($k == 1) { ?>width="25%" <?php } ?>><?php echo @$row[2]; ?>
                        </tr>
                        <?php
                    }
                    ?>
                </table>
                <?php
            }
        }

        /*
         * Neyra Logo function - not sure wtf this is
         */
        function neyraLogo()
        {
            ?>
            <div style="text-align: center;">
                <p class="clearfix" style="text-align: center;">
                    Powered By
                </p>

                <p class="clearfix centered" style="text-align: center;">
                    <a href="<?= base_url(); ?>" target="_blank"><img
                                src="<?= base_url(); ?>/static/images/logo.png" alt="<?php echo SITE_NAME; ?>"/></a>

                </p>
            </div>
            <?php
        }

        ?><!DOCTYPE HTML>
        <html lang="en-US">
        <head>
            <meta charset="UTF-8">
            <title><?php echo stripslashes(@$_POST['title']) ?></title>
            <style type="text/css">
                .clearfix:after {
                    clear: both;
                    content: ".";
                    display: block;
                    font-size: 0;
                    height: 0;
                    line-height: 0;
                    visibility: hidden
                }

                .clearfix {
                    display: block;
                    zoom: 1
                }

                .clearfix {
                    display: inline-block;
                }

                /* Hide from IE Mac \*/
                .clearfix {
                    display: block;
                }

                /* End hide from IE Mac */

                body {
                    font-family: Arial;
                    font-size: 13px;
                }

                h1 {
                    font-size: 20px;
                    text-align: center;
                }

                h2 {
                    text-decoration: underline;
                    text-align: center;
                    font-weight: normal;
                    font-size: 17px;
                }

                h3 {
                    font-weight: normal;
                }

                .half {
                    width: 48%;
                }

                .left {
                    float: left;
                }

                .right {
                    float: right;
                }

                .alternate {
                    background: #f5f5f5;
                }

                .head {
                    background: #eee;
                    color: #000;
                    text-align: center;
                    padding: 3px 0;
                    font-weight: bold;
                    font-size: 16px;
                }

                table {
                    border-top: 1px solid #999;
                    border-left: 1px solid #999;
                    margin-bottom: 10px;
                }

                td {
                    border-bottom: 1px solid #999;
                    padding: 2px 5px;
                }

                tr td:last-child {
                    border-right: 1px solid #999;
                }

                .black {
                    background: #000;
                    color: #FFF;
                }

                #logos {
                    width: 100%;
                    height: auto;
                }

                #logo {
                    width: 200px;
                    height: auto;
                }
            </style>
        </head>
        <body>
        <h1><?php echo stripslashes(@$_POST['title']) ?></h1>

        <h2>Project Name: <strong><?php echo stripslashes(@$_POST['project_name']) ?></strong></h2>

        <div class="clearfix">
            <div class="half left">
                <?php
                if (is_array($_POST['boxes']['left'])) {
                    showTables($_POST['boxes']['left']);
                }
                if (@$_POST['logo_position'] == 'left') {
                    neyraLogo();
                }
                ?>
            </div>
            <div class="half right">
                <?php
                if (is_array($_POST['boxes']['right'])) {
                    showTables($_POST['boxes']['right']);
                }
                if (@$_POST['logo_position'] != 'left') {
                    neyraLogo();
                }
                ?>
            </div>
        </div>
        </body>
        </html>
        <?php
    }

    public function getPieData()
    { //new function, optimized
        //check the from/to
        if ($this->input->post('from')) {
            $fromDate = explode('/', $this->input->post('from'));
            $from = mktime(0, 0, 0, $fromDate[0], $fromDate[1], $fromDate[2]);
        } else {
            $from = $this->em->createQuery('SELECT p.created FROM models\Proposals p INNER JOIN p.client c INNER JOIN c.company cmp WHERE (cmp.companyId = c.company) AND (cmp.companyId = ' . $this->account()->getCompany()->getCompanyId() . ') ORDER BY p.created')->setMaxResults(1)->getSingleScalarResult();
        }
        if ($this->input->post('to')) {
            $toDate = explode('/', $this->input->post('to'));
            $to = mktime(23, 59, 59, $toDate[0], $toDate[1], $toDate[2]);
        } else {
            $to = time();
        }
        //magic, motherfucker
        $this->load->database();
        $statuses = array('Won', 'Open', 'Completed', 'Lost', 'Cancelled', 'On Hold');
        $statuses = $this->account()->getStatuses(true);
        $data = array();
        updateOrphanBranches($this->account()->getCompany()->getCompanyId());
        if ($this->account()->getUserClass() >= 2) {
            $sql = "SELECT sum( proposals.price ) AS total FROM proposals
            INNER JOIN clients ON proposals.client = clients.clientID
            LEFT JOIN accounts on clients.account = accounts.accountId
            WHERE clients.company = ?
            AND proposals.proposalStatus = ?
            AND (proposals.created between {$from} and {$to})";
            if ($this->input->post('branch') != 'All' && is_numeric($this->input->post('branch'))) {
                $sql .= ' AND (accounts.branch = ' . $this->input->post('branch') . ')';
            }
        } elseif ($this->account()->getUserClass() == 1) {
            $sql = "SELECT sum( proposals.price ) AS total FROM proposals
            INNER JOIN clients ON proposals.client = clients.clientID
            INNER JOIN accounts on clients.account = accounts.accountId
            WHERE (clients.company = ?)
            AND (proposals.proposalStatus = ?)
            AND (proposals.created between {$from} and {$to})
            AND (accounts.branch = " . $this->account()->getBranch() . ")";
        } else {
            $sql = "SELECT sum( proposals.price ) AS total FROM proposals
            INNER JOIN clients ON proposals.client = clients.clientID
            WHERE clients.company = ? AND proposals.proposalStatus = ? and proposals.created between {$from} and {$to} and clients.account=" . $this->account()->getAccountId();
        }

        // $data['sql'] = $sql;
        foreach ($statuses as $k => $v) {
            $total = $this->db->query($sql, array($this->account()->getCompany()->getCompanyId(), $k))->result();
            $total = ($total[0]->total) ? $total[0]->total : 0;
            $data[] = array(
                'category' => $v,
                'value' => (float)$total,
            );
        }
        echo json_encode($data);
    }

    /*
     * Dashboard Ajax
     */

    public function ajaxProposals()
    {
        $json = array();
        $this->load->database();
        $this->load->model('branchesapi');
        $this->html->addScript('fancybox');
        $qbPermission = false;
        $action = $this->input->get('action');
        $group = $this->input->get('group') ?: false;
        $client = $this->input->get('client');

        //BUILD PROPOSALS ARRAY
        $proposals = array();
        // Get the relevant proposals
        $props = $this->account()->getProposalsData($action, $client);
        $filteredProps = $this->account()->getProposalsData($action, $client, false);

        $is_child_company = $this->account()->getCompany()->checkChildCompany();

 
        foreach ($props as $proposal) {
            // Grab the proposal services for price breakdown
            $services = '';
            $shared_proposal = 0;

            if($this->account()->getCompany()->getCompanyId() != $proposal->company_id){
                $shared_proposal = 1;
            }
            //Get Proposal Preview Url
            $proposalViewUrl = $this->getProposalRepository()->getDefaultProposalLink($proposal->proposalId);

            $breakdownData = $this->getEstimationRepository()->getProposalPriceBreakdown($proposal->proposalId);

            // Populate the datatables array
            $proposals[] = array(
                '0' => $this->load->view('templates/proposals/table/check', array('proposal' => $proposal), true),
                '1' => $this->load->view('templates/proposals/table/actions', array(
                    'proposal' => $proposal,
                    'action' => $action,
                    'group' => $group,
                    'userAccount' => $this->account(),
                    'proposalViewUrl' => $proposalViewUrl->getUrl(),
                    'is_child_company' => $is_child_company,
                    'shared_proposal' => $shared_proposal,
                ), true),
                '2' => date('m/d/y', $proposal->created + TIMEZONE_OFFSET),
                '3' => $this->load->view('templates/proposals/table/status-dropdown', array('proposal' => $proposal),
                    true),
                '4' => ($proposal->win_date) ? date('m/d/y', $proposal->win_date + TIMEZONE_OFFSET) : '-',
                '5' => ($proposal->jobNumber) ? $proposal->jobNumber : '-',
                '6' => $proposal->clientAccountName,
                '7' => $this->load->view('templates/proposals/table/project-name', array('proposal' => $proposal),
                    true),
                '8' => $this->load->view('templates/proposals/table/image-count', array('proposal' => $proposal), true),
                '9' => $this->load->view('templates/proposals/table/formatted-price',
                    array('proposal' => $proposal, 'services' => $services,'breakdownData'=>$breakdownData), true),
                '10' => $this->load->view('templates/proposals/table/contact', array('proposal' => $proposal), true),
                '11' => $this->load->view('templates/proposals/table/owner', array('proposal' => $proposal), true),
                '12' => $this->load->view('templates/proposals/table/last-activity', array('proposal' => $proposal),
                    true),
                '13' => $this->load->view('templates/proposals/table/email-status', array('proposal' => $proposal),
                    true),
                '14' => $this->load->view('templates/proposals/table/delivery-status', array('proposal' => $proposal),
                    true),
                '15' => $this->load->view('templates/proposals/table/open-status', array('proposal' => $proposal),
                    true),
                '16' => $this->load->view('templates/proposals/table/audit-status', array('proposal' => $proposal),
                    true),
                '17' => $this->load->view('templates/proposals/table/estimate-status', array('proposal' => $proposal), true),
                '18' => $this->load->view('templates/proposals/table/profit-price', array('proposal' => $proposal), true),
                '19' => $shared_proposal,
                //'18' => $this->load->view('templates/proposals/table/status-color', array('proposal' => $proposal), true)
            );
        }
        //$total = $this->account()->getProposalsDataTotal();
        $filterTotal = ($filteredProps) ? $filteredProps : 0;

        $json["iTotalRecords"] = 0;
        $json["iTotalDisplayRecords"] = $filterTotal;
        $json['aaData'] = $proposals;
        $json['sEcho'] = $this->input->get('sEcho');
        echo json_encode($json);
    }

    
    public function ajaxProposalsAutomaticResend()
    {
        $json = array();
        $this->load->database();
        $this->load->model('branchesapi');
        $this->html->addScript('fancybox');
        $qbPermission = false;
        $action = $this->input->get('action');
        $group = $this->input->get('group') ?: false;
        $client = $this->input->get('client');

        //BUILD PROPOSALS ARRAY
        $proposals = array();
        // Get the relevant proposals
        $props = $this->account()->getProposalsAutomaticResendData($action, $client);
        $filteredProps = $this->account()->getProposalsAutomaticResendData($action, $client, false);
        $is_child_company = $this->account()->getCompany()->checkChildCompany();
        foreach ($props as $proposal) {
            // Grab the proposal services for price breakdown
            $services = '';

            //Get Proposal Preview Url
            $proposalViewUrl = $this->getProposalRepository()->getDefaultProposalLink($proposal->proposalId);
            $shared_proposal = 0;

            if($this->account()->getCompany()->getCompanyId() != $proposal->company_id){
                $shared_proposal = 1;
            }
            // Populate the datatables array
            $proposals[] = array(
                '0' => $this->load->view('templates/proposals/table/check', array('proposal' => $proposal), true),
                '1' => $this->load->view('templates/proposals/table/actions', array(
                    'proposal' => $proposal,
                    'action' => $action,
                    'group' => $group,
                    'userAccount' => $this->account(),
                    'proposalViewUrl' => $proposalViewUrl->getUrl(),
                    'is_child_company' => $is_child_company,
                    'shared_proposal' => $shared_proposal,
                ), true),
                '2' => date('m/d/y', strtotime($proposal->resend_date) + TIMEZONE_OFFSET),
                '3' => date('m/d/y', $proposal->created + TIMEZONE_OFFSET),
                '4' => $this->load->view('templates/proposals/table/status-dropdown', array('proposal' => $proposal),
                    true),
                '5' => ($proposal->jobNumber) ? $proposal->jobNumber : '-',
                '6' => $proposal->clientAccountName,
                '7' => $this->load->view('templates/proposals/table/project-name', array('proposal' => $proposal),
                    true),
                '8' => $this->load->view('templates/proposals/table/image-count', array('proposal' => $proposal), true),
                '9' => $this->load->view('templates/proposals/table/formatted-price',
                    array('proposal' => $proposal, 'services' => $services), true),
                '10' => $this->load->view('templates/proposals/table/contact', array('proposal' => $proposal), true),
                '11' => $this->load->view('templates/proposals/table/owner', array('proposal' => $proposal), true),
                '12' => $this->load->view('templates/proposals/table/last-activity', array('proposal' => $proposal),
                    true),
                '13' => $this->load->view('templates/proposals/table/email-status', array('proposal' => $proposal),
                    true),
                '14' => $this->load->view('templates/proposals/table/delivery-status', array('proposal' => $proposal),
                    true),
                '15' => $this->load->view('templates/proposals/table/open-status', array('proposal' => $proposal),
                    true),
                '16' => $this->load->view('templates/proposals/table/audit-status', array('proposal' => $proposal),
                    true),
                '17' => $this->load->view('templates/proposals/table/estimate-status', array('proposal' => $proposal), true),
                '18' => $this->load->view('templates/proposals/table/profit-price', array('proposal' => $proposal), true),
                //'18' => $this->load->view('templates/proposals/table/status-color', array('proposal' => $proposal), true)
            );
        }
        //$total = $this->account()->getProposalsDataTotal();
        $filterTotal = ($filteredProps) ? $filteredProps : 0;

        $json["iTotalRecords"] = 0;
        $json["iTotalDisplayRecords"] = $filterTotal;
        $json['aaData'] = $proposals;
        $json['sEcho'] = $this->input->get('sEcho');
        echo json_encode($json);
    }
    /*
     * Dashboard Ajax
     */

    public function ajaxProposalsResend()
    {
        $json = array();
        $this->load->database();
        $this->load->model('branchesapi');
        $this->html->addScript('fancybox');
        $qbPermission = false;
        $action = 'Resend';
        $group = $this->input->get('group') ?: false;
        $client = $this->input->get('client');
        $resend_id = $this->input->get('resend_id');
        $campaignEmailFilter = $this->input->get('campaignFilter') ?: null;

        //BUILD PROPOSALS ARRAY
        $proposals = array();
        // Get the relevant proposals
        $props = $this->account()->getProposalsData($action, $client, true, null, null, null, null, null, $campaignEmailFilter, $resend_id);
        $filteredProps = $this->account()->getProposalsData($action, $client, false, null, null, null, null, null, $campaignEmailFilter, $resend_id);

        $TotalfilteredProps = $this->account()->getProposalsData($action, $client, false, null, null, null, null, null, null, $resend_id);

        $is_child_company = $this->account()->getCompany()->checkChildCompany();

        foreach ($props as $proposal) {

            // Grab the proposal services for price breakdown
            $services = '';

            //Get Proposal Preview Url
            $proposalViewUrl = $this->getProposalRepository()->getDefaultProposalLink($proposal->proposalId);

            $shared_proposal = 0;

            if($this->account()->getCompany()->getCompanyId() != $proposal->company_id){
                $shared_proposal = 1;
            }
            // Populate the datatables array
            $proposals[] = array(
                '0' => $this->load->view('templates/proposals/table/check', array('proposal' => $proposal), true),
                '1' => $this->load->view('templates/proposals/table/actions', array(
                    'proposal' => $proposal,
                    'action' => $action,
                    'group' => $group,
                    'userAccount' => $this->account(),
                    'proposalViewUrl' => $proposalViewUrl->getUrl(),
                    'is_child_company' => $is_child_company,
                    'shared_proposal' => $shared_proposal,
                ), true),
                '2' => date('m/d/y', $proposal->created + TIMEZONE_OFFSET),
                '3' => $this->load->view('templates/proposals/table/status-dropdown', array('proposal' => $proposal),
                    true),
                '4' => ($proposal->win_date) ? date('m/d/y', $proposal->win_date + TIMEZONE_OFFSET) : '-',
                '5' => ($proposal->jobNumber) ? $proposal->jobNumber : '-',
                '6' => $proposal->clientAccountName,
                '7' => $this->load->view('templates/proposals/table/project-name', array('proposal' => $proposal),
                    true),
                '8' => $this->load->view('templates/proposals/table/image-count', array('proposal' => $proposal), true),
                '9' => $this->load->view('templates/proposals/table/formatted-price',
                    array('proposal' => $proposal, 'services' => $services), true),
                '10' => $this->load->view('templates/proposals/table/contact', array('proposal' => $proposal), true),
                '11' => $this->load->view('templates/proposals/table/owner', array('proposal' => $proposal), true),
                '12' => $this->load->view('templates/proposals/table/last-activity', array('proposal' => $proposal),
                    true),
                '13' => $this->load->view('templates/proposals/table/email-status', array('proposal' => $proposal),
                    true),
                '14' => $this->load->view('templates/proposals/table/delivery-status', array('proposal' => $proposal),
                    true),
                '15' => $this->load->view('templates/proposals/table/open-status', array('proposal' => $proposal),
                    true),
                '16' => $this->load->view('templates/proposals/table/audit-status', array('proposal' => $proposal),
                    true),
                '17' => $this->load->view('templates/proposals/table/estimate-status', array('proposal' => $proposal), true),
                '18' => $this->load->view('templates/proposals/table/profit-price', array('proposal' => $proposal), true)
            );
        }

        $filterTotal = 0;
        if (isset($filteredProps)) {
            $filterTotal = $filteredProps;
        }
        $json["iTotalRecords"] = 0;
        $json["iTotalDisplayRecords"] = $filterTotal;
        $json['aaData'] = $proposals;
        $json['sEcho'] = $this->input->get('sEcho');
        echo json_encode($json);
    }

    /*
     * Ajax Proposals Page
     */

    public function ajaxProposalsStatus()
    {
        $json = array();
        $this->load->database();
        $this->load->model('branchesapi');
        $this->html->addScript('fancybox');
        $qbPermission = false;
        $action = $this->input->get('action');
        $group = $this->input->get('group') ?: false;

        //BUILD PROPOSALS ARRAY
        $proposals = array();
        // Get the relvant proposals
        $props = $this->account()->getProposalsStatusData($action);

        $is_child_company = $this->account()->getCompany()->checkChildCompany();
        foreach ($props as $proposal) {

            // Grab the proposal services for price breakdown
            $services = '';
            
            //Get Proposal Preview Url
            $proposalViewUrl = $this->getProposalRepository()->getDefaultProposalLink($proposal->proposalId);

            $shared_proposal = 0;

            if($this->account()->getCompany()->getCompanyId() != $proposal->company_id){
                $shared_proposal = 1;
            }
            // Populate the datatables array
            $proposals[] = array(
                '0' => $this->load->view('templates/proposals/table/check', array('proposal' => $proposal), true),
                '1' => $this->load->view('templates/proposals/table/actions', array(
                    'proposal' => $proposal,
                    'action' => $action,
                    'group' => $group,
                    'userAccount' => $this->account(),
                    'proposalViewUrl' => $proposalViewUrl->getUrl(),
                    'is_child_company' => $is_child_company,
                    'shared_proposal' => $shared_proposal,
                ), true),
                '2' => date('m/d/y', $proposal->created + TIMEZONE_OFFSET),
                '3' => $this->load->view('templates/proposals/table/status-dropdown', array('proposal' => $proposal),
                    true),
                '4' => ($proposal->win_date) ? date('m/d/y', $proposal->win_date + TIMEZONE_OFFSET) : '-',
                '5' => ($proposal->jobNumber) ? $proposal->jobNumber : '-',
                '6' => $proposal->clientAccountName,
                '7' => $this->load->view('templates/proposals/table/project-name', array('proposal' => $proposal),
                    true),
                '8' => $this->load->view('templates/proposals/table/image-count', array('proposal' => $proposal), true),
                '9' => $this->load->view('templates/proposals/table/formatted-price',
                    array('proposal' => $proposal, 'services' => $services), true),
                '10' => $this->load->view('templates/proposals/table/contact', array('proposal' => $proposal), true),
                '11' => $this->load->view('templates/proposals/table/owner', array('proposal' => $proposal), true),
                '12' => $this->load->view('templates/proposals/table/last-activity', array('proposal' => $proposal),
                    true),
                '13' => $this->load->view('templates/proposals/table/email-status', array('proposal' => $proposal),
                    true),
                '14' => $this->load->view('templates/proposals/table/delivery-status', array('proposal' => $proposal),
                    true),
                '15' => $this->load->view('templates/proposals/table/open-status', array('proposal' => $proposal),
                    true),
                '16' => $this->load->view('templates/proposals/table/audit-status', array('proposal' => $proposal),
                    true),
                '17' => $this->load->view('templates/proposals/table/estimate-status', array('proposal' => $proposal), true),
                '18' => $this->load->view('templates/proposals/table/profit-price', array('proposal' => $proposal), true)
            );
        }
        $total = $this->account()->getProposalsStatusData($action, true)[0]->total;
        $json["iTotalRecords"] = $total;
        $json["iTotalDisplayRecords"] = $total;
        $json['aaData'] = $proposals;
        $json['sEcho'] = $this->input->get('sEcho');
        echo json_encode($json);
    }

    public function changeProposalStatus($id, $status = null)
    {

        if ($this->account()) {
            if (!$status) {
                $status = $this->input->post('value');
            }

            $status = urldecode($status);

            $status = str_replace('_', '', $status);

            $proposal = $this->em->find('models\Proposals', $id);
            /* @var \models\Proposals $proposal */

            if (!$proposal) {
                $this->session->set_flashdata('error', 'Proposal does not exist!');
                redirect('proposals');
            }

            $oldStatus = $proposal->getStatus();
            $newStatus = $status;
            //Set invoice_date value
            if($newStatus==7){
                $proposal->setInvoiceDate(time());
            }else{
                $proposal->setInvoiceDate("-");
            }

 
 
            $statusModel = $this->em->find('\models\Status', $status);
            /* @var \models\Status $statusModel */

            if ($proposal->getProposalStatus()->getText() != $statusModel->getText()) {
                $this->log_manager->add(\models\ActivityAction::CHANGE_PROPOSAL_STATUS,
                    'Updated Proposal Status from ' . $proposal->getProposalStatus()->getText() . ' to ' . $statusModel->getText(),
                    $proposal->getClient(),
                    $proposal,
                    null,
                    null,
                    $oldStatus,
                    $newStatus);
            }


            //Event Log
            $this->getProposalEventRepository()->changeProposalStatus($proposal, $this->account(), $proposal->getProposalStatus()->getText(), $statusModel->getText());

            // Set to sold if sales status
            if (!$proposal->isWon()) {
                if ($statusModel->isSales()) {
                    $proposal->setWinDate(time());
                    

                    //Event Log
                    $this->getProposalEventRepository()->proposalsSetSold($proposal, $this->account());
                }


            } else {
                // Going from sold status to unsold - remove win date
                if (!$statusModel->isSales()) {
                    $proposal->setWinDate(null);
 
                }


            }

            $proposal->setStatus($status);
            $this->em->persist($proposal);
            $this->em->flush();
            echo $statusModel->getText();
        }

    }

    public function ajaxGetClients()
    {
        $data = [];

        $action = $this->input->get('action') ?: null;
        $type = $this->input->get('type') ?: null;
        $resend_id = $this->input->get('resend_id');
        $clients = $this->account()->getClientsTableData($action, $type, $resend_id);
        $group = $this->input->get('group');

      //  echo "<pre>";print_r($clients);die;

        
        $clientsData = array();
        $k = 0;
        foreach ($clients as $clientData) {
            $k++;
            $names = explode(' ', trim($clientData->ownerFullName));
            $shortName = '';
            foreach ($names as $name) {
                $shortName .= substr($name, 0, 1) . '. ';
            }
            

            if (($this->account()->getCompany()->getCompanyId() == $clientData->company_id) && (($this->account()->isAdministrator()) || ($this->account()->getFullAccess() == 'yes') || ($this->account()->getAccountId() == $clientData->account))) {
                $permission = 1;
            }else{
                $permission = 0;
            }

            $templateData = array('clientData' => $clientData, 'group' => $group,'permission' =>$permission);
            $business_type = '<div style="text-align:center"><a href="javascript:void(0);" class="tiptip manage_business_type" title="Add Business Type"  rel="' . $clientData->clientId . '"  style="font-size: 14px;color:#a5a2a2;"><i class="fa fa-fw fa-plus"  ></i></a></div>';
            if ($clientData->types) {
                $types = explode(',', $clientData->types);

                if (count($types) > 1) {
                    $business_type_tooltip = '';
                    foreach ($types as $btype) {

                        $business_type_tooltip .= $btype . '<br/>';
                    }
                    $business_type = '<div><span  class="tiptip manage_business_type" title="Update Business Type"  rel="' . $clientData->clientId . '"  style="color:#25AAE1;">' . $types[0] . '</span> <a class="tiptip" style="cursor:pointer" title="' . $business_type_tooltip . '"> +' . (count($types) - 1) . '</a></div>';
                } else if (count($types) == 1) {
                    $business_type = '<div><span  class="tiptip manage_business_type" title="Update Business Type"  rel="' . $clientData->clientId . '"  style="color:#25AAE1;">' . $types[0] . '</span></div>';
                }
            }
            //$notes_count = $this->getClientRepository()->getClientNotesCount($clientData->clientId);

            $client_name = '<div style="display: flex;justify-content: space-between;"><div>' . $clientData->firstName . ' ' . $clientData->lastName . '</div><div><span style="display: flex;float:right;justify-content: flex-end;text-align:right;font-size: 14px;">';
            if ($clientData->resend_excluded == 1) {
                $client_name .= '<i class="fa fa-fw fa-envelope-square tiptip include_resend_individual" data-client="' . $clientData->clientId . '" title="This Contact will not be emailed in any proposal campaigns" style="color: #ff0000bf;cursor:pointer"></i>';
            }

            $displayAddNote = ($clientData->ncount) ? false : true;
            $client_name .= ' <a href="javascript:void(0);"  class="view-notes client_table_notes_tiptip hasNotes" rel="' . $clientData->clientId . '" data-val="' . $clientData->clientId . '"  style="font-size: 14px;color:#a5a2a2; display:' . (($displayAddNote) ? 'none' : 'block') . '"><i class="fa fa-fw fa-sticky-note-o "  ></i></a>';
            $client_name .= '<a href="javascript:void(0);"class="view-notes tiptip hasNoNotes" title="Add Contact Notes"  rel="' . $clientData->clientId . '"  style="font-size: 14px;color:#a5a2a2;float:right; display:' . (($displayAddNote) ? 'block' : 'none') . '"><i class="fa fa-fw fa-plus"></i></a>';
            $client_name .= '</div></span></div>';

            $clientsData[] = array(
                $this->load->view('templates/clients/table/check', $templateData, true),
                // 0 checkbox
                $this->load->view('templates/clients/table/actions', $templateData, true),
                // 1 go button
                ($clientData->clientCompanyName) ? $clientData->clientCompanyName : '',
                 // 2 Company name
                $business_type,
                // 3 business type
                $client_name,
                // 4 Full Name
                $clientData->email,
                // 5 email
                $clientData->cellPhone,
                // 6 cell phone

                '<a href="' . site_url('proposals/clientProposals/' . $clientData->clientId) . '"  class="tiptipleft" title="View Proposals"  >' . $clientData->proposals_count . '</a>',
                // 7 Proposals Count
                '<a href="' . site_url('proposals/clientProposals/' . $clientData->clientId) . '"  class="tiptipleft" title="View Proposals"  >$' . readableValue($clientData->bid_total) . '</a>',
                // 8 Proposals Count
                '<span class="tiptip" title="' . $clientData->ownerFullName . '">' . $shortName . '</span>',
                // 9 Owner
                $clientData->last_activity,
                // 10 Last activity int
               // $clientData->last_activity ? date('m/d/y g:ia', $clientData->last_activity) : '',
               $clientData->last_activity ?  date('m/d/Y g:i A', $clientData->last_activity + TIMEZONE_OFFSET) : '',

                isset($clientData->opened_at) ? Carbon::createFromFormat('Y-m-d H:i:s', $clientData->opened_at)->format('m/d/y g:ia') : '',
                // 11 Last activity

            );
        }

        $data['aaData'] = $clientsData;
        $data['sEcho'] = $this->input->get('sEcho');
        $data["iTotalRecords"] = $this->account()->getClientsTableDataTotal(true, $action, $type, $resend_id);
        $data["iTotalDisplayRecords"] = $this->account()->getClientsTableDataTotal(false, $action, $type, $resend_id);
        $this->session->set_userdata('ClientSearchFilter', '');
        echo json_encode($data);
    }

    public function ajaxGetLeads()
    {
        $action = $this->input->get('action') ?: null;
        $type = $this->input->get('type') ?: null;
        $resend_id = $this->input->get('resend_id') ?: null;
        $leads = $this->account()->getLeadsNew(false, $action, $type, $resend_id);

     
        $accounts = $this->getCompanyAccounts();

        $leadsData = [];
        $k = 0;


        foreach ($leads as $lead) {
            $k++;
            $types = $this->getLeadRepository()->getLeadBusinessTypes($lead->leadId);

            $notes_count = $this->getLeadRepository()->getLeadNotesCount($lead->leadId);
            $rowClass = '';
            if (in_array($lead->status, array('Closed', 'Converted', 'Cancelled'))) {
                $rowClass = 'gradeX';
            } else {
                if ($lead->psa_audit_url) {
                    $rowClass = 'hasAudit';
                }
            }
            $business_type = '<div style="text-align:center"><a href="javascript:void(0);" class="tiptip manage_business_type" title="Add Business Type"  rel="' . $lead->leadId . '"  style="font-size: 14px;color:#a5a2a2;"><i class="fa fa-fw fa-plus"  ></i></a></div>';

            if (count($types) > 1) {
                $business_type_tooltip = '';
                foreach ($types as $type) {

                    $business_type_tooltip .= $type->type_name . '<br/>';
                }
                $business_type = '<div><span  class="tiptip manage_business_type" title="Update Business Type"  rel="' . $lead->leadId . '"  style="color:#25AAE1;">' . $type->type_name . '</span> <a class="tiptip" style="cursor:pointer" title="' . $business_type_tooltip . '"> +' . (count($types) - 1) . '</a></div>';
            } else if (count($types) == 1) {

                $business_type = '<div><span  class="tiptip manage_business_type" title="Update Business Type"  rel="' . $lead->leadId . '"  style="color:#25AAE1;">' . $types[0]->type_name . '</span></div>';
            }
            $leads_status = '<div style="display: flex;justify-content: space-between;"><div>' . $lead->status . '</div><div>';;
            $displayAddNote = ($notes_count->ncount) ? false : true;
            $leads_status .= ' <a href="javascript:void(0);"  class="lead-notes lead_table_notes_tiptip hasNotes" rel="' . $lead->leadId . '" data-val="' . $lead->leadId . '"  style="font-size: 14px;color:#a5a2a2; display:' . (($displayAddNote) ? 'none' : 'block') . '"><i class="fa fa-fw fa-sticky-note-o "  ></i></a>';
            $leads_status .= '<a href="javascript:void(0);"class="lead-notes tiptip hasNoNotes" title="Add Lead Notes"  rel="' . $lead->leadId . '"  style="font-size: 14px;color:#a5a2a2;float:right; display:' . (($displayAddNote) ? 'block' : 'none') . '"><i class="fa fa-fw fa-plus"  ></i></a></span>';
            $leads_status .= '</div></div>';


            $leadsData[] = array(
                $this->load->view('templates/leads/table/check', ['lead' => $lead], true),
                $this->load->view('templates/leads/table/actions', ['lead' => $lead], true),
                date('m/d/y', $lead->created + TIMEZONE_OFFSET),
                $business_type,
                $lead->source,
                $leads_status,
                $lead->rating,
                $lead->dueDate ? date('m/d/y', $lead->dueDate) : '-',
                $lead->companyName,
                $lead->projectZip,
                $lead->projectName,
                $this->load->view('templates/leads/table/contact', ['lead' => $lead, 'types' => $types], true),
                $this->load->view('templates/leads/table/owner', ['lead' => $lead, 'accounts' => $accounts], true),
                $lead->last_activity,
              //  $lead->last_activity ? date('m/d/y g:ia', $lead->last_activity) : '',
                $lead->last_activity ? date('m/d/Y g:i A', $lead->last_activity + TIMEZONE_OFFSET) : '',                
                (isset($lead->opened_at)) && is_a($lead->opened_at, 'DateTime') ? Carbon::instance($lead->opened_at)->format('m/d/y g:ia') : '',
                //Carbon::createFromFormat('Y-m-d H:i:s', '2020-06-09 14:00:00')->format('m/d/y g:ia'),
                'DT_RowClass' => $rowClass,
            );
        }
        $data = [];
        $data['aaData'] = $leadsData;
        $data['sEcho'] = $this->input->get('sEcho');
        $data["iTotalRecords"] = $this->account()->getLeadsNew(true, $action, $type, $resend_id);
        $data["iTotalDisplayRecords"] = $this->account()->getLeadsNew(true, $action, $type, $resend_id);
        echo json_encode($data);
    }

    public function ajaxSearchClients()
    {

        $sql = 'SELECT c FROM models\Clients c
            INNER JOIN c.client_account ca
            WHERE c.company=' . $this->account()->getCompany()->getCompanyId() . "
            AND ca.name LIKE '%" . $this->input->post('startsWith') . "%'";

        if ($this->input->post('firstName')) {
            $sql .= " AND c.firstName LIKE '%" . $this->input->post('firstName') . "%'";
        }

        if ($this->input->post('lastName')) {
            $sql .= " AND c.lastName LIKE '%" . $this->input->post('lastName') . "%'";
        }

        $clients = $this->em->createQuery($sql)
            ->setMaxResults(30)
            ->getResult();

        $jsonClients = array();
        foreach ($clients as $client) {
            $jsonClients[] = array(
                'label' => $client->getClientAccount()->getName() . ' (' . $client->getFirstName() . ' ' . $client->getLastName() . ") - " . $client->getAddress() . ', ' . $client->getCity() . ', ' . $client->getState(),
                'value' => $client->getClientId(),
            );
        }
        echo json_encode($jsonClients);
    }

    public function ajaxSearchClientsName()
    {

        $sql = 'SELECT c FROM models\Clients c
            INNER JOIN c.client_account ca
            WHERE c.company=' . $this->account()->getCompany()->getCompanyId() . "
            AND ca.name LIKE '%" . $this->input->post('startsWith') . "%'";

        if ($this->input->post('firstName')) {
            $sql .= " AND c.firstName LIKE '%" . $this->input->post('firstName') . "%'";
        }

        if ($this->input->post('lastName')) {
            $sql .= " AND c.lastName LIKE '%" . $this->input->post('lastName') . "%'";
        }

        $clients = $this->em->createQuery($sql)
            ->setMaxResults(30)
            ->getResult();

        $jsonClients = array();
        foreach ($clients as $client) {
            $jsonClients[] = array(
                'label' => $client->getClientAccount()->getName(),
                'value' => $client->getClientId(),
            );
        }
        echo json_encode($jsonClients);
    }

    public function ajaxSelect2SearchClients()
    {

        $search_keys = preg_split('/\s+/', $this->input->get('startsWith'));
        $sql = 'SELECT c FROM models\Clients c
            INNER JOIN c.client_account ca
            WHERE c.company=' . $this->account()->getCompany()->getCompanyId();

        $i = 0;
        foreach ($search_keys as $search_key) {

            $sql .= " AND (ca.name LIKE :searchkey" . $i . " OR c.firstName LIKE :searchkey" . $i . " OR c.lastName LIKE :searchkey" . $i . " OR c.address LIKE :searchkey" . $i . " OR c.city LIKE :searchkey" . $i . " OR c.zip LIKE :searchkey" . $i . ")";
            $i++;
        }

        $query = $this->em->createQuery($sql)
            ->setMaxResults(30);
        $j = 0;
        foreach ($search_keys as $search_key) {
            $search_key = $this->db->escape_str($search_key);
            $query->setParameter(':searchkey' . $j, "%" . $search_key . "%");
            $j++;
        }

        $clients = $query->getResult();

        $jsonClients = array();
        $jsonClients['items'] = [];
        foreach ($clients as $client) {
            try {
                $jsonClients['items'][] = array(
                    'label' => $client->getClientAccount()->getName(),
                    'id' => $client->getClientId(),
                    'address' => $client->getAddress() . '<br/>' . $client->getCity() . ' ' . $client->getState() . ' ' . $client->getZip(),
                    'contact' => $client->getFirstName() . ' ' . $client->getLastName(),
                    'owner' => $client->getAccount()->getFullName(),
                    'proposals_count' => $client->getProposalsCount(),
                );
            } catch (\Exception $e) {
                // Don't populate result
            }

        }
        $jsonClients['incomplete_results'] = false;
        $jsonClients['total_count'] = count($clients);
        echo json_encode($jsonClients);
    }

    public function ajaxSelect2SearchClientsCompany()
    {

        // $search_keys = preg_split('/\s+/', $this->input->get('startsWith'));
        $sql = 'SELECT cc FROM models\ClientCompany cc
        
            WHERE cc.owner_company=' . $this->account()->getCompany()->getCompanyId() . '
            AND cc.id != ' . $this->input->get('client_id');

        $search_key = $this->db->escape_str($this->input->get('startsWith'));
        $sql .= " AND (cc.name LIKE :searchkey )";

        $clients = $this->em->createQuery($sql)
            ->setMaxResults(30)
            ->setParameter(':searchkey', "%" . $search_key . "%")
            ->getResult();

        $jsonClients = array();
        $jsonClients['items'] = [];
        foreach ($clients as $client) {
            $jsonClients['items'][] = array(
                'label' => $client->getName(),
                'id' => $client->getId(),
                'contact' => $client->getOwnerUser()->getFullname(),
            );
        }
        $jsonClients['incomplete_results'] = false;
        $jsonClients['total_count'] = count($clients);
        echo json_encode($jsonClients);
    }

    public function ajaxSelect2SearchGroupClientsCompany()
    {

        //$this->load->database();
        $search_keys = preg_split('/\s+/', $this->input->get('startsWith'));
        $ids = implode(',', $this->input->get('client_ids'));
        $sql = 'SELECT cc FROM models\ClientCompany cc
                WHERE cc.owner_company=' . $this->account()->getCompany()->getCompanyId() . '
                AND cc.id NOT IN(' . $ids . ')';


        // foreach($search_keys as $search_key){
        $search_key = $this->db->escape_str($this->input->get('startsWith'));
        $sql .= " AND (cc.name LIKE :searchkey )";
        //}
        //echo  $sql;die;
        $clients = $this->em->createQuery($sql)
            ->setMaxResults(30)
            ->setParameter(':searchkey', "%" . $search_key . "%")
            ->getResult();

        // $qb = $this->doctrine->em->createQueryBuilder();
        // $qb->select('cc')
        // ->from('\models\ClientCompany', 'cc')
        // ->where('cc.owner_company = :companyId');
        // $qb->andWhere("cc.id NOT IN('. $ids.')");
        // $search_key = $this->db->escape_like_str($this->input->get('startsWith'));

        // $qb->andWhere("(cc.name LIKE :searchkey )");

        // $qb->setMaxResults(10);
        // $qb->setParameter(':companyId', $this->account()->getCompany()->getCompanyId());
        // $qb->setParameter(':searchkey', "%" . $search_key . "%");


        // $query = $qb->getQuery();
        // $clients = $query->getResult();


        $jsonClients = array();
        $jsonClients['items'] = [];
        foreach ($clients as $client) {
            $jsonClients['items'][] = array(
                'label' => $client->getName(),
                'id' => $client->getId(),
                'contact' => $client->getOwnerUser()->getFullname(),
            );
        }
        $jsonClients['incomplete_results'] = false;
        $jsonClients['total_count'] = count($clients);
        echo json_encode($jsonClients);
    }

    public function ajaxSearchClient()
    {
        $qb = $this->doctrine->em->createQueryBuilder();
        /* @var $qb \Doctrine\ORM\QueryBuilder */

        // Begin Query - Ensure restriction to this company only
        $qb->select('c')
            ->from('\models\Clients', 'c')
            ->where('c.company = :companyId');

        $qb->andWhere("((c.email LIKE '%" . $this->input->get('email') . "%')
                        AND (c.firstName LIKE '%" . $this->input->get('firstName') . "%')
                        AND (c.lastName LIKE '%" . $this->input->get('lastName') . "%')
                        AND (c.email LIKE '%" . $this->input->get('email') . "%'))");

        $qb->setMaxResults(10);
        $qb->setParameter(':companyId', $this->account()->getCompany()->getCompanyId());

        $query = $qb->getQuery();
        $clients = $query->getResult();

        $out = [];
        $i = 0;
        foreach ($clients as $client) {
            /* @var $client \models\Clients */
            $out[$i]['name'] = $client->getFullName();
            $out[$i]['id'] = $client->getClientId();
            $out[$i]['account'] = $client->getClientAccount() ? ' - ' . $client->getClientAccount()->getName() : '';
            $i++;
        }

        echo json_encode($out);
    }

    public function ajaxSearchClientName()
    {
        $qb = $this->doctrine->em->createQueryBuilder();
        /* @var $qb \Doctrine\ORM\QueryBuilder */

        // Begin Query - Ensure restriction to this company only
        $qb->select('c')
            ->from('\models\Clients', 'c')
            ->where('c.company = :companyId');

        $qb->andWhere("((c.firstName LIKE '%" . $this->input->get('firstName') . "%')
                        AND (c.lastName LIKE '%" . $this->input->get('lastName') . "%'))");

        $qb->setMaxResults(10);
        $qb->setParameter(':companyId', $this->account()->getCompany()->getCompanyId());

        $query = $qb->getQuery();
        $clients = $query->getResult();

        $out = [];
        $i = 0;
        foreach ($clients as $client) {
            /* @var $client \models\Clients */
            $out[$i]['name'] = $client->getFullName();
            $out[$i]['id'] = $client->getClientId();
            $out[$i]['account'] = $client->getClientAccount()->getName();
            $out[$i]['title'] = $client->getTitle();
            $out[$i]['address'] = $client->getAddress();
            $out[$i]['city'] = $client->getCity();
            $out[$i]['state'] = $client->getState();
            $out[$i]['zip'] = $client->getZip();
            $out[$i]['email'] = $client->getEmail();
            $out[$i]['phone'] = $client->getBusinessPhone();
            $out[$i]['phoneExt'] = $client->getBusinessPhoneExt();
            $i++;
        }

        echo json_encode($out);
    }

    public function ajaxSearchAccounts()
    {
        $qb = $this->doctrine->em->createQueryBuilder();
        /* @var $qb \Doctrine\ORM\QueryBuilder */

        // Begin Query - Ensure restriction to this company only
        $qb->select('cc')
            ->from('\models\ClientCompany', 'cc')
            ->from('\models\Accounts', 'a')
            ->where('cc.owner_user = a.accountId')
            ->andWhere('a.company = :companyId')
            ->andWhere("cc.name LIKE '%" . $this->input->get('search') . "%'")
            ->setMaxResults(10);

        $qb->setParameter(':companyId', $this->account()->getCompany()->getCompanyId());

        $query = $qb->getQuery();
        $accounts = $query->getResult();

        $out = [];
        $i = 0;
        foreach ($accounts as $clientAccount) {
            /* @var $clientAccount \models\ClientCompany */
            $out[$i]['name'] = $clientAccount->getName();
            $out[$i]['id'] = $clientAccount->getId();
            $i++;
        }

        echo json_encode($out);
    }

    public function setClientFilter()
    {
        $this->resetClientFilter();
        $this->session->set_userdata($_POST);
        $this->session->set_userdata('cFilter', 1);
        $out = [];
        $out['success'] = true;

        echo json_encode($out);
    }

    public function resetClientFilter()
    {
        $this->session->set_userdata(array(
            'cFilter' => '',
            'cFilterUser' => '',
            'cFilterBranch' => '',
            'cFilterClientAccount' => '',
            'cFilterBusinessType' => '',
        ));
    }

    public function setClientResendFilter($resend_id)
    {

        $this->resetClientResendFilter($resend_id);
        //$this->session->set_userdata($_POST);
        if ($this->input->post('cFilterUser')) {
            $this->session->set_userdata('crFilterUser_' . $resend_id, $this->input->post('cFilterUser'));
        } else {
            $this->session->set_userdata('crFilterUser_' . $resend_id, '');
        }

        if ($this->input->post('cFilterBranch')) {
            $this->session->set_userdata('crFilterBranch_' . $resend_id, $this->input->post('cFilterBranch'));
        } else {
            $this->session->set_userdata('crFilterBranch_' . $resend_id, '');
        }

        if ($this->input->post('cFilterClientAccount')) {
            $this->session->set_userdata('crFilterClientAccount_' . $resend_id, $this->input->post('cFilterClientAccount'));
        } else {
            $this->session->set_userdata('crFilterClientAccount_' . $resend_id, '');
        }
        if ($this->input->post('cFilterBusinessType')) {
            $this->session->set_userdata('crFilterBusinessType_' . $resend_id, $this->input->post('cFilterBusinessType'));
        } else {
            $this->session->set_userdata('crFilterBusinessType_' . $resend_id, '');
        }

        if ($this->input->post('cResendInclude')) {
            $this->session->set_userdata('crResendInclude_' . $resend_id, $this->input->post('cResendInclude'));
        } else {
            $this->session->set_userdata('crResendInclude_' . $resend_id, '');
        }
        if ($this->input->post('cResendExclude')) {
            $this->session->set_userdata('crResendExclude_' . $resend_id, $this->input->post('cResendExclude'));
        } else {
            $this->session->set_userdata('crResendExclude_' . $resend_id, '');
        }


        $this->session->set_userdata('crFilter_' . $resend_id, 1);
        $out = [];
        $out['success'] = true;

        echo json_encode($out);
    }

    public function resetClientResendFilter($resend_id)
    {
        $this->session->set_userdata(array(
            'crFilter_' . $resend_id => '',
            'crFilterUser_' . $resend_id => '',
            'crFilterBranch_' . $resend_id => '',
            'crFilterClientAccount_' . $resend_id => '',
        ));
    }

    public function setAccountsFilter()
    {
        $this->resetAccountsFilter();
// Filter for account page
$this->session->set_userdata('pStatsFilterFrom', $this->input->post('accFilterFrom'));
$this->session->set_userdata('pStatsFilterTo', $this->input->post('accFilterTo'));


// Filter for stats page clickthrough
$this->session->set_userdata('pStatusFilterFrom', $this->input->post('accFilterFrom'));
$this->session->set_userdata('pStatusFilterTo', $this->input->post('accFilterTo'));

        $this->session->set_userdata($_POST);
        $this->session->set_userdata('accFilter', 1);

        
    }

    public function setHistoryFilter()
    {
        $this->session->set_userdata(array(

            'hFilterFrom' => '',
            'hFilterTo' => '',
            'hActionParent' => '',
            'hActionChild' => '',

        ));

        $this->session->set_userdata($_POST);
        $this->session->set_userdata('hisFilter', 1);
    }

    public function setAdminHistoryFilter()
    {
        $this->session->set_userdata(array(

            'hAdminFilterFrom' => '',
            'hAdminFilterTo' => '',
            'hAdminActionParent' => '',
            'hAdminActionChild' => '',

        ));

        $this->session->set_userdata($_POST);
        $this->session->set_userdata('hisAdminFilter', 1);
    }


    public function resetAccountsFilter()
    {
        $this->session->set_userdata(array(
            'accFilter' => '',
            'accFilterUser' => '',
            'accFilterAUser' => '',
            'accFilterFrom' => '',
            'accFilterTo' => '',
            'accFilterBranch' => '',
            'accFilterABranch' => '',
            'accFilterBusinessType' => '',
        ));
    }

    public function setAccountInfoFilter()
    {
        $this->session->set_userdata($_POST);
        $this->session->set_userdata('accInfoFilter', 1);
    }

    public function resetAccountInfoFilter()
    {
        $this->session->set_userdata([
            'accInfoFilter' => '',
            'accInfoFilterFrom' => '',
            'accInfoFilterTo' => '',
        ]);
    }

    public function setLeadFilter()
    {
        $this->session->set_userdata($_POST);
        $this->session->set_userdata('lFilter', 1);

        // Do some date stuff
        if ($this->input->post('lFilterDateStart')) {
            $this->session->set_userdata('lFilterDateStart', Carbon::createFromFormat('m/d/', $this->input->post('lFilterDateStart'))->timestamp);
        } else {
            $this->session->set_userdata('lFilterDateStart', '');
        }

        if ($this->input->post('lFilterDateEnd')) {
            $this->session->set_userdata('lFilterDateEnd', Carbon::createFromFormat('m/d/y', $this->input->post('lFilterDateEnd'))->timestamp);
        } else {
            $this->session->set_userdata('lFilterDateEnd', '');
        }
    }

    public function setLeadFilters()
    {
        $this->resetLeadFilter();
        $this->session->set_userdata($_POST);
        $this->session->set_userdata('lFilter', 1);

        // Do some date stuff
        if ($this->input->post('lFilterDateStart')) {
            $this->session->set_userdata('lFilterDateStart', Carbon::createFromFormat('m/d/Y', $this->input->post('lFilterDateStart'))->timestamp);
        } else {
            $this->session->set_userdata('lFilterDateStart', '');
        }

        if ($this->input->post('lFilterDateEnd')) {
            $this->session->set_userdata('lFilterDateEnd', Carbon::createFromFormat('m/d/Y', $this->input->post('lFilterDateEnd'))->timestamp);
        } else {
            $this->session->set_userdata('lFilterDateEnd', '');
        }
    }


    public function resetLeadFilter()
    {
        $this->session->set_userdata([
            'lFilter' => '',
            'lFilterUser' => '',
            'lFilterStatus' => ['Active'],
            'lFilterSource' => '',
            'lFilterDue' => '',
            'lFilterBusinessType' => '',
        ]);
    }

    public function setLeadResendFilters($resend_id)
    {
        $this->resetLeadResendFilter($resend_id);
        //$this->session->set_userdata($_POST);
        $this->session->set_userdata('lrFilter_' . $resend_id, 1);


        if ($this->input->post('lFilterDateStart')) {
            $this->session->set_userdata('lrFilterDateStart_' . $resend_id, Carbon::createFromFormat('m/d/Y', $this->input->post('lFilterDateStart'))->timestamp);
        } else {
            $this->session->set_userdata('lrFilterDateStart_' . $resend_id, '');
        }

        // Do some date stuff
        if ($this->input->post('lFilterUser')) {
            $this->session->set_userdata('lrFilterUser_' . $resend_id, $this->input->post('lFilterUser'));
        } else {
            $this->session->set_userdata('lrFilterUser_' . $resend_id, '');
        }

        if ($this->input->post('lFilterStatus')) {
            $this->session->set_userdata('lrFilterStatus_' . $resend_id, $this->input->post('lFilterStatus'));
        } else {
            $this->session->set_userdata('lrFilterStatus_' . $resend_id, '');
        }

        if ($this->input->post('lFilterSource')) {
            $this->session->set_userdata('lrFilterSource_' . $resend_id, $this->input->post('lFilterSource'));
        } else {
            $this->session->set_userdata('lrFilterSource_' . $resend_id, '');
        }

        if ($this->input->post('lFilterDateEnd')) {
            $this->session->set_userdata('lrFilterDateEnd_' . $resend_id, Carbon::createFromFormat('m/d/Y', $this->input->post('lFilterDateEnd'))->timestamp);
        } else {
            $this->session->set_userdata('lrFilterDateEnd_' . $resend_id, '');
        }
    }


    public function resetLeadResendFilter($resend_id)
    {
        $this->session->set_userdata([
            'lrFilter_' . $resend_id => '',
            'lrFilterUser_' . $resend_id => '',
            'lrFilterStatus_' . $resend_id => ['Active'],
            'lrFilterSource_' . $resend_id => '',
            'lrFilterDue_' . $resend_id => '',
        ]);
    }

    public function setProspectFilter()
    {
        $this->resetProspectFilter();
        $this->session->set_userdata($_POST);
        $this->session->set_userdata('ptFilter', 1);

        // Handle 'All' values
        if ($this->session->userdata('ptFilterUser') == 'All') {
            $this->session->set_userdata('ptFilterUser', '');
        }

        if ($this->session->userdata('ptFilterBranch') == 'All') {
            $this->session->set_userdata('ptFilterBranch', '');
        }

        if ($this->session->userdata('ptFilterStatus') == 'All') {
            $this->session->set_userdata('ptFilterStatus', '');
        }

        if ($this->session->userdata('ptFilterRating') == 'All') {
            $this->session->set_userdata('ptFilterRating', '');
        }

        if ($this->session->userdata('ptFilterSource') == 'All') {
            $this->session->set_userdata('ptFilterSource', '');
        }

        if ($this->session->userdata('ptFilterBusinessType') == 'All') {
            $this->session->set_userdata('ptFilterBusinessType', '');
        }

        // We may have removed filters above, so if there are no filter, remove ptFilter flag
        if (
            !$this->session->userdata('ptFilterUser') &&
            !$this->session->userdata('ptFilterBranch') &&
            !$this->session->userdata('ptFilterStatus') &&
            !$this->session->userdata('ptFilterRating') &&
            !$this->session->userdata('ptFilterBusinessType') &&
            !$this->session->userdata('ptFilterSource')
        ) {
            $this->session->set_userdata('ptFilter', '');
        }
    }

    public function resetProspectFilter()
    {
        $this->session->set_userdata(array(
            'ptFilter' => '',
            'ptFilterUser' => '',
            'ptFilterBranch' => '',
            'ptFilterStatus' => '',
            'ptFilterRating' => '',
            'ptFilterSource' => '',
            'ptFilterBusinessType' => '',

        ));
    }

    public function setProspectResendFilter($resend_id)
    {
        $this->resetProspectResendFilter($resend_id);
        //$this->session->set_userdata($_POST);
        $this->session->set_userdata('ptrFilter_' . $resend_id, 1);

        if ($this->input->post('ptFilterUser')) {
            $this->session->set_userdata('ptrFilterUser_' . $resend_id, $this->input->post('ptFilterUser'));
        } else {
            $this->session->set_userdata('ptrFilterUser_' . $resend_id, '');
        }

        if ($this->input->post('ptFilterBranch')) {
            $this->session->set_userdata('ptrFilterBranch_' . $resend_id, $this->input->post('ptFilterBranch'));
        } else {
            $this->session->set_userdata('ptrFilterBranch_' . $resend_id, '');
        }

        if ($this->input->post('ptFilterRating')) {
            $this->session->set_userdata('ptrFilterRating_' . $resend_id, $this->input->post('ptFilterRating'));
        } else {
            $this->session->set_userdata('ptrFilterRating_' . $resend_id, '');
        }

        if ($this->input->post('ptFilterSource')) {
            $this->session->set_userdata('ptrFilterSource_' . $resend_id, $this->input->post('ptFilterSource'));
        } else {
            $this->session->set_userdata('ptrFilterSource_' . $resend_id, '');
        }

        // Handle 'All' values
        if ($this->session->userdata('ptrFilterUser_' . $resend_id) == 'All') {
            $this->session->set_userdata('ptrFilterUser_' . $resend_id, '');
        }

        if ($this->session->userdata('ptrFilterBranch_' . $resend_id) == 'All') {
            $this->session->set_userdata('ptrFilterBranch_' . $resend_id, '');
        }

        if ($this->session->userdata('ptrFilterStatus_' . $resend_id) == 'All') {
            $this->session->set_userdata('ptrFilterStatus_' . $resend_id, '');
        }

        if ($this->session->userdata('ptrFilterRating_' . $resend_id) == 'All') {
            $this->session->set_userdata('ptrFilterRating_' . $resend_id, '');
        }

        if ($this->session->userdata('ptrFilterSource_' . $resend_id) == 'All') {
            $this->session->set_userdata('ptrFilterSource_' . $resend_id, '');
        }

        // We may have removed filters above, so if there are no filter, remove ptFilter flag
        if (
            !$this->session->userdata('ptrFilterUser_' . $resend_id) &&
            !$this->session->userdata('ptrFilterBranch_' . $resend_id) &&
            !$this->session->userdata('ptrFilterStatus_' . $resend_id) &&
            !$this->session->userdata('ptrFilterRating_' . $resend_id) &&
            !$this->session->userdata('ptrFilterSource_' . $resend_id)
        ) {
            $this->session->set_userdata('ptrFilter_' . $resend_id, '');
        }
    }

    public function resetProspectResendFilter($resend_id)
    {
        $this->session->set_userdata(array(
            'ptrFilter_' . $resend_id => '',
            'ptrFilterUser_' . $resend_id => '',
            'ptrFilterBranch_' . $resend_id => '',
            'ptrFilterStatus_' . $resend_id => '',
            'ptrFilterRating_' . $resend_id => '',
            'ptrFilterSource_' . $resend_id => '',
        ));
    }

    public function setProposalFilter()
    {
        $this->resetProposalsFilter();
        $this->session->set_userdata($_POST);
        $this->session->set_userdata('pFilter', 1);

        // Do some date stuff
        if ($this->input->post('pCreatedFrom')) {
            $this->session->set_userdata('pCreatedFrom', strtotime($this->input->post('pCreatedFrom')));
        } else {
            $this->session->set_userdata('pCreatedFrom', '');
        }

        if ($this->input->post('pCreatedTo')) {
            $this->session->set_userdata('pCreatedTo', strtotime('11:59:59 pm ' . $this->input->post('pCreatedTo')));
        } else {
            $this->session->set_userdata('pCreatedTo', '');
        }

        if ($this->input->post('pNewerThen')) {
            $this->session->set_userdata('pNewerThen', strtotime($this->input->post('pNewerThen')));
        } else {
            $this->session->set_userdata('pNewerThen', '');
        }

        if ($this->input->post('pOlderThen')) {
            $this->session->set_userdata('pOlderThen', strtotime('11:59:59 pm ' . $this->input->post('pOlderThen')));
        } else {
            $this->session->set_userdata('pOlderThen', '');
        }

        if ($this->input->post('pActivityFrom')) {
            $this->session->set_userdata('pActivityFrom', strtotime($this->input->post('pActivityFrom')));
        } else {
            $this->session->set_userdata('pActivityFrom', '');
        }

        if ($this->input->post('pActivityTo')) {
            $this->session->set_userdata('pActivityTo', strtotime('11:59:59 pm ' . $this->input->post('pActivityTo')));
        } else {
            $this->session->set_userdata('pActivityTo', '');
        }

        if ($this->input->post('pWonFrom')) {
            $this->session->set_userdata('pWonFrom', strtotime($this->input->post('pWonFrom')));
        } else {
            $this->session->set_userdata('pWonFrom', '');
        }

        if ($this->input->post('pWonTo')) {
            $this->session->set_userdata('pWonTo', strtotime('11:59:59 pm ' . $this->input->post('pWonTo')));
        } else {
            $this->session->set_userdata('pWonTo', '');
        }
    }

    public function setProposalFilterStatus()
    {

        $this->resetProposalFilterStatus();
        if ($this->input->post('pFilterStatus')) {
            $this->session->set_userdata('pstsFilterStatus', $this->input->post('pFilterStatus'));
        } else {
            $this->session->set_userdata('pstsFilterStatus', '');
        }
        if ($this->input->post('pFilterUser')) {
            $this->session->set_userdata('pstsFilterUser', $this->input->post('pFilterUser'));
        } else {
            $this->session->set_userdata('pstsFilterUser', '');
        }
        if ($this->input->post('pFilterBranch')) {
            $this->session->set_userdata('pstsFilterBranch', $this->input->post('pFilterBranch'));
        } else {
            $this->session->set_userdata('pstsFilterBranch', '');
        }

        if ($this->input->post('pFilterMinBid')) {
            $this->session->set_userdata('pstsFilterMinBid', $this->input->post('pFilterMinBid'));
        } else {
            $this->session->set_userdata('pstsFilterMinBid', '');
        }

        if ($this->input->post('pFilterMaxBid')) {
            $this->session->set_userdata('pstsFilterMaxBid', $this->input->post('pFilterMaxBid'));
        } else {
            $this->session->set_userdata('pstsFilterMaxBid', '');
        }


        $this->session->set_userdata('pstsFilter', 1);

        // Do some date stuff
        if ($this->input->post('pCreatedFrom')) {
            $this->session->set_userdata('pstsCreatedFrom', strtotime($this->input->post('pCreatedFrom')));
        } else {
            $this->session->set_userdata('pstsCreatedFrom', '');
        }

        if ($this->input->post('pCreatedTo')) {
            $this->session->set_userdata('pstsCreatedTo', strtotime('11:59:59 pm ' . $this->input->post('pCreatedTo')));
        } else {
            $this->session->set_userdata('pstsCreatedTo', '');
        }

        if ($this->input->post('pActivityFrom')) {
            $this->session->set_userdata('pstsActivityFrom', strtotime($this->input->post('pActivityFrom')));
        } else {
            $this->session->set_userdata('pstsActivityFrom', '');
        }

        if ($this->input->post('pActivityTo')) {
            $this->session->set_userdata('pstsActivityTo', strtotime('11:59:59 pm ' . $this->input->post('pActivityTo')));
        } else {
            $this->session->set_userdata('pstsActivityTo', '');
        }

        if ($this->input->post('pWonFrom')) {
            $this->session->set_userdata('pstsWonFrom', strtotime($this->input->post('pWonFrom')));
        } else {
            $this->session->set_userdata('pstsWonFrom', '');
        }

        if ($this->input->post('pWonTo')) {
            $this->session->set_userdata('pstsWonTo', strtotime('11:59:59 pm ' . $this->input->post('pWonTo')));
        } else {
            $this->session->set_userdata('pstsWonTo', '');
        }

        if ($this->input->post('pFilterBusinessType')) {
            $this->session->set_userdata('pstsFilterBusinessType', $this->input->post('pFilterBusinessType'));
        } else {
            $this->session->set_userdata('pstsFilterBusinessType', '');
        }
        if ($this->input->post('pFilterClientAccount')) {
            $this->session->set_userdata('pstsFilterClientAccount', $this->input->post('pstsFilterClientAccount'));
        } else {
            $this->session->set_userdata('pstsFilterClientAccount', '');
        }


        if ($this->input->post('pResendInclude') != $this->input->post('pResendExclude')) {
            if ($this->input->post('pResendInclude') == 1) {
                $this->session->set_userdata('pstsResendInclude', 1);
                $this->session->set_userdata('pstsResendExclude', 2);
            } else {
                $this->session->set_userdata('pstsResendInclude', 2);
                $this->session->set_userdata('pstsResendExclude', 1);
            }

        } else {
            $this->session->set_userdata('pstsResendInclude', '');
            $this->session->set_userdata('pstsResendExclude', '');
        }

        if ($this->input->post('pSigned') != $this->input->post('pUnsigned')) {
            if ($this->input->post('pSigned') == 1) {
                $this->session->set_userdata('pstsSigned', 1);
                $this->session->set_userdata('pstsUnsigned', 2);
            } else {
                $this->session->set_userdata('pstsSigned', 2);
                $this->session->set_userdata('pstsUnsigned', 1);
            }

        } else {
            $this->session->set_userdata('pstsSigned', '');
            $this->session->set_userdata('pstsUnsigned', '');
        }

        if ($this->input->post('pCompanySigned') != $this->input->post('pCompanyUnsigned')) {
            if ($this->input->post('pCompanySigned') == 1) {
                $this->session->set_userdata('pstsCompanySigned', 1);
                $this->session->set_userdata('pstsCompanyUnsigned', 2);
            } else {
                $this->session->set_userdata('pstsCompanySigned', 2);
                $this->session->set_userdata('pstsCompanyUnsigned', 1);
            }

        } else {
            $this->session->set_userdata('pstsCompanySigned', '');
            $this->session->set_userdata('pstsCompanyUnsigned', '');
        }

        if ($this->input->post('pFilterQueue')) {
            $this->session->set_userdata('pstsFilterQueue', $this->input->post('pFilterQueue'));
        } else {
            $this->session->set_userdata('pstsFilterQueue', '');
        }

    }

    public function resetProposalFilterStatus()
    {
        $this->session->set_userdata(array(
            'pstsFilter' => '',
            'pstsFilterUser' => '',
            'pstsFilterBranch' => '',
            'pstsFilterStatus' => '',
            'pstsFilterEstimateStatus' => '',
            'pstsFilterJobCostStatus' => '',
            'pstsFilterService' => '',
            'pstsFilterFrom' => '',
            'pstsFilterTo' => '',
            'pstsFilterQueue' => '',
            'pstsFilterEmailStatus' => '',
            'pstsFilterClientAccount' => '',
            'pstsFilterBusinessType' => '',
            'pstsResendInclude' => '',
            'pstsResendExclude' => '',
            'pstsSigned' => '',
            'pstsUnsigned' => '',
            'pstsCompanySigned' => '',
            'pstsCompanyUnsigned' => '',
        ));
    }

    public function setProposalFilterStats()
    {

        $this->resetProposalFilterStats();
        if ($this->input->post('pFilterStatus')) {
            $this->session->set_userdata('psttFilterStatus', $this->input->post('pFilterStatus'));
        } else {
            $this->session->set_userdata('psttFilterStatus', '');
        }
        if ($this->input->post('pFilterUser')) {
            $this->session->set_userdata('psttFilterUser', $this->input->post('pFilterUser'));
        } else {
            $this->session->set_userdata('psttFilterUser', '');
        }
        if ($this->input->post('pFilterBranch')) {
            $this->session->set_userdata('psttFilterBranch', $this->input->post('pFilterBranch'));
        } else {
            $this->session->set_userdata('psttFilterBranch', '');
        }

        if ($this->input->post('pFilterMinBid')) {
            $this->session->set_userdata('psttFilterMinBid', $this->input->post('pFilterMinBid'));
        } else {
            $this->session->set_userdata('psttFilterMinBid', '');
        }

        if ($this->input->post('pFilterMaxBid')) {
            $this->session->set_userdata('psttFilterMaxBid', $this->input->post('pFilterMaxBid'));
        } else {
            $this->session->set_userdata('psttFilterMaxBid', '');
        }


        $this->session->set_userdata('psttFilter', 1);

        // Do some date stuff
        if ($this->input->post('pCreatedFrom')) {
            $this->session->set_userdata('psttCreatedFrom', strtotime($this->input->post('pCreatedFrom')));
        } else {
            $this->session->set_userdata('psttCreatedFrom', '');
        }

        if ($this->input->post('pCreatedTo')) {
            $this->session->set_userdata('psttCreatedTo', strtotime('11:59:59 pm ' . $this->input->post('pCreatedTo')));
        } else {
            $this->session->set_userdata('psttCreatedTo', '');
        }

        if ($this->input->post('pActivityFrom')) {
            $this->session->set_userdata('psttActivityFrom', strtotime($this->input->post('pActivityFrom')));
        } else {
            $this->session->set_userdata('psttActivityFrom', '');
        }

        if ($this->input->post('pActivityTo')) {
            $this->session->set_userdata('psttActivityTo', strtotime('11:59:59 pm ' . $this->input->post('pActivityTo')));
        } else {
            $this->session->set_userdata('psttActivityTo', '');
        }

        if ($this->input->post('pWonFrom')) {
            $this->session->set_userdata('psttWonFrom', strtotime($this->input->post('pWonFrom')));
        } else {
            $this->session->set_userdata('psttWonFrom', '');
        }

        if ($this->input->post('pWonTo')) {
            $this->session->set_userdata('psttWonTo', strtotime('11:59:59 pm ' . $this->input->post('pWonTo')));
        } else {
            $this->session->set_userdata('psttWonTo', '');
        }

        if ($this->input->post('pFilterBusinessType')) {
            $this->session->set_userdata('psttFilterBusinessType', $this->input->post('pFilterBusinessType'));
        } else {
            $this->session->set_userdata('psttFilterBusinessType', '');
        }

        if ($this->input->post('pResendInclude') != $this->input->post('pResendExclude')) {
            if ($this->input->post('pResendInclude') == 1) {
                $this->session->set_userdata('psttResendInclude', 1);
                $this->session->set_userdata('psttResendExclude', 2);
            } else {
                $this->session->set_userdata('psttResendInclude', 2);
                $this->session->set_userdata('psttResendExclude', 1);
            }

        } else {
            $this->session->set_userdata('psttResendInclude', '');
            $this->session->set_userdata('psttResendExclude', '');
        }

        if ($this->input->post('pSigned') != $this->input->post('pUnsigned')) {
            if ($this->input->post('pSigned') == 1) {
                $this->session->set_userdata('psttSigned', 1);
                $this->session->set_userdata('psttUnsigned', 2);
            } else {
                $this->session->set_userdata('psttSigned', 2);
                $this->session->set_userdata('psttUnsigned', 1);
            }

        } else {
            $this->session->set_userdata('psttSigned', '');
            $this->session->set_userdata('psttUnsigned', '');
        }

        if ($this->input->post('pCompanySigned') != $this->input->post('pCompanyUnsigned')) {
            if ($this->input->post('pCompanySigned') == 1) {
                $this->session->set_userdata('psttCompanySigned', 1);
                $this->session->set_userdata('psttCompanyUnsigned', 2);
            } else {
                $this->session->set_userdata('psttCompanySigned', 2);
                $this->session->set_userdata('psttCompanyUnsigned', 1);
            }

        } else {
            $this->session->set_userdata('psttCompanySigned', '');
            $this->session->set_userdata('psttCompanyUnsigned', '');
        }

        if ($this->input->post('pFilterQueue')) {
            $this->session->set_userdata('psttFilterQueue', $this->input->post('pFilterQueue'));
        } else {
            $this->session->set_userdata('psttFilterQueue', '');
        }
        

    }

    public function resetProposalFilterStats()
    {
        $this->session->set_userdata(array(
            'psttFilter' => '',
            'psttFilterUser' => '',
            'psttFilterBranch' => '',
            'psttFilterStatus' => '',
            'psttFilterEstimateStatus' => '',
            'psttFilterJobCostStatus' => '',
            'psttFilterService' => '',
            'psttFilterFrom' => '',
            'psttFilterTo' => '',
            'psttFilterQueue' => '',
            'psttFilterEmailStatus' => '',
            'psttFilterClientAccount' => '',
            'psttFilterBusinessType' => '',
            'psttResendInclude' => '',
            'psttResendExclude' => '',
            'psttSigned' => '',
            'psttUnsigned' => '',
            'psttCompanySigned' => '',
            'psttCompanyUnsigned' => '',
        ));


    }


    public function setProposalFilterAccountStats()
    {

        $this->resetProposalFilterAccountStats();
        if ($this->input->post('pFilterStatus')) {
            $this->session->set_userdata('pastFilterStatus', $this->input->post('pFilterStatus'));
        } else {
            $this->session->set_userdata('pastFilterStatus', '');
        }
        if ($this->input->post('pFilterUser')) {
            $this->session->set_userdata('pastFilterUser', $this->input->post('pFilterUser'));
        } else {
            $this->session->set_userdata('pastFilterUser', '');
        }
        if ($this->input->post('pFilterBranch')) {
            $this->session->set_userdata('pastFilterBranch', $this->input->post('pFilterBranch'));
        } else {
            $this->session->set_userdata('pastFilterBranch', '');
        }

        if ($this->input->post('pFilterMinBid')) {
            $this->session->set_userdata('pastFilterMinBid', $this->input->post('pFilterMinBid'));
        } else {
            $this->session->set_userdata('pastFilterMinBid', '');
        }

        if ($this->input->post('pFilterMaxBid')) {
            $this->session->set_userdata('pastFilterMaxBid', $this->input->post('pFilterMaxBid'));
        } else {
            $this->session->set_userdata('pastFilterMaxBid', '');
        }


        $this->session->set_userdata('pastFilter', 1);

        // Do some date stuff
        if ($this->input->post('pCreatedFrom')) {
            $this->session->set_userdata('pastCreatedFrom', strtotime($this->input->post('pCreatedFrom')));
        } else {
            $this->session->set_userdata('pastCreatedFrom', '');
        }

        if ($this->input->post('pCreatedTo')) {
            $this->session->set_userdata('pastCreatedTo', strtotime('11:59:59 pm ' . $this->input->post('pCreatedTo')));
        } else {
            $this->session->set_userdata('pastCreatedTo', '');
        }

        if ($this->input->post('pActivityFrom')) {
            $this->session->set_userdata('pastActivityFrom', strtotime($this->input->post('pActivityFrom')));
        } else {
            $this->session->set_userdata('pastActivityFrom', '');
        }

        if ($this->input->post('pActivityTo')) {
            $this->session->set_userdata('pastActivityTo', strtotime('11:59:59 pm ' . $this->input->post('pActivityTo')));
        } else {
            $this->session->set_userdata('pastActivityTo', '');
        }

        if ($this->input->post('pWonFrom')) {
            $this->session->set_userdata('pastWonFrom', strtotime($this->input->post('pWonFrom')));
        } else {
            $this->session->set_userdata('pastWonFrom', '');
        }

        if ($this->input->post('pWonTo')) {
            $this->session->set_userdata('pastWonTo', strtotime('11:59:59 pm ' . $this->input->post('pWonTo')));
        } else {
            $this->session->set_userdata('pastWonTo', '');
        }

        if ($this->input->post('pFilterBusinessType')) {
            $this->session->set_userdata('pastFilterBusinessType', $this->input->post('pFilterBusinessType'));
        } else {
            $this->session->set_userdata('pastFilterBusinessType', '');
        }

        if ($this->input->post('pResendInclude') != $this->input->post('pResendExclude')) {
            if ($this->input->post('pResendInclude') == 1) {
                $this->session->set_userdata('pastResendInclude', 1);
                $this->session->set_userdata('pastResendExclude', 2);
            } else {
                $this->session->set_userdata('pastResendInclude', 2);
                $this->session->set_userdata('pastResendExclude', 1);
            }

        } else {
            $this->session->set_userdata('pastResendInclude', '');
            $this->session->set_userdata('pastResendExclude', '');
        }

        if ($this->input->post('pSigned') != $this->input->post('pUnsigned')) {
            if ($this->input->post('pSigned') == 1) {
                $this->session->set_userdata('pastSigned', 1);
                $this->session->set_userdata('pastUnsigned', 2);
            } else {
                $this->session->set_userdata('pastSigned', 2);
                $this->session->set_userdata('pastUnsigned', 1);
            }

        } else {
            $this->session->set_userdata('pastSigned', '');
            $this->session->set_userdata('pastUnsigned', '');
        }

        if ($this->input->post('pCompanySigned') != $this->input->post('pCompanyUnsigned')) {
            if ($this->input->post('pCompanySigned') == 1) {
                $this->session->set_userdata('pastCompanySigned', 1);
                $this->session->set_userdata('pastCompanyUnsigned', 2);
            } else {
                $this->session->set_userdata('pastCompanySigned', 2);
                $this->session->set_userdata('pastCompanyUnsigned', 1);
            }

        } else {
            $this->session->set_userdata('pastCompanySigned', '');
            $this->session->set_userdata('pastCompanyUnsigned', '');
        }

        if ($this->input->post('pFilterQueue')) {
            $this->session->set_userdata('pastFilterQueue', $this->input->post('pFilterQueue'));
        } else {
            $this->session->set_userdata('pastFilterQueue', '');
        }
    }

    public function resetProposalFilterAccountStats()
    {
        $this->session->set_userdata(array(
            'pastFilter' => '',
            'pastFilterUser' => '',
            'pastFilterBranch' => '',
            'pastFilterStatus' => '',
            'pastFilterEstimateStatus' => '',
            'pastFilterJobCostStatus' => '',
            'pastFilterService' => '',
            'pastFilterFrom' => '',
            'pastFilterTo' => '',
            'pastFilterQueue' => '',
            'pastFilterEmailStatus' => '',
            'pastFilterClientAccount' => '',
            'pastFilterBusinessType' => '',
            'pastResendInclude' => '',
            'pastResendExclude' => '',
            'pastSigned' => '',
            'pastUnsigned' => '',
            'pastCompanySigned' => '',
            'pastCompanyUnsigned' => '',
        ));
    }


    public function setProposalResendFilter($resend_id)
    {

        $this->resetProposalsResendFilter($resend_id);
        if ($this->input->post('pFilterStatus')) {
            $this->session->set_userdata('prFilterStatus_' . $resend_id, $this->input->post('pFilterStatus'));
        } else {
            $this->session->set_userdata('prFilterStatus_' . $resend_id, '');
        }
        if ($this->input->post('pFilterBranch')) {
            $this->session->set_userdata('prFilterBranch_' . $resend_id, $this->input->post('pFilterBranch'));
        } else {
            $this->session->set_userdata('prFilterBranch_' . $resend_id, '');
        }

        if ($this->input->post('pFilterMinBid')) {
            $this->session->set_userdata('prFilterMinBid_' . $resend_id, $this->input->post('pFilterMinBid'));
        } else {
            $this->session->set_userdata('prFilterMinBid_' . $resend_id, '');
        }

        if ($this->input->post('pFilterMaxBid')) {
            $this->session->set_userdata('prFilterMaxBid_' . $resend_id, $this->input->post('pFilterMaxBid'));
        } else {
            $this->session->set_userdata('prFilterMaxBid_' . $resend_id, '');
        }


        $this->session->set_userdata('prFilter_' . $resend_id, 1);

        // Do some date stuff
        if ($this->input->post('pCreatedFrom')) {
            $this->session->set_userdata('prCreatedFrom_' . $resend_id, strtotime($this->input->post('pCreatedFrom')));
        } else {
            $this->session->set_userdata('prCreatedFrom_' . $resend_id, '');
        }

        if ($this->input->post('pCreatedTo')) {
            $this->session->set_userdata('prCreatedTo_' . $resend_id, strtotime('11:59:59 pm ' . $this->input->post('pCreatedTo')));
        } else {
            $this->session->set_userdata('prCreatedTo_' . $resend_id, '');
        }

        if ($this->input->post('pActivityFrom')) {
            $this->session->set_userdata('prActivityFrom_' . $resend_id, strtotime($this->input->post('pActivityFrom')));
        } else {
            $this->session->set_userdata('prActivityFrom_' . $resend_id, '');
        }

        if ($this->input->post('pActivityTo')) {
            $this->session->set_userdata('prActivityTo_' . $resend_id, strtotime('11:59:59 pm ' . $this->input->post('pActivityTo')));
        } else {
            $this->session->set_userdata('prActivityTo_' . $resend_id, '');
        }

        if ($this->input->post('pWonFrom')) {
            $this->session->set_userdata('prWonFrom_' . $resend_id, strtotime($this->input->post('pWonFrom')));
        } else {
            $this->session->set_userdata('prWonFrom_' . $resend_id, '');
        }

        if ($this->input->post('pWonTo')) {
            $this->session->set_userdata('prWonTo_' . $resend_id, strtotime('11:59:59 pm ' . $this->input->post('pWonTo')));
        } else {
            $this->session->set_userdata('prWonTo_' . $resend_id, '');
        }


        if ($this->input->post('pFilterBusinessType')) {
            $this->session->set_userdata('prFilterBusinessType_' . $resend_id, $this->input->post('pFilterBusinessType'));
        } else {
            $this->session->set_userdata('prFilterBusinessType_' . $resend_id, '');
        }

        if ($this->input->post('pResendFromStatusId')) {
            $this->session->set_userdata('prFromFilterStatus_' . $resend_id, $this->input->post('pResendFromStatusId'));
        } else {
            $this->session->set_userdata('prFromFilterStatus_' . $resend_id, '');
        }

        if ($this->input->post('pResendNotesAdded')) {
            $this->session->set_userdata('prFilterNotesAdded_' . $resend_id, $this->input->post('pResendNotesAdded'));
        } else {
            $this->session->set_userdata('prFilterNotesAdded_' . $resend_id, '');
        }


        if ($this->input->post('pResendInclude') != $this->input->post('pResendExclude')) {
            if ($this->input->post('pResendInclude') == 1) {
                $this->session->set_userdata('prResendInclude_' . $resend_id, 1);
                $this->session->set_userdata('prResendExclude_' . $resend_id, 2);
            } else {
                $this->session->set_userdata('prResendInclude_' . $resend_id, 2);
                $this->session->set_userdata('prResendExclude_' . $resend_id, 1);
            }

        } else {
            $this->session->set_userdata('prResendInclude_' . $resend_id, '');
            $this->session->set_userdata('prResendExclude_' . $resend_id, '');
        }

        if ($this->input->post('pSigned') != $this->input->post('pUnsigned')) {
            if ($this->input->post('pSigned') == 1) {
                $this->session->set_userdata('prSigned_' . $resend_id, 1);
                $this->session->set_userdata('prUnsigned_' . $resend_id, 2);
            } else {
                $this->session->set_userdata('prSigned_' . $resend_id, 2);
                $this->session->set_userdata('prUnsigned_' . $resend_id, 1);
            }

        } else {
            $this->session->set_userdata('prSigned_' . $resend_id, '');
            $this->session->set_userdata('prUnsigned_' . $resend_id, '');
        }

        if ($this->input->post('pCompanySigned') != $this->input->post('pCompanyUnsigned')) {
            if ($this->input->post('pCompanySigned') == 1) {
                $this->session->set_userdata('prCompanySigned_' . $resend_id, 1);
                $this->session->set_userdata('prCompanyUnsigned_' . $resend_id, 2);
            } else {
                $this->session->set_userdata('prCompanySigned_' . $resend_id, 2);
                $this->session->set_userdata('prCompanyUnsigned_' . $resend_id, 1);
            }

        } else {
            $this->session->set_userdata('prCompanySigned_' . $resend_id, '');
            $this->session->set_userdata('prCompanyUnsigned_' . $resend_id, '');
        }
    }

    public function resetProposalsResendFilter($resend_id)
    {
        $this->session->set_userdata(array(
            'prFilter_' . $resend_id => '',
            'prFilterUser_' . $resend_id => '',
            'prFilterBranch_' . $resend_id => '',
            'prFilterStatus_' . $resend_id => '',
            'prFilterEstimateStatus_' . $resend_id => '',
            'prFilterJobCostStatus_' . $resend_id => '',
            'prFilterService_' . $resend_id => '',
            'prFilterFrom_' . $resend_id => '',
            'prFilterTo_' . $resend_id => '',
            'prFilterQueue_' . $resend_id => '',
            'prFilterEmailStatus_' . $resend_id => '',
            'prFilterClientAccount_' . $resend_id => '',
            'prFilterBusinessType_' . $resend_id => '',
            'prFromFilterStatus_' . $resend_id => '',
            'prFilterNotesAdded_' . $resend_id => '',
            'prResendInclude_' . $resend_id => '',
            'prResendExclude_' . $resend_id => '',
            'prSigned_' . $resend_id => '',
            'prUnsigned_' . $resend_id => '',
            'prCompanySigned_' . $resend_id => '',
            'prCompanyUnsigned_' . $resend_id => '',

        ));
    }

    public function setJCFilter()
    {
        $this->resetJCFilter();

        // Do some date stuff
        if ($this->input->post('jcCreatedFrom')) {
            $this->session->set_userdata('jcCreatedFrom', strtotime($this->input->post('jcCreatedFrom')));
        } else {
            $this->session->set_userdata('jcCreatedFrom', '');
        }

        if ($this->input->post('jcCreatedTo')) {
            $this->session->set_userdata('jcCreatedTo', strtotime('11:59:59 pm ' . $this->input->post('jcCreatedTo')));
        } else {
            $this->session->set_userdata('jcCreatedTo', '');
        }

    }

    public function resetJCFilter()
    {
        $this->session->set_userdata(array(
            'jcCreatedFrom' => '',
            'jcCreatedTo' => '',

        ));
    }

    public function resetProposalsFilter()
    {
        $this->session->set_userdata(array(
            'pFilter' => '',
            'pFilterUser' => '',
            'pFilterBranch' => '',
            'pFilterStatus' => '',
            'pFilterEstimateStatus' => '',
            'pFilterJobCostStatus' => '',
            'pFilterService' => '',
            'pFilterFrom' => '',
            'pFilterTo' => '',
            'pFilterQueue' => '',
            'pFilterEmailStatus' => '',
            'pFilterClientAccount' => '',
            'pFilterBusinessType' => '',
            'pResendInclude' => '',
            'pResendExclude' => '',
        ));
    }

    public function setProposalStatusFilter()
    {
        $this->session->set_userdata($_POST);
        $this->session->set_userdata('pStatusFilter', 1);

        $statusId = $this->session->userdata('pFilterStatus');
        $status = $this->em->find('\models\Status', $statusId);

        if ($status) {
            $this->session->set_userdata('pFilterStatusName', $status->getText());
        }
    }

    public function setProposalStatusDateFilter()
    {

        $this->load->library('JsonResponse');

        // Check they are still logged in
        if (!$this->session->userdata('logged')) {
            $this->jsonresponse->loginRequired = 1;
            $this->jsonresponse->send();
            return;
        }

        $range = $this->input->post('range');
        $finish = false;
        $custom = false;
        $customFrom = $this->input->post('customFrom');
        $customTo = $this->input->post('customTo');

        if ($customFrom && $customTo) {
            $custom = array();
            $custom['from'] = strtotime('midnight ' . $customFrom);
            $custom['to'] = strtotime("11:59:59pm " . $customTo);
        }

        $dt = new Carbon();

        // Calculate the start time based on the time period
        switch ($range) {

            case 'day':
                $start = $dt->startOfDay()->timestamp;
                break;

            case 'week':
                $start = $dt->startOfWeek()->timestamp;
                break;

            case 'month':
                $start = $dt->startOfMonth()->timestamp;
                break;

            case 'quarter':
                $start = $dt->startOfQuarter()->timestamp;
                break;

            case 'year':
                $start = $dt->startOfYear()->timestamp;
                break;

            case 'prevYear':
                $start = $dt->subYear(1)->startOfYear()->timestamp;
                $finish = $dt->endOfYear()->timestamp;
                break;

            case 'custom':
                $start = $custom['from'];
                $finish = $custom['to'];
                break;
        }

        if (!$finish) {
            $finish = time();
        }

        // Convert
        $filterStart = date('m/d/Y', $start);
        $filterFinish = date('m/d/Y', $finish);

        $this->session->set_userdata('pStatusFilterFrom', $filterStart);
        $this->session->set_userdata('pStatusFilterTo', $filterFinish);
        $this->session->set_userdata('pStatusFilterChangeFrom', $filterStart);
        $this->session->set_userdata('pStatusFilterChangeTo', $filterFinish);
        $this->session->set_userdata('pStatsFilterFrom', $filterStart);
        $this->session->set_userdata('pStatsFilterTo', $filterFinish);

        $this->jsonresponse->startDate = $filterStart;
        $this->jsonresponse->finishDate = $filterFinish;
        $this->jsonresponse->success = 1;
        $this->jsonresponse->send();
    }
 
    public function resetProposalStatusFilter()
    {
        $this->session->set_userdata(array(
            'pStatusFilter' => '',
            //'pStatusFilterUser' => '',
            //'pStatusFilterBranch' => '',
            //'pStatusFilterStatus' => '',
            'pStatusFilterService' => '',
            //'pStatusFilterFrom' => '',
            //'pStatusFilterTo' => '',
            'pStatusFilterQueue' => '',
            //'pStatusFilterChangeFrom' => '',
            //'pStatusFilterChangeTo' => '',
        ));

    }

    public function groupStatusChange()
    {
        $this->load->library('JsonResponse');
        $response = new JsonResponse();
        $count = 0;

        if ($this->account()) {
            $ids = $this->input->post('ids');
            $status = $this->input->post('status');
            $winDate = Carbon::createFromFormat('m/d/Y', $this->input->post('statusWinDate'));
            $winTimestamp = $winDate->timestamp;

            $proposalStatus = $this->em->find('\models\Status', $status);
            /* @var $proposalStatus \models\Status */


            foreach ($ids as $id) {
                $proposal = $this->em->find('\models\Proposals', $id);
                /* @var $proposal \models\Proposals */
                $initialStatus = $proposal->getProposalStatus();

                $old_proposalStatus = $this->em->find('\models\Status', $initialStatus->getStatusId());
                $proposal->setProposalStatus($proposalStatus);


                //Event Log
                $this->getProposalEventRepository()->changeProposalStatus($proposal, $this->account(), $old_proposalStatus->getText(), $proposalStatus->getText());
                // Log each change
                $this->log_manager->add(\models\ActivityAction::GROUP_CHANGE_PROPOSAL_STATUS,
                    "[Group Action] - User changed proposal status From '" . $old_proposalStatus->getText() . "'  to '" . $proposalStatus->getText() . "'",
                    $proposal->getClient(),
                    $proposal,
                    $proposal->getClient()->getCompany(),
                    $this->account(),
                    $initialStatus->getStatusId(),
                    $proposalStatus->getStatusId()
                );

                // Do we need to change to sold
                if (!$proposal->isWon() && $proposalStatus->isSales()) {
                    $proposal->setWinDate($winTimestamp);

                    // Log each change
                    $this->log_manager->add(\models\ActivityAction::CHANGE_PROPOSAL_WIN_DATE,
                        "Win date set to " . $winDate->format('m/d/Y'),
                        $proposal->getClient(),
                        $proposal,
                        $proposal->getClient()->getCompany(),
                        $this->account()
                    );
                }

                // Do we need to change to unsold
                if ($proposal->isWon() && !$proposalStatus->isSales()) {
                    $proposal->setWinDate(null);

                    // Log each change
                    $this->log_manager->add(\models\ActivityAction::CHANGE_PROPOSAL_WIN_DATE,
                        "Removed win date",
                        $proposal->getClient(),
                        $proposal,
                        $proposal->getClient()->getCompany(),
                        $this->account()
                    );
                }

                $this->em->persist($proposal);

                $count++;
            }
            $this->em->flush();

            $response->success = true;
            $response->count = $count;

            $response->send();
        } else {
            $response->success = false;
            $response->count = $count;
            $response->send();
        }

    }

    public function groupProposalReassign()
    {
        $this->load->library('JsonResponse');

        $ids = $this->input->post('ids');
        $reassignId = $this->input->post('userId');

        $reassignAccount = $this->em->find('\models\Accounts', $reassignId);
        /* @var $reassignAccount \models\Accounts */

        $response = new JsonResponse();
        $count = 0;

        foreach ($ids as $id) {
            $proposal = $this->em->find('\models\Proposals', $id);
            /* @var $proposal \models\Proposals */
            $old_reassignAccount = $proposal->getOwner();
            $proposal->setOwner($reassignAccount);
            $this->em->persist($proposal);

            // Log each change
            $this->log_manager->add(\models\ActivityAction::PROPOSAL_REASSIGN,
                "[Group Action] - User changed proposal owner of " . $proposal->getProjectName() . " From " . $old_reassignAccount->getFullName() . "  to " . $reassignAccount->getFullName() . "",
                $proposal->getClient(),
                $proposal,
                $proposal->getClient()->getCompany(),
                $this->account()
            );

            $count++;
        }
        $this->em->flush();

        $response->success = true;
        $response->count = $count;

        $response->send();
    }

    public function groupProspectsChangeSource()
    {
        $ids = $this->input->post('ids');
        $sourceId = $this->input->post('newSource');

        $response = new JsonResponse();
        $count = 0;

        foreach ($ids as $id) {
            $prospect = $this->em->findProspect($id);

            $prospect->setProspectSourceId($sourceId);
            $this->em->persist($prospect);

            // Log each change
            $this->log_manager->add(\models\ActivityAction::PROSPECT_CHANGE_SOURCE,
                "[Group Action] - User changed prospect source of " . $prospect->getFullName(),
                null,
                null,
                null,
                $this->account()
            );

            $count++;
        }
        $this->em->flush();

        $response->success = true;
        $response->count = $count;

        $response->send();
    }


    public function groupProspectsChangeBusinessTypes()
    {
        $ids = $this->input->post('ids');
        $businessTypes = $this->input->post('businessTypes');

        $response = new JsonResponse();
        $count = 0;

        foreach ($ids as $id) {
            $prospect = $this->em->findProspect($id);

            if ($businessTypes) {
                $this->getCompanyRepository()->clearProspectAssignedBusinessTypes($this->account()->getCompany(), $prospect->getProspectId());
                foreach ($businessTypes as $business_type) {

                    $assignment = new models\BusinessTypeAssignment();
                    $assignment->setBusinessTypeId($business_type);
                    $assignment->setCompanyId($this->account()->getCompany()->getCompanyId());
                    $assignment->setProspectId($id);
                    $this->em->persist($assignment);
                }

                $this->em->flush();
            }
            // Log each change
            $this->log_manager->add(\models\ActivityAction::GROUP_CHANGE_PROPOSAL_BUSINESS_TYPE,
                "[Group Action] - User changed proposal Business Types of " . $prospect->getFullName(),
                null,
                null,
                null,
                $this->account()
            );

            $count++;
        }
        $this->em->flush();

        $response->success = true;
        $response->count = $count;

        $response->send();
    }

    public function groupLeadsChangeBusinessTypes()
    {
        $ids = $this->input->post('ids');
        $businessType = $this->input->post('businessTypes');

        $response = new JsonResponse();
        $count = 0;

        foreach ($ids as $id) {
            $lead = $this->em->findLead($id);

            if ($businessType) {
                $this->getCompanyRepository()->clearLeadAssignedBusinessTypes($this->account()->getCompany(), $lead->getLeadId());
                //foreach($businessTypes as $business_type){

                $assignment = new models\BusinessTypeAssignment();
                $assignment->setBusinessTypeId($businessType);
                $assignment->setCompanyId($this->account()->getCompany()->getCompanyId());
                $assignment->setLeadId($id);
                $this->em->persist($assignment);
                // }

                $this->em->flush();
            }
            // Log each change
            $this->log_manager->add(\models\ActivityAction::LEAD_CHANGE_BUSINESS_TYPE,
                "[Group Action] - User changed Business Types of Lead -'" . $lead->getFirstName() . ' ' . $lead->getLastName() . "' ",
                null,
                null,
                $lead->getCompany(),
                $this->account()
            );

            $count++;
        }
        $this->em->flush();

        $response->success = true;
        $response->count = $count;

        $response->send();
    }


    public function groupAccountsChangeBusinessTypes()
    {
        $ids = $this->input->post('ids');
        $businessTypes = $this->input->post('businessTypes');

        $response = new JsonResponse();
        $count = 0;

        foreach ($ids as $id) {

            $cAccount = $this->em->find('models\ClientCompany', $id);
            if ($businessTypes) {


                if ($this->input->post('apply_bt_on_contact') == '1') {
                    $clients = $this->getClientRepository()->getAccountClients($id);

                    foreach ($clients as $client) {
                        if (count($businessTypes) > 1) {
                            $this->getProposalRepository()->updateClientBusinessTypeOnProposal($client->clientId, $this->input->post('apply_bt_on_proposal'));
                        } else {
                            $this->getProposalRepository()->updateClientBusinessTypeOnProposal($client->clientId, $businessTypes[0]);
                        }

                        // if just add new ones
                        // foreach ($businessTypes as $business_type) {
                        //     $this->getClientRepository()->checkClientBusinessTypeAssignment($client->clientId,$business_type,$this->account()->getCompany()->getCompanyId());

                        // }
                        //if need to remove client business type
                        $this->getCompanyRepository()->checkclearClientAssignedBusinessTypes($this->account()->getCompany(), $client->clientId, $businessTypes);
                    }
                }
                $this->getCompanyRepository()->checkClearAccountAssignedBusinessTypes($this->account()->getCompany(), $id, $businessTypes);

            }
            // Log each change
            $this->log_manager->add(\models\ActivityAction::ACCOUNT_CHANGE_BUSINESS_TYPE,
                '[Group Action] User changed Business Types of Account - ' . $cAccount->getName());

            $count++;
        }
        $this->em->flush();

        $response->success = true;
        $response->count = $count;

        $response->send();
    }

    public function groupClientsChangeBusinessTypes()
    {
        $ids = $this->input->post('ids');
        $businessTypes = $this->input->post('businessTypes');

        $response = new JsonResponse();
        $count = 0;

        foreach ($ids as $id) {

            $client = $this->em->find('\models\Clients', $id);
            if ($businessTypes) {
                if ($this->input->post('apply_bt_on_contact') == '1') {

                    if (count($businessTypes) > 1) {
                        $this->getProposalRepository()->updateClientBusinessTypeOnProposal($client->getClientId(), $this->input->post('apply_bt_on_proposal'));
                    } else {
                        $this->getProposalRepository()->updateClientBusinessTypeOnProposal($client->getClientId(), $businessTypes[0]);
                    }

                }
                $this->getCompanyRepository()->checkClearClientAssignedBusinessTypes($this->account()->getCompany(), $client->getClientId(), $businessTypes);


            }
            // Log each change

            $this->log_manager->add(\models\ActivityAction::GROUP_ACCOUNT_CHANGE_BUSINESS_TYPE,
                "[Group Action] User changed Business Types of Account " . $client->getFullName(),
                $client);
            $count++;
        }
        $this->em->flush();

        $response->success = true;
        $response->count = $count;

        $response->send();
    }

    public function getImageNotes($id)
    {
        $image = $this->em->find('models\Proposals_images', $id);
        if ($image) {
            echo $image->getNotes();
        }
    }

    public function groupDelete()
    {
        $this->load->library('JsonResponse');
        $this->load->library('/helpers/ProposalHelper', array('account' => $this->account()));

        $ids = $this->input->post('ids');
        $deleteDuplicates = $this->input->post('deleteDuplicates');

        $response = new JsonResponse();
        $response->is_demo = false;
        $count = 0;
        $demo = 0;

        foreach ($ids as $id) {
            $proposal = $this->em->findProposal($id);
            /* @var $proposal \models\Proposals */
            if (!$proposal->getIsDemo()) {
                // Pass into the helper
                $this->proposalhelper->setProposal($proposal);

                // Delete if user has permission
                if ($this->account()->hasDeleteProposalPermission()) {
                    $this->proposalhelper->delete();
                } else {
                    // Otherwise request delete
                    $this->proposalhelper->requestDelete();
                }
                $count++;
            } else {
                $response->is_demo = true;
                $demo++;
            }
        }
        $this->em->flush();

        $this->getClientRepository()->updateProposalCount($proposal->getClient()->getClientId());

        $response->success = true;
        $response->count = $count;
        $response->demo = $demo;

        $response->send();
    }

    public function groupResend()
    {
        $this->load->library('JsonResponse');
        $response = new JsonResponse();
        // DOn't send if blank content, or the default content of the textarea
        if (!$this->input->post('body') || ($this->input->post('body') == 'This is the content')) {
            $response->success = 0;
            $response->error = 1;
            $response->count = 0;
            $response->send();
        } else {
            //build email data
            $emailData = [
                'subject' => $this->input->post('subject'),
                'body' => $this->input->post('body'),
                'fromName' => $this->input->post('fromName'),
                'fromEmail' => $this->input->post('fromEmail'),
                'replyTo' => $this->input->post('fromEmail'),
                'emailCC' => ($this->input->post('emailCC') == 'true'),
                'categories' => ['Group Resend'],
                'proposal_filter' => $this->input->post('proposal_filter')
            ];

            //send all proposals selected
            //$counts = $this->getProposalRepository()->groupSend($this->input->post('ids'), $emailData,$this->account(),'proposal_send',NULL,$this->input->post('resendId'),$this->input->post('new_resend_name'));
            $job_array = [
                'proposal_ids' => $this->input->post('ids'),
                'email_data' => $emailData,
                'account_id' => $this->account()->getAccountId(),
                'resend_id' => $this->input->post('resendId'),
                'resend_name' => $this->input->post('new_resend_name'),
                'exclude_override' => $this->input->post('exclude_override')
            ];


            $this->load->library('jobs');

            // Save the opaque image
            $this->jobs->create($_ENV['QUEUE_EMAIL'], 'jobs', 'group_proposal_email_send', $job_array, 'test job');

            $response->success = true;
            $response->count = 0;
            $response->unsent = 0;
            $response->already_sent = 0;
            $response->send();
        }
    }

    public function groupResendUnopened()
    {
        $this->load->library('JsonResponse');
        $response = new JsonResponse();

        $total_sent = 0;
        $total_unsent = 0;
        $total_already_sent = 0;
        $total_bounce_unsent = 0;
        $resendIds = $this->input->post('resendIds');

        $job_array = [
            'account_id' => $this->account()->getAccountId(),
            'resend_ids' => $resendIds
        ];

        $this->load->library('jobs');

        // Save the opaque image
        $this->jobs->create($_ENV['QUEUE_EMAIL'], 'jobs', 'group_unopend_proposal_email_send', $job_array, 'test job');

        $response->success = true;
        $response->count = $total_sent;
        $response->unsent = $total_unsent;
        $response->already_sent = $total_already_sent;
        $response->total_bounce_unsent = $total_bounce_unsent;
        $response->send();
    }

    public function groupResendUnopened2()
    {
        $this->load->library('jobs');
        $this->load->library('JsonResponse');
        $response = new JsonResponse();

        $emailData = [
            'subject' => $this->input->post('subject'),
            'body' => $this->input->post('body'),
            'fromName' => $this->input->post('fromName'),
            'fromEmail' => $this->input->post('fromEmail'),
            'new_resend_name' => $this->input->post('new_resend_name'),
            'replyTo' => $this->input->post('fromEmail'),
            'emailCC' => ($this->input->post('emailCC')) ? 0 : 1,
            'categories' => ['Group Resend'],
        ];

        $job_array = [
            'email_data' => $emailData,
            'account_id' => $this->account()->getAccountId(),
            'resend_id' => $this->input->post('resendId'),
            'unclicked' => $this->input->post('unclicked'),
            'exclude_override' => $this->input->post('exclude_override'),
        ];

        // Save the opaque image
        $this->jobs->create($_ENV['QUEUE_EMAIL'], 'jobs', 'unopend_proposal_email_send', $job_array, 'test job');

        $response->success = true;
        $response->count = 0;
        $response->unsent = 0;
        $response->already_sent = 0;
        $response->bouncedUnsentCount = 0;

        $response->send();

    }

    public function groupResendBouncedProposals()
    {
        $this->load->library('jobs');
        $this->load->library('JsonResponse');
        $response = new JsonResponse();


        $job_array = [

            'account_id' => $this->account()->getAccountId(),
            'resend_id' => $this->input->post('campaign_id'),
            'proposal_ids' => $this->input->post('proposal_ids'),

        ];

        // Save the opaque image
        $this->jobs->create($_ENV['QUEUE_EMAIL'], 'jobs', 'bounced_proposal_email_send', $job_array, 'test job');

        $response->success = true;


        $response->send();

    }


    public function clientResendUnopened()
    {
        $this->load->library('JsonResponse');
        $response = new JsonResponse();

        $emailData = [
            'subject' => $this->input->post('subject'),
            'body' => $this->input->post('body'),
            'fromName' => $this->input->post('fromName'),
            'fromEmail' => $this->input->post('fromEmail'),
            'new_resend_name' => $this->input->post('new_resend_name'),
            'replyTo' => $this->input->post('fromEmail'),
            'emailCC' => ($this->input->post('emailCC')) ? 0 : 1,
            'categories' => ['Group Resend'],
        ];

        $job_array = [
            'email_data' => $emailData,
            'account_id' => $this->account()->getAccountId(),
            'resend_id' => $this->input->post('resendId'),
            'unclicked' => $this->input->post('unclicked'),
            'exclude_override' => $this->input->post('exclude_override'),
        ];


        $this->load->library('jobs');

        // Save the opaque image
        $this->jobs->create($_ENV['QUEUE_EMAIL'], 'jobs', 'unopend_client_email_send', $job_array, 'test job');


        //send all proposals selected
        // $counts = $this->getClientRepository()->groupSendUnopened($emailData,
        //     $this->account(),'client_send',NULL,$this->input->post('resendId'));
        $response->success = true;
        $response->count = 0;
        $response->unsent = 0;
        $response->already_sent = 0;
        $response->bouncedUnsentCount = 0;
        $response->send();
        //}
    }

    public function clientGroupResendUnopened()
    {
        $this->load->library('JsonResponse');
        $response = new JsonResponse();

        $total_sent = 0;
        $total_unsent = 0;
        $total_already_sent = 0;
        $total_bounce_unsent = 0;

        $resendIds = $this->input->post('resendIds');
        $job_array = [
            'account_id' => $this->account()->getAccountId(),
            'resend_ids' => $resendIds

        ];


        $this->load->library('jobs');

        // Save the opaque image
        $this->jobs->create($_ENV['QUEUE_EMAIL'], 'jobs', 'group_unopend_client_email_send', $job_array, 'test job');


        // for($i=0;$i<count($resendIds);$i++){


        //     $pgs = $this->em->find('\models\ClientGroupResend', $resendIds[$i]);


        //     $emailData = [
        //         'subject' => $pgs->getSubject(),
        //         'body' => $pgs->getEmailContent(),
        //         'fromName' => $pgs->getCustomSenderName(),
        //         'fromEmail' => $pgs->getCustomSenderEmail(),
        //         'replyTo' => $pgs->getCustomSenderEmail(),
        //         'new_resend_name' => $pgs->getResendName(),
        //         'categories' => ['Group Resend'],
        //     ];


        //     //send all proposals selected
        //     $counts = $this->getClientRepository()->groupSendUnopened($emailData,
        //         $this->account(),'proposal_send',NULL,$resendIds[$i]);

        //         $total_sent = $total_sent + $counts['sent'];
        //         $total_unsent = $total_unsent +$counts['unsent'];
        //         $total_already_sent = $total_already_sent + $counts['already_sent'];
        //         $total_bounce_unsent = $total_bounce_unsent + $counts['bouncedUnsentCount'];
        // }
        $response->success = true;
        $response->count = $total_sent;
        $response->unsent = $total_unsent;
        $response->already_sent = $total_already_sent;
        $response->total_bounce_unsent = $total_bounce_unsent;
        $response->send();
        //}
    }


    public function leadGroupResendUnopened()
    {
        $this->load->library('JsonResponse');
        $response = new JsonResponse();

        $total_sent = 0;
        $total_unsent = 0;
        $total_already_sent = 0;
        $total_bounce_unsent = 0;


        $resendIds = $this->input->post('resendIds');
        $job_array = [
            'account_id' => $this->account()->getAccountId(),
            'resend_ids' => $resendIds

        ];


        $this->load->library('jobs');

        // Save the opaque image
        $this->jobs->create($_ENV['QUEUE_EMAIL'], 'jobs', 'group_unopend_prospect_email_send', $job_array, 'test job');


        // for($i=0;$i<count($resendIds);$i++){


        //     $pgs = $this->em->find('\models\LeadGroupResend', $resendIds[$i]);


        //     $emailData = [
        //         'subject' => $pgs->getSubject(),
        //         'body' => $pgs->getEmailContent(),
        //         'fromName' => $pgs->getCustomSenderName(),
        //         'fromEmail' => $pgs->getCustomSenderEmail(),
        //         'fromName' => $pgs->getCustomSenderName(),
        //         'fromEmail' => $pgs->getCustomSenderEmail(),
        //         'replyTo' => $pgs->getCustomSenderEmail(),
        //         'new_resend_name' => $pgs->getResendName(),
        //         'categories' => ['Group Resend'],
        //     ];

        //     //send all proposals selected
        //     $counts = $this->getProspectRepository()->groupSendUnopened($emailData,
        //         $this->account(),'Lead_send',NULL,$resendIds[$i]);

        //         $total_sent = $total_sent + $counts['sent'];
        //         $total_unsent = $total_unsent +$counts['unsent'];
        //         $total_already_sent = $total_already_sent + $counts['already_sent'];
        //         $total_bounce_unsent = $total_bounce_unsent + $counts['bouncedUnsentCount'];

        // }
        $response->success = true;
        $response->count = $total_sent;
        $response->unsent = $total_unsent;
        $response->already_sent = $total_already_sent;
        $response->total_bounce_unsent = $total_bounce_unsent;
        $response->send();
        //}
    }


    public function prospectGroupResendUnopened()
    {
        $this->load->library('JsonResponse');
        $response = new JsonResponse();

        $total_sent = 0;
        $total_unsent = 0;
        $total_already_sent = 0;
        $total_bounce_unsent = 0;


        $resendIds = $this->input->post('resendIds');
        $job_array = [
            'account_id' => $this->account()->getAccountId(),
            'resend_ids' => $resendIds

        ];


        $this->load->library('jobs');

        // Save the opaque image
        $this->jobs->create($_ENV['QUEUE_EMAIL'], 'jobs', 'group_unopend_prospect_email_send', $job_array, 'test job');


        $response->success = true;
        $response->count = $total_sent;
        $response->unsent = $total_unsent;
        $response->already_sent = $total_already_sent;
        $response->total_bounce_unsent = $total_bounce_unsent;
        $response->send();
        //}
    }

    public function leadResendUnopened()
    {
        $this->load->library('JsonResponse');
        $response = new JsonResponse();


        $resendId = $this->input->post('resendId');

        $emailData = [
            'subject' => $this->input->post('subject'),
            'body' => $this->input->post('body'),
            'fromName' => $this->input->post('fromName'),
            'fromEmail' => $this->input->post('fromEmail'),
            'new_resend_name' => $this->input->post('new_resend_name'),
            'replyTo' => $this->input->post('fromEmail'),
            'emailCC' => ($this->input->post('emailCC')) ? 0 : 1,
            'categories' => ['Group Resend'],
        ];


        $job_array = [
            'email_data' => $emailData,
            'account_id' => $this->account()->getAccountId(),
            'resend_id' => $this->input->post('resendId'),
            'unclicked' => $this->input->post('unclicked')
        ];


        $this->load->library('jobs');

        // Save the opaque image
        $this->jobs->create($_ENV['QUEUE_EMAIL'], 'jobs', 'unopend_lead_email_send', $job_array, 'test job');

        //send all proposals selected
        // $counts = $this->getLeadRepository()->groupSendUnopened($emailData,
        //     $this->account(),'client_send',NULL,$this->input->post('resendId'));
        $response->success = true;
        $response->count = 0;
        $response->unsent = 0;
        $response->already_sent = 0;
        $response->bouncedUnsentCount = 0;
        $response->send();
        //}
    }

    public function prospectResendUnopened()
    {
        $this->load->library('JsonResponse');
        $response = new JsonResponse();


        $resendId = $this->input->post('resendId');
        $pgs = $this->em->find('\models\ProspectGroupResend', $resendId);


        $emailData = [
            'subject' => $this->input->post('subject'),
            'body' => $this->input->post('body'),
            'fromName' => $this->input->post('fromName'),
            'fromEmail' => $this->input->post('fromEmail'),
            'new_resend_name' => $this->input->post('new_resend_name'),
            'replyTo' => $this->input->post('fromEmail'),
            'emailCC' => ($this->input->post('emailCC')) ? 0 : 1,
            'categories' => ['Group Resend'],
        ];

        $job_array = [
            'email_data' => $emailData,
            'account_id' => $this->account()->getAccountId(),
            'resend_id' => $this->input->post('resendId'),
            'unclicked' => $this->input->post('unclicked')

        ];


        $this->load->library('jobs');

        // Save the opaque image
        $this->jobs->create($_ENV['QUEUE_EMAIL'], 'jobs', 'unopend_prospect_email_send', $job_array, 'test job');

        //send all Prospect selected
        // $counts = $this->getProspectRepository()->groupSendUnopened($emailData,
        //     $this->account(),'prospect_send',NULL,$this->input->post('resendId'));
        $response->success = true;
        $response->count = 0;
        $response->unsent = 0;
        $response->already_sent = 0;
        $response->bouncedUnsentCount = 0;
        $response->send();
        //}
    }

    public function adminGroupResendUnopened()
    {
        $this->load->library('JsonResponse');
        $response = new JsonResponse();

        $total_sent = 0;
        $total_unsent = 0;
        $total_already_sent = 0;
        $total_bounce_unsent = 0;

        $resendIds = $this->input->post('resendIds');

        for ($i = 0; $i < count($resendIds); $i++) {


            $pgs = $this->em->find('\models\AdminGroupResend', $resendIds[$i]);


            $emailData = [
                'subject' => $pgs->getSubject(),
                'body' => $pgs->getEmailContent(),
                'fromName' => $pgs->getCustomSenderName(),
                'fromEmail' => $pgs->getCustomSenderEmail(),
                'replyTo' => $pgs->getCustomSenderEmail(),
                'new_resend_name' => $pgs->getResendName(),
                'categories' => ['Group Resend'],
            ];

            //send all proposals selected
            $counts = $this->getCompanyRepository()->groupSendUnopened($emailData,
                $this->account(), 'admin_send', NULL, $resendIds[$i]);

            $total_sent = $total_sent + $counts['sent'];
            $total_unsent = $total_unsent + $counts['unsent'];
            $total_already_sent = $total_already_sent + $counts['already_sent'];
            $total_bounce_unsent = $total_bounce_unsent + $counts['bouncedUnsentCount'];
        }
        $response->success = true;
        $response->count = $total_sent;
        $response->unsent = $total_unsent;
        $response->already_sent = $total_already_sent;
        $response->total_bounce_unsent = $total_bounce_unsent;
        $response->send();
        //}
    }


    public function update_proposal_resend_name()
    {
        $this->load->library('JsonResponse');
        $response = new JsonResponse();


        $resendId = $this->input->post('resendId');
        $pgs = $this->em->find('\models\ProposalGroupResend', $resendId);
        $pgs->setResendName($this->input->post('resendName'));
        $this->em->persist($pgs);
        $this->em->flush();

        $response->success = true;

        $response->send();
    }

    public function update_service_map_area_data()
    {
        $this->load->library('JsonResponse');
        $response = new JsonResponse();

        $serviceId = $this->input->post('serviceId');
        $ps = $this->em->find('\models\Proposal_services', $serviceId);
        $oldServiceMapArea = $ps->getMapAreaData();
        $ps->setMapAreaData($this->input->post('mapData'));
        $this->em->persist($ps);
        $this->em->flush();
        $proposal = $this->em->findProposal($ps->getProposal());
        if ($proposal) {
            if ($oldServiceMapArea != $ps->getMapAreaData()) {
                $logString = '';
                if ($oldServiceMapArea == '') {
                    $logString = '<br />' . '<strong>Map Area </strong>: Added <strong>' . $ps->getMapAreaData() . '</strong>';
                } else if ($ps->getMapAreaData() == '') {
                    $logString = '<br />' . '<strong>Map Area </strong>: Deleted <strong>' . $oldServiceMapArea . '</strong>';
                } else {
                    $logString = '<br />' . '<strong>Map Area </strong>: Changed From <strong>' . $oldServiceMapArea . '</strong> To <strong>' . $ps->getMapAreaData() . '</strong>';
                }
                $this->log_manager->add(\models\ActivityAction::EDIT_PROPOSAL_SERVICE,
                    'Edited Service "' . $ps->getServiceName() . '" ' . $logString, $proposal->getClient(), $proposal);
            }
            $proposal->setRebuildFlag(1);
            $this->em->persist($proposal);
            $this->em->flush();
        }
        $response->success = true;

        $response->send();
    }

    public function update_client_resend_name()
    {
        $this->load->library('JsonResponse');
        $response = new JsonResponse();


        $resendId = $this->input->post('resendId');
        $pgs = $this->em->find('\models\ClientGroupResend', $resendId);
        $pgs->setResendName($this->input->post('resendName'));
        $this->em->persist($pgs);
        $this->em->flush();

        $response->success = true;

        $response->send();
    }

    public function update_admin_resend_name()
    {
        $this->load->library('JsonResponse');
        $response = new JsonResponse();


        $resendId = $this->input->post('resendId');
        $pgs = $this->em->find('\models\AdminGroupResend', $resendId);
        $pgs->setResendName($this->input->post('resendName'));
        $this->em->persist($pgs);
        $this->em->flush();

        $response->success = true;

        $response->send();
    }

    public function groupStandalone()
    {

        $this->load->library('JsonResponse');

        $ids = $this->input->post('ids');

        $response = new JsonResponse();
        $count = 0;

        foreach ($ids as $id) {
            $proposal = $this->em->find('\models\Proposals', $id);
            /* @var $proposal \models\Proposals */

            if ($proposal->getDuplicateOf()) {
                $proposal->setDuplicateOf(null);
                $this->em->persist($proposal);

                // Log each one
                $this->log_manager->add(\models\ActivityAction::STANDALONE_PROPOSAL,
                    "[Group Action] - Proposal '" . $proposal->getProjectName() . "' set to standalone proposal from duplicate",
                    $proposal->getClient(),
                    $proposal,
                    null,
                    $this->account()
                );

                $proposal->setLastActivity();
                $this->em->persist($proposal);
                $this->em->flush();

                $count++;
            }
        }

        $this->em->flush();

        $response->success = true;
        $response->count = $count;

        $response->send();

    }

    public function groupStatusDateChange()
    {

        $this->load->library('JsonResponse');

        $ids = $this->input->post('ids');
        $givenDate = explode('/', $this->input->post('changeDate'));

        $changeDate = $start = mktime(12, 0, 0, $givenDate[0], $givenDate[1], $givenDate[2]);

        $response = new JsonResponse();
        $count = 0;

        foreach ($ids as $id) {
            // Load proposal
            $proposal = $this->em->find('\models\Proposals', $id);
            /* @var $proposal \models\Proposals */

            // Old date for logging
            $oldDate = date('m/d/Y', $proposal->getStatusChangeDate());
            // Update with new date
            $proposal->setStatusChangeDate($changeDate);
            // Save
            $this->em->persist($proposal);

            // Log each one
            $this->log_manager->add(\models\ActivityAction::GROUP_CHANGE_PROPOSAL_STATUS_DATE,
                "[Group Action] - Status Change Date updated from " . $oldDate . ' to ' . $this->input->post('changeDate'),
                $proposal->getClient(),
                $proposal,
                null,
                $this->account()
            );

            $count++;

        }

        $this->em->flush();

        $response->success = true;
        $response->count = $count;

        $response->send();

    }

    public function groupDateChange()
    {

        $this->load->library('JsonResponse');

        $ids = $this->input->post('ids');
        $givenDate = explode('/', $this->input->post('changeDate'));

        $changeDate = $start = mktime(12, 0, 0, $givenDate[0], $givenDate[1], $givenDate[2]);
        $openStatus = $this->account()->getCompany()->getOpenStatus();

        $response = new JsonResponse();
        $count = 0;

        foreach ($ids as $id) {


            // Load proposal
            $proposal = $this->em->find('\models\Proposals', $id);
            /* @var $proposal \models\Proposals */

            // Change the status update time if open
            if ($proposal->getProposalStatus()->getStatusId() == $openStatus->getStatusId()) {
                $proposal->setStatusChangeDate($changeDate);
            }

            // Old date for logging
            $oldDate = $proposal->getCreated(true);

            $oldDateTime = $proposal->getCreated(false);
            // Update with new date
            $proposal->setCreated($changeDate);
            // Save
            $this->em->persist($proposal);

            //Event Log
            $this->getProposalEventRepository()->changeProposalCreated($proposal, $this->account(), $oldDateTime, $changeDate);

            // Log each one
            $this->log_manager->add(\models\ActivityAction::GROUP_CHANGE_PROPOSAL_DATE,
                "[Group Action] - Proposal Creation Date updated from " . $oldDate . ' to ' . $this->input->post('changeDate'),
                $proposal->getClient(),
                $proposal,
                null,
                $this->account()
            );

            $count++;

        }

        $this->em->flush();

        $response->success = true;
        $response->count = $count;

        $response->send();

    }

    public function addNote()
    {
        $data = array(
            'success' => 0,
        );
        $note = new \models\Notes();
        $note->setNoteText($this->input->post('noteText'));
        $note->setType($this->input->post('noteType'));
        $note->setRelationId($this->input->post('relationId'));
        $note->setUser($this->account()->getAccountId());
        $note->setWorkOrder(@$this->input->post('work_order') ?: 0);
        $this->em->persist($note);
        $this->em->flush();
        $data['success'] = 1; 
 
        switch ($this->input->post('noteType')) {

            case 'proposal':
                $this->getLogRepository()->add([
                    'action' => models\ActivityAction::ADD_NOTES,
                    'details' => "Proposal Note Added: " . $this->input->post('noteText'),
                    'proposal' => $this->input->post('relationId'),
                    'account' => $this->account()->getAccountId(),
                    'company' => $this->account()->getCompanyId(),
                ]);

                $proposal = $this->em->findProposal($this->input->post('relationId'));

                if ($proposal) {

                    $proposalnote = $proposal->getNoteCount();
                    $proposalnote += 1;
                    $proposal->setNoteCount($proposalnote);
                    $proposal->setRebuildFlag(1);
                    $this->em->persist($proposal);
                    $this->em->flush();
                }
                break;
            case 'company':
                $this->getLogRepository()->add([
                    'action' => models\ActivityAction::ADD_NOTES,
                    'details' => "Company Note Added: " . $this->input->post('noteText'),
                    'company' => $this->input->post('relationId'),
                    'account' => $this->account()->getAccountId(),
                    'company' => $this->account()->getCompanyId(),
                ]);
                break;
            case 'prospect':
                    $this->getLogRepository()->add([
                        'action' => models\ActivityAction::ADD_NOTES,
                        'details' => "Prospect Note Added: " . $this->input->post('noteText'),
                        'company' => $this->input->post('relationId'),
                        'account' => $this->account()->getAccountId(),
                        'company' => $this->account()->getCompanyId(),
                    ]);
                break;
            case 'client':
                $this->getLogRepository()->add([
                    'action' => models\ActivityAction::ADD_NOTES,
                    'details' => "Client Note Added: " . $this->input->post('noteText'),
                    'company' => $this->input->post('relationId'),
                    'account' => $this->account()->getAccountId(),
                    'company' => $this->account()->getCompanyId(),
                ]);
            break;
        }

        echo json_encode($data);
    }

    public function getClients()
    {
        //get account
        $account = $this->em->find('models\Accounts', $this->uri->segment(3));
        if (!$account) {
            $this->session->set_flashdata('error', 'Account Not found!');
            redirect('account/my_account');
        }
        //check if the account is in the same company as the admin
        if ((!$this->session->userdata('sublogin')) && ($account->getCompany() != $this->account()->getCompany())) {
            $this->session->set_flashdata('error',
                'You are not allowed to retrieve the contact list for other companies!');
            redirect('account/my_account');
        }
        $clients = array();
        $clients_doctrine = $account->getClients();
        foreach ($clients_doctrine as $client) {
            $clients[] = array(
                '<input type="checkbox" name="client[' . $client->getClientId() . ']">',
                $client->getFullName(),
                $client->getCompanyName(),
            );
        }
        echo json_encode($clients);
    }

    public function getClientData()
    {
        $client = $this->em->find('models\Clients', $this->uri->segment(3));
        $clientdata = array();
        $clientdata['firstName'] = $client->getFirstName();
        $clientdata['lastName'] = $client->getLastName();
        $clientdata['company'] = ($client->getClientAccount()) ? $client->getClientAccount()->getName() : '';
        $clientdata['title'] = $client->getTitle();
        $clientdata['state'] = $client->getState();
        $clientdata['country'] = $client->getCountry();
        $clientdata['email'] = $client->getEmail();
        $clientdata['address'] = $client->getAddress();
        $clientdata['city'] = $client->getCity();
        $clientdata['zip'] = $client->getZip();
        $clientdata['cellPhone'] = $client->getCellPhone();
        $clientdata['fax'] = $client->getFax();
        $clientdata['businessPhone'] = $client->getBusinessPhone();
        $clientdata['fax'] = $client->getFax();
        $clientdata['website'] = $client->getWebsite();
        $clientdata['accountId'] = $client->getAccount()->getAccountId();
        $clientdata['clientAccount'] = $client->getClientAccount()->getName();
        echo json_encode($clientdata);
    }

    public function getAccountData()
    {
        $account = $this->em->find('models\Accounts', $this->uri->segment(3));
        $accountdata = array();
        $accountdata['fullName'] = $account->getFullName();
        $accountdata['country'] = $account->getCountry();
        $accountdata['email'] = $account->getEmail();
        $accountdata['address'] = $account->getAddress();
        $accountdata['city'] = $account->getCity();
        $accountdata['state'] = $account->getState();
        $accountdata['zip'] = $account->getZip();
        $accountdata['cellPhone'] = $account->getCellPhone();
        echo json_encode($accountdata);
    }

    public function exportCSVData($exportId = false)
    {

        echo '1';
        ob_flush();

        $export = false;

        // Load the saved export if ID sent
        if ($exportId) {
            $export = $this->em->find('\models\SavedReport', $exportId);
            /* @var $export \models\SavedReport */

            $params = $export->getParams();

            // We need to unset the save flag, or it will duplicate
            $params['saveExport'] = false;
        } else {
            $params = $_POST;
        }

        if (!isset($params['saveExport'])) {
            $params['saveExport'] = false;
        }

        if (!isset($params['statusApply'])) {
            $params['statusApply'] = false;
        }
        if (!isset($params['fields'])) {
            $params['fields'] = false;
        }


        set_time_limit(3600);
        ignore_user_abort(true);
        //debug for when times get rough
        //        print_r($_POST); die();
        $this->load->database();
        $this->load->model('branchesapi');
        $data = array();
        $branches = $this->branchesapi->getBranches($this->account()->getCompany()->getCompanyId());
        $debug = 0;
        $fileName = 'export.csv';
        $labels = array();
        //debug

        if (is_array($params['fields'])) {
            $fields = $params['fields'];
            foreach ($fields as $key => $value) {

                // If status is selected, add status Date Change - only applies to proposals
                if ($value != 'Status') {
                    $labels[] = $value;
                } else {
                    if ($params['export'] == 'proposals') {
                        $labels[] = $value;
                        $labels[] = 'Status Date Change';
                    } else {
                        $labels[] = $value;
                    }
                }
            }
            $data[] = $labels;
        }

        if ($export) {
            $this->log_manager->add('saved_export_run', "User ran saved export '" . $export->getReportName() . "'");
        } else {
            $this->log_manager->add('export_downloaded', 'User Exported ' . $params['export'] . ' to csv.');
        }

 
        switch ($params['export']) {
            case 'prospects':
                /*************************
                 * EXPORT PROSPECTS CODE *
                 * ***********************/
                $prospects = $this->em->createQuery('
                  SELECT p FROM models\Prospects p WHERE p.company=' . $this->account()->getCompany()->getCompanyId())->getResult();
                $accounts = $this->getCompanyAccounts();
                $fileName = 'prospects.csv';
                foreach ($prospects as $prospect) {
                    $p = array();
                    foreach ($fields as $key => $value) {
                        switch ($key) {
                            case 'branch':
                                $account = (isset($accounts[$prospect->getAccount()])) ? $accounts[$prospect->getAccount()] : 0;
                                if ($account) {
                                    if (isset($branches[$account->getBranch()])) {
                                        if (isset($branches[$account->getBranch()])) {
                                            $branch = $branches[$account->getBranch()]->getBranchName();
                                        } else {
                                            $branch = 'Main';
                                        }
                                    } else {
                                        $branch = 'Main';
                                    }
                                } else {
                                    $branch = 'Not Assigned';
                                }
                                $p[] = $branch;
                                break;
                            case 'firstName':
                                $p[] = $prospect->getFirstName();
                                break;
                            case 'lastName':
                                $p[] = $prospect->getLastName();
                                break;
                            case 'company':
                                $p[] = $prospect->getCompanyName();
                                break;
                            case 'title':
                                $p[] = $prospect->getTitle();
                                break;
                            case 'address':
                                $p[] = $prospect->getAddress();
                                break;
                            case 'city':
                                $p[] = $prospect->getCity();
                                break;
                            case 'state':
                                $p[] = $prospect->getState();
                                break;
                            case 'zip':
                                $p[] = $prospect->getZip();
                                break;
                            case 'businessPhone':
                                $p[] = $prospect->getBusinessPhone();
                                break;
                            case 'cellPhone':
                                $p[] = $prospect->getCellPhone();
                                break;
                            case 'fax':
                                $p[] = $prospect->getFax();
                                break;
                            case 'email':
                                $p[] = $prospect->getEmail();
                                break;
                            case 'website':
                                $p[] = $prospect->getWebsite();
                                break;
                            case 'status':
                                $p[] = $prospect->getStatus();
                                break;
                            case 'business':
                                $p[] = $prospect->getBusiness();
                                break;
                            case 'rating':
                                $p[] = $prospect->getRating();
                                break;
                            case 'owner':
                                $p[] = (isset($accounts[$prospect->getAccount()])) ? $accounts[$prospect->getAccount()]->getFullName() : 'None';
                                break;
                            case 'source':
                                $p[] = $prospect->getProspectSourceText();
                                break;
                            default:
                                $p[] = $key . ' undefined.';
                                break;
                        }
                    }
                    $data[] = $p;
                }

                // Is the export being saved?
                if ($params['saveExport']) {
                    // Set the report type
                    $reportType = $this->em->find('\models\ReportType', \models\ReportType::PROSPECTS);
                }
                break;
            case 'leads':
                /*********************
                 * EXPORT LEADS CODE *
                 * *******************/
                $leads = $this->em->createQuery('SELECT l FROM models\Leads l WHERE l.company=' . $this->account()->getCompany()->getCompanyId() . ' ORDER BY l.created DESC')->getResult();
                $accounts = $this->getCompanyAccounts();
                $servs = $this->em->createQuery('select s from models\Services s where s.parent=0 order by s.serviceName')->getResult();
                $services = array();
                foreach ($servs as $service) {
                    $services[$service->getServiceId()] = $service->getServiceName();
                }
                //$services = $this->account()->getCompany()->getAllServices(true);
                $fileName = 'leads.csv';
                foreach ($leads as $lead) {
                    $l = array();
                    foreach ($fields as $key => $value) {
                        switch ($key) {
                            case 'branch':
                                $account = (isset($accounts[$lead->getAccount()])) ? $accounts[$lead->getAccount()] : 0;
                                if ($account) {
                                    $branch = (isset($branches[$account->getBranch()])) ? $branches[$account->getBranch()]->getBranchName() : 'Main';
                                } else {
                                    $branch = 'Not Assigned';
                                }
                                $l[] = $branch;
                                break;
                            case 'created':
                                $l[] = $lead->getCreated();
                                break;
                            case 'converted':
                                $l[] = ($lead->getStatus() == 'Converted') ? $lead->getConverted() : 'N/A';
                                break;
                            case 'daystoconvert':
                                $l[] = ($lead->getStatus() == 'Converted') ? (round(($lead->getConverted(true) - $lead->getCreated(true)) / 86400)) : 'N/A';
                                break;
                            case 'source':
                                $l[] = $lead->getSource();
                                break;
                            case 'rating':
                                $l[] = $lead->getRating();
                                break;
                            case 'due_date':
                                $l[] = $lead->getDueDate();
                                break;
                            case 'owner':
                                $l[] = (isset($accounts[$lead->getAccount()])) ? $accounts[$lead->getAccount()]->getFullName() : 'None';
                                break;
                            case 'firstName':
                                $l[] = $lead->getFirstName();
                                break;
                            case 'lastName':
                                $l[] = $lead->getLastName();
                                break;
                            case 'company':
                                $l[] = $lead->getCompanyName();
                                break;
                            case 'title':
                                $l[] = $lead->getTitle();
                                break;
                            case 'address':
                                $l[] = $lead->getAddress();
                                break;
                            case 'city':
                                $l[] = $lead->getCity();
                                break;
                            case 'state':
                                $l[] = $lead->getState();
                                break;
                            case 'zip':
                                $l[] = $lead->getZip();
                                break;
                            case 'businessPhone':
                                $l[] = $lead->getBusinessPhone();
                                break;
                            case 'cellPhone':
                                $l[] = $lead->getCellPhone();
                                break;
                            case 'fax':
                                $l[] = $lead->getFax();
                                break;
                            case 'email':
                                $l[] = $lead->getEmail();
                                break;
                            case 'website':
                                $l[] = $lead->getWebsite();
                                break;
                            case 'status':
                                $l[] = $lead->getStatus();
                                break;
                            case 'project_name':
                                $l[] = $lead->getProjectName();
                                break;
                            case 'project_contact':
                                $l[] = $lead->getProjectContact();
                                break;
                            case 'project_phone':
                                $l[] = $lead->getProjectPhone();
                                break;
                            case 'project_address':
                                $l[] = $lead->getProjectAddress();
                                break;
                            case 'project_city':
                                $l[] = $lead->getProjectCity();
                                break;
                            case 'project_state':
                                $l[] = $lead->getProjectState();
                                break;
                            case 'project_zip':
                                $l[] = $lead->getProjectZip();
                                break;
                            case 'project_services':
                                $srvs = explode(',', $lead->getServices());
                                $string = '';
                                foreach ($srvs as $k => $s) {
                                    if ($k) {
                                        $string .= ', ';
                                    }
                                    $string .= @$services[$s];
                                }
                                $l[] = $string;
                                break;
                            case 'project_notes':
                                $l[] = $lead->getNotes();
                                break;
                            case 'lead_business_type':
                                $l[] = $this->getLeadRepository()->getLeadBusinessTypeNames($lead->getLeadId());
                                break;
                            default:
                                $l[] = $key . ' undefined.';
                                break;
                        }
                    }
                    //$l[] = $lead->getLeadId();
                    //$l[] = $lead->getConvertedTo();
                    $data[] = $l;
                }
                // Is the export being saved?
                if ($params['saveExport']) {
                    // Set the report type
                    $reportType = $this->em->find('\models\ReportType', \models\ReportType::LEADS);
                }
                break;
            case 'clients':
                /*********************
                 * EXPORT CLIENTS CODE *
                 * *******************/
                $clients = $this->em->createQuery('SELECT c FROM models\Clients c WHERE c.company IS NOT NULL AND c.company=' . $this->account()->getCompany()->getCompanyId())->getResult();
                $fileName = 'contacts.csv';
                foreach ($clients as $client) {
                    $c = array();
                    foreach ($fields as $key => $value) {
                        switch ($key) {
                            case 'branch':
                                try {
                                    if (isset($branches[$client->getAccount()->getBranch()])) {
                                        if (isset($branches[$client->getAccount()->getBranch()])) {
                                            $branch = $branches[$client->getAccount()->getBranch()]->getBranchName();
                                        } else {
                                            $branch = 'Main';
                                        }
                                    } else {
                                        $branch = 'Main';
                                    }
                                } catch (Exception $e) {
                                    $branch = 'Unassigned';
                                }
                                $c[] = $branch;
                                break;
                            case 'firstName':
                                $c[] = $client->getFirstName();
                                break;
                            case 'lastName':
                                $c[] = $client->getLastName();
                                break;
                            case 'company':
                                $c[] = ($client->getClientAccount()) ? $client->getClientAccount()->getName() : '';
                                break;
                            case 'title':
                                $c[] = $client->getTitle();
                                break;
                            case 'address':
                                $c[] = $client->getAddress();
                                break;
                            case 'city':
                                $c[] = $client->getCity();
                                break;
                            case 'state':
                                $c[] = $client->getState();
                                break;
                            case 'zip':
                                $c[] = $client->getZip();
                                break;
                            case 'businessPhone':
                                $c[] = $client->getBusinessPhone();
                                break;
                            case 'cellPhone':
                                $c[] = $client->getCellPhone();
                                break;
                            case 'email':
                                $c[] = $client->getEmail();
                                break;
                            case 'website':
                                $c[] = $client->getWebsite();
                                break;
                            case 'owner':
                                $c[] = $client->getAccount()->getFullName();
                                break;
                            default:
                                $c[] = $key . ' undefined.';
                                break;
                        }
                    }
                    $data[] = $c;
                }
                // Is the export being saved?
                if ($params['saveExport']) {
                    // Set the report type
                    $reportType = $this->em->find('\models\ReportType', \models\ReportType::CLIENTS);
                }
                break;
            case 'proposals':
                /*********************
                 * EXPORT PROPOSALS CODE *
                 * *******************/
                $fileName = 'proposals.csv';
                if (!isset($params['searchProposal'])) {
                    $params['searchProposal'] = '';
                }

                $p = array();
                //base query
                $query = 'SELECT p FROM models\Proposals p
                          INNER JOIN p.client c
                          INNER JOIN c.company cmp
                          WHERE (cmp.companyId = c.company)
                          AND (cmp.companyId = ' . $this->account()->getCompany()->getCompanyId() . ")";
                //filter status
                if ($params['status']) {
                    $query .= " and (p.proposalStatus = '" . $params['status'] . "')";
                }
                //filter user
                if ($params['user']) {
                    $query .= " and (p.owner = " . $params['user'] . ")";
                }
                //filter dates
                if ($params['from']) {
                    $from = explode('/', $params['from']);
                    $start = mktime(0, 0, 0, $from[0], $from[1], $from[2]);
                    $query .= " and (p.created >= {$start})";

                }
                if ($params['to']) {
                    $to = explode('/', $params['to']);
                    $end = mktime(23, 59, 59, $to[0], $to[1], $to[2]);
                    $query .= " and (p.created <= {$end})";
                }

                // Status change dates
                if ($params['statusApply']) {
                    $statusFrom = $params['statusFrom'];
                    $statusTo = $params['statusTo'];

                    $statusFrom = explode('/', $statusFrom);
                    $statusTo = explode('/', $statusTo);

                    $statusStartDay = $statusFrom[1];
                    $statusStartMonth = $statusFrom[0];
                    $statusStartYear = $statusFrom[2];

                    $statusEndDay = $statusTo[1];
                    $statusEndMonth = $statusTo[0];
                    $statusEndYear = $statusTo[2];

                    $statusStart = mktime(0, 0, 0, $statusStartMonth, $statusStartDay,
                        $statusStartYear); //start timestamp
                    $statusEnd = mktime(23, 59, 59, $statusEndMonth, $statusEndDay, $statusEndYear); //end timestamp

                    $query .= " AND (p.statusChangeDate >= {$statusStart} AND p.statusChangeDate <= {$statusEnd})";
                }

                $props = $this->em->createQuery($query)->getResult();

                // Is the export being saved?
                if ($params['saveExport']) {
                    // Set the report type
                    $reportType = $this->em->find('\models\ReportType', \models\ReportType::PROPOSALS);
                }
                $formattedDate2="";
                $formattedDate="";
                foreach ($props as $proposal) {

                    $timestamp3 = $proposal->getWinDate();
                    if (!empty($timestamp3) && is_numeric($timestamp3) && (int)$timestamp3 == $timestamp3 && $timestamp3 <= PHP_INT_MAX && $timestamp3 >= ~PHP_INT_MAX)
                     {
                        $timestamp3 = (int)$timestamp3; // Ensure $timestamp is an integer
                        $formattedDate = date('m-d-Y', $timestamp3);
                        $year = date('Y', $timestamp3); // Use the integer $timestamp here
                        if ($year == "1969") {
                            $formattedDate = "";
                        }
                    }else{
                        $formattedDate = "";
                    }
                    
                    $timestamp2 = $proposal->getInvoiceDate();
                    if (is_numeric($timestamp2) && (int)$timestamp2 == $timestamp2 && $timestamp2 <= PHP_INT_MAX && $timestamp2 >= ~PHP_INT_MAX) {
                        $formattedDate2 = date('m-d-Y', $timestamp2);
                        $year = date('Y', $timestamp2);
                        if($year=="1969"){
                            $formattedDate2="";
                        }

                    }

                    


                    $pass = true;
                    //filter service
                    if ($params['service']) {
                        if (!$this->db->query('SELECT * FROM proposal_services WHERE initial_service = ' . $params['service'] . ' AND proposal=' . $proposal->getProposalId())->num_rows()) {
                            $pass = false;
                        }
                    }
                    if ($pass) {
                        $p = array();
                        foreach ($fields as $key => $value) { // change to proposals based on filter and shit


                            switch ($key) {
                                case 'branch':
                                    $p[] = (isset($branches[$proposal->getClient()->getAccount()->getBranch()])) ? $branches[$proposal->getClient()->getAccount()->getBranch()]->getBranchName() : 'Main';
                                    break;
                                case 'dateIssued':
                                    $p[] = $proposal->getCreated();
                                    break;
                                case 'status':
                                    $p[] = $proposal->getProposalStatus()->getText();
                                    $statusChangeLog = $proposal->getLastStatusChange();
                                    if ($statusChangeLog) {
                                        $p[] = date('m/d/Y', $statusChangeLog->getTimeAdded());
                                    } else {
                                        $p[] = '-';
                                    }
                                    break;
                                case 'jobNumber':
                                    $p[] = $proposal->getJobNumber();
                                    break;
                                case 'projectName':
                                    $p[] = $proposal->getProjectName();
                                    break;
                                case 'totalPrice':
                                    $p[] = '$' . $proposal->getTotalPrice(false);
                                    break;
                                case 'paymentTerm':
                                    $p[] = $proposal->getPaymentTerm();
                                    break;
                                case 'owner':
                                    $p[] = $proposal->getOwner()->getFullName();
                                    break;
                                case 'services':
                                    $serviceList = '';
                                    $services = $this->db->query("SELECT * FROM proposal_services WHERE proposal=" . $proposal->getProposalId());
                                    $k = 0;
                                    foreach ($services->result() as $service) {
                                        $k++;
                                        $serviceList .= $service->serviceName . ' (' . $service->price . ')';
                                        if ($k < $services->num_rows()) {
                                            $serviceList .= ', ';
                                        }
                                    }
                                    $p[] = $serviceList;
                                    break;
                                case 'client-firstName':
                                    $p[] = $proposal->getClient()->getFirstName();
                                    break;
                                case 'client-lastName':
                                    $p[] = $proposal->getClient()->getLastName();
                                    break;
                                case 'client-company':
                                    $p[] = $proposal->getClient()->getClientAccount()->getName();
                                    break;
                                case 'client-title':
                                    $p[] = $proposal->getClient()->getTitle();
                                    break;
                                case 'client-address':
                                    $p[] = $proposal->getClient()->getAddress();
                                    break;
                                case 'client-city':
                                    $p[] = $proposal->getClient()->getCity();
                                    break;
                                case 'client-state':
                                    $p[] = $proposal->getClient()->getState();
                                    break;
                                case 'client-zip':
                                    $p[] = $proposal->getClient()->getZip();
                                    break;
                                case 'client-businessPhone':
                                    $p[] = $proposal->getClient()->getBusinessPhone();
                                    break;
                                case 'client-cellPhone':
                                    $p[] = $proposal->getClient()->getCellPhone();
                                    break;
                                case 'client-email':
                                    $p[] = $proposal->getClient()->getEmail();
                                    break;
                                case 'client-website':
                                    $p[] = $proposal->getClient()->getWebsite();
                                    break;
                                case 'lead-source':
                                    $p[] = $proposal->getLeadSource();
                                    break;
                                case 'project-address':
                                    $p[] = $proposal->getProjectAddress();
                                    break;
                                case 'project-city':
                                    $p[] = $proposal->getProjectCity();
                                    break;
                                case 'project-state':
                                    $p[] = $proposal->getProjectState();
                                    break;
                                case 'project-zip':
                                    $p[] = $proposal->getProjectZip();
                                    break;
                           
                                case 'proposal_business_type':
                                    $p[] = $this->getProposalRepository()->getProposalBusinessTypeName($proposal->getBusinessTypeId());
                                    break;
                                case 'win-date':
                                            $p[]=$formattedDate;
                                    break;
                                case 'invoice-date':
                                          $p[]=$formattedDate2;
                                    break;
                                case 'proposal-id':
                                    $p[] = $proposal->getProposalId();
                                break;
                            default:
                                    $p[] = $key . ' undefined.';
                                    break;
                            }
                        }
                        $data[] = $p;
                    }
                }
                break;
            case 'services':
                /*********************************
                 * EXPORT PROPOSAL SERVICES CODE *
                 * *******************************/
                $fileName = 'pl-services.csv';
                $p = array();
                if (!isset($params['searchProposal'])) {
                    $params['searchProposal'] = '';
                }
                //base query
                $query = 'SELECT p FROM models\Proposals p INNER JOIN p.client c INNER JOIN c.company cmp WHERE (cmp.companyId = c.company) AND (cmp.companyId = ' . $this->account()->getCompany()->getCompanyId() . ") AND (p.projectName LIKE '%" . $params['searchProposal'] . "%')";
                //filter status
                if ($params['status']) {
                    $query .= " and (p.status = '" . $params['status'] . "')";
                }
                //filter dates
                if ($params['from']) {
                    $from = explode('/', $params['from']);
                    $start = mktime(0, 0, 0, $from[0], $from[1], $from[2]);
                    $query .= " and (p.created >= {$start})";
                }
                if ($params['to']) {
                    $to = explode('/', $params['to']);
                    $end = mktime(23, 59, 59, $to[0], $to[1], $to[2]);
                    $query .= " and (p.created <= {$end})";
                }
                $service_categories = $this->db->query('SELECT * FROM services WHERE parent=0')->result();
                $serviceTotals = array_fill(0, count($service_categories), 0);
                $serviceAssoc = array();
                $k = 0;
                foreach ($service_categories as $category) {
                    $data[0][] = $category->serviceName;
                    $serviceAssoc[$category->serviceId] = $k;
                    $k++;
                }
                $proposal_services = array();
                $props = $this->em->createQuery($query)->getResult();
                foreach ($props as $proposal) {
                    $proposal_services[$proposal->getProposalId()] = array();
                    $p = array();
                    foreach ($fields as $key => $value) { // change to proposals based on filter and shit
                        switch ($key) {
                            case 'jobNumber':
                                $p[] = $proposal->getJobNumber();
                                break;
                            case 'projectName':
                                $p[] = $proposal->getProjectName();
                                break;
                            case 'client-company':
                                $p[] = $proposal->getClient()->getClientAccount()->getName();
                                break;
                            default:
                                $p[] = $key . ' undefined.';
                                break;
                        }
                    }
                    $proposalId = $proposal->getProposalId();
                    foreach ($service_categories as $category) {
                        $parent = $category->serviceId;
                        $services = $this->db->query("select serviceId, price from proposal_services where proposal = {$proposalId} and initial_service in (select serviceId from services where parent = {$parent})")->result();
                        //prices
                        foreach ($services as $service) {
                            $serviceTotals[$serviceAssoc[$parent]] += str_replace(array('$', ','), array('', ''),
                                $service->price);
                        }
                        if (count($services)) {
                            $p[] = 'X';
                        } else {
                            $p[] = '';
                        }
                    }
                    $data[] = $p;
                }
                //add totals
                $totalArray = array();
                foreach ($serviceTotals as $key => $total) {
                    $serviceTotals[$key] = '$' . number_format($total, 2);
                }
                $totalArray = array_merge(array_fill(0, count($labels), ''), $serviceTotals);
                $data[] = $totalArray;
                // Is the export being saved?
                if ($params['saveExport']) {
                    // Set the report type
                    $reportType = $this->em->find('\models\ReportType', \models\ReportType::SERVICES);
                }
                break;
            case 'history':
                /***********************
                 * EXPORT HISTORY CODE *
                 * *********************/
                $fileName = 'history.csv';
                $historyUser = null;
                $start = mktime(0, 0, 0, 1, 1, $params['year']);
                $end = mktime(23, 59, 59, 12, 31, $params['year']);
                $q = 'SELECT l FROM models\Log l WHERE (l.company=' . $this->account()->getCompany()->getCompanyId() . ') AND (l.timeAdded > ' . $start . ') AND (l.timeAdded < ' . $end . ')  ORDER BY l.timeAdded DESC';
                if ($params['user']) {
                    $historyUser = $this->em->find('models\Accounts', $params['user']);
                    if ($historyUser) {
                        $q = 'SELECT l FROM models\Log l WHERE (l.company=' . $this->account()->getCompany()->getCompanyId() . ') AND (l.account=' . $params['user'] . ') AND (l.timeAdded > ' . $start . ') AND (l.timeAdded < ' . $end . ')  ORDER BY l.timeAdded DESC';
                    }
                }
                $query = $this->em->createQuery($q);
                $logs = $query->getResult();
                $exportLogs = array();
                $exportLogs[] = array(
                    'Date',
                    'User',
                    'IP Address',
                    'Contact',
                    'Proposal',
                    'Details',
                );
                foreach ($logs as $log) {
                    try {
                        if ($log->getUserName()) {
                            $acc = $log->getUserName();
                        } else {
                            $acc = ($log->getAccount()) ? $log->getAccount()->getFullName() : 'No User';
                        }
                    } catch (Exception $e) {
                        $acc = 'Account Deleted';
                    }

                    try {
                        $client = ($log->getClient()) ? $log->getClient()->getCompanyName() : 'None';
                    } catch (Exception $e) {
                        $client = 'Contact Deleted';
                    }

                    try {
                        $proposal = ($log->getProposal()) ? $log->getProposal()->getProjectName() : 'None';
                    } catch (Exception $e) {
                        $proposal = 'Proposal Deleted';
                    }
                    $exportLogs[] = array(
                        date('m/d/Y h:i:s A', $log->getTimeAdded() + TIMEZONE_OFFSET),
                        $acc,
                        $log->getIp(),
                        $client,
                        $proposal,
                        $log->getDetails(),
                    );
                }
                $data = $exportLogs;
                // Is the export being saved?
                if ($params['saveExport']) {
                    // Set the report type
                    $reportType = $this->em->find('\models\ReportType', \models\ReportType::HISTORY);
                }
                break;
                //start Account export featute
                case 'accounts':
                 /*********************
                 * EXPORT ACCOUNT CODE *
                 * *******************/
                
                $accounts = $this->em->createQuery("SELECT c FROM models\ClientCompany c WHERE c.owner_company IS NOT NULL AND c.owner_company=" . $this->account()->getCompany()->getCompanyId())->getResult();
                $fileName = 'accounts.csv';
                foreach ($accounts as $account) {
                    $acc = array();
                    foreach ($fields as $key => $value) {
                        switch ($key) {
                             
                            case 'name':
                                $acc[] = $account->getName();
                                break;
                            case 'address':
                                $acc[] = $account->getAddress();
                                break;
                            case 'city':
                                $acc[] = $account->getCity();
                                break;
                            case 'state':
                                $acc[] = $account->getState();
                                break;
                            case 'zip':
                                $acc[] = $account->getZip();
                                break;
                            case 'phone':
                                $acc[] = $account->getPhone();
                                break;
                            case 'email':
                                $acc[] = $account->getEmail();
                                break;
                            case 'website':
                                $acc[] = $account->getWebsite();
                                break;
                            default:
                                $acc[] = $key . ' undefined.';
                                break;
                        }
                    }
                    $data[] = $acc;
                }
                // Is the export being saved?
                if ($params['saveExport'] ) {
                    // Set the report type
                   
                    $reportType = $this->em->find('\models\ReportType', \models\ReportType::ACCOUNTS);
                }
                break;
                //close Account export feature
               // echo "test";die;

        }
        if ($debug) {
            ?>
            <pre><?php
            print_r($data);
            ?></pre><?php
        } else {
  
             // echo "<pre>";print_r($params);die;
            // Save the report if requested
            if ($params['saveExport'] ) {
                // Lets create a saved report
                $report = new \models\SavedReport();
                $report->setCompany($this->account()->getCompany());
                $report->setAccount($this->account());
                $report->setReportType($reportType);
                $report->setReportName($params['saveExportName']);
                $report->setParams(json_encode($params));

                $this->em->persist($report);
                $this->em->flush();

                // Log it
             //$this->log_manager->add('saved_export_created',"Saved Export '" . $report->getReportName() . "' created", null, null, $report->getCompany());
            }

            if (!is_dir(ROOTPATH . '/exports/' . $this->account()->getCompany()->getCompanyId())) {
                mkdir(ROOTPATH . '/exports/' . $this->account()->getCompany()->getCompanyId());
            }
            $fileName = $params['export'] . '-' . $this->account()->getCompany()->getCompanyId() . '-' . time() . '.csv';

            $subject = 'Your ' . ucwords($params['export']) . ' Export is Done!';
            $content = 'Hello! The requested export is done and ready to download! You can get it here: ' . site_url('uploads/exports/' . $fileName);

            //Check for parent Account
            if($this->account()->getParentUserId()){
                $account = $this->em->findAccount($this->account()->getParentUserId());
                $toEmail = $account->getEmail();
             }else{
                 $toEmail = $this->account()->getEmail();
            }
            $emailData = [
                'to' => $toEmail,
                'fromName' => SITE_NAME,
                'fromEmail' => 'no-reply@' . SITE_EMAIL_DOMAIN,
                'subject' => $subject,
                'body' => $content,
                'categories' => ['Export'],
            ];
           //  $this->getEmailRepository()->send($emailData);
          // echo "<pre>final data";print_r($data);
             export($data, 'csv', $fileName, false);
        }
    }

    public function updateProposalAttachment()
    {
        $attachment = $this->em->find('\models\Proposal_attachments', $this->input->post('id'));
        if ($attachment) {
            $attachment->setFileName($this->input->post('fileName'));
            $attachment->setProposal($this->input->post('proposal'));
            $attachment->setWorkOrder($this->input->post('work_order'));
            $this->em->persist($attachment);

            $proposal = $this->em->findProposal($attachment->getProposalId());
            $proposal->setRebuildFlag(1);
            $this->em->persist($proposal);

            $this->em->flush();
        }
    }

    public function updateProposalTexts()
    {
        $proposal = $this->em->find('models\Proposals', $this->input->post('proposal'));
        if (!$proposal) {
            $this->session->set_flashdata('error', 'Proposal does not exist!');
            redirect('proposals');
        }
        //check if current account can edit
        if (!$this->account()->isAdministrator() && ($this->account()->getFullAccess() == 'no')) {
            if ($this->account() != $proposal->getOwner()) {
                $this->session->set_flashdata('error', 'You do not have enough privileges to edit this proposal!');
                redirect('proposals');
            }
        }
        //update the actual texts
      //  echo "<pre>";print_r($_POST);die;
      $textS = $this->input->post('texts');
        $proposal->setTexts($this->input->post('texts'));
        $this->getLogRepository()->add([
            'action' => \models\ActivityAction::UPDATE_PROPOSAL_SETTING,
            'details' => "Update the Custom text for Proposal Docs",
            'proposal' => $proposal->getProposalId(),
            'account' => $this->account()->getAccountId(),
            'company' => $this->account()->getCompanyId(),
        ]);
        $proposal->setRebuildFlag(1);
        $this->em->persist($proposal);
        $this->em->flush();
    }

    public function updateProposalTextCategories()
    {
        $proposal = $this->em->find('models\Proposals', $this->input->post('proposal'));
        if (!$proposal) {
            $this->session->set_flashdata('error', 'Proposal does not exist!');
            redirect('proposals');
        }
        $updateval = '';
        if (is_array($_POST['text_category'])) {
            $k = 0;
            foreach ($_POST['text_category'] as $catId) {
                $k++;
                $updateval .= $catId . ':' . $_POST['category_checked'][$catId];
                if ($k < count($_POST['text_category'])) {
                    $updateval .= '|';
                }
            }
        }
        $proposal->setTextsCategories($updateval);
        $this->getLogRepository()->add([
            'action' => \models\ActivityAction::UPDATE_PROPOSAL_SETTING,
            'details' => "Custom text included/excluded in proposal docs",
            'proposal' => $proposal->getProposalId(),
            'account' => $this->account()->getAccountId(),
            'company' => $this->account()->getCompanyId(),
        ]);
        $proposal->setRebuildFlag(1);
        $this->em->persist($proposal);
        $this->em->flush();
    }

    public function updateProposalImageTitle()
    {
        $image = $this->em->find('models\Proposals_images', $this->uri->segment(3));
        if (!$image) {
            echo 'error';
        } else {
            $image->setTitle($this->input->post('title'));


            $this->em->persist($image);
            if ($image->getActive()) {
                $proposal = $image->getProposal();
                $proposal->setRebuildFlag(1);
                $this->em->persist($proposal);
            }
            $this->em->flush();
            $this->em->clear();
            echo 'success';
        }
    }

    public function updateProposalImageActive()
    {
        $image = $this->em->find('models\Proposals_images', $this->uri->segment(3));
        if (!$image) {
            echo 'error';
        } else {
            $image->setActive($this->input->post('active'));
            $image->setActivewo($this->input->post('activewo'));
            $this->em->persist($image);
            $proposal = $image->getProposal();
            $proposal->setRebuildFlag(1);
            $this->em->persist($proposal);
            $this->em->flush();
            echo 'success';
        }
    }

    public function json_report()
    {
//default data
        $title = 'No Data';
        $h_title = 'Months';
        $v_title = 'Proposals Value (US $)';
        $xLabels = array('Jan');
        $raw_data = array(
            array('No data', 0),
        );
//creation of the users array
        $users = (is_array(@$_POST['users'])) ? $_POST['users'] : array();
//set up from-to timestamps and titles
        $from = (@$_POST['from']) ? $_POST['from'] : '';
        $to = (@$_POST['to']) ? $_POST['to'] : '';
        $from = explode('/', $from);
        $to = explode('/', $to);
        $from[1] = $from[2];
        $to[1] = $to[2];
        if (!is_numeric($from[0]) || !is_numeric($from[1]) || (($from[0] < 1) || ($from[0] > 12))) {
            $from[0] = date('n');
            $from[1] = date('Y');
        }
        if (!is_numeric($to[0]) || !is_numeric($to[1]) || (($to[0] < 1) || ($to[0] > 12))) {
            $to[0] = date('n');
            $to[1] = date('Y');
        }
//swap to and from if from is in the future in relation to the to
        if ((($from[1] == $to[1]) && ($from[0] > $to[0])) || ($from[1] > $to[1])) {
            $temp = $to;
            $to = $from;
            $from = $temp;
        }
//create start/end timestamps
        $start = mktime(0, 0, 0, $from[0], 1, $from[1]); //start timestamp
        $end = mktime(23, 59, 59, $to[0], 1, $to[1]); //end timestamp, first day of the month
        $end = mktime(23, 59, 59, $to[0], date('t', $end), $to[1]); //end timestamp

        // Status change dates
        if ($this->input->post('statusApply')) {
            $statusFrom = $this->input->post('statusFrom');
            $statusTo = $this->input->post('statusTo');

            $statusFrom = explode('/', $statusFrom);
            $statusTo = explode('/', $statusTo);

            if (!is_numeric($statusFrom[0]) || !is_numeric($statusFrom[1]) || (($statusFrom[0] < 1) || ($statusFrom[0] > 12))) {
                $statusFrom[0] = date('n');
                $statusFrom[1] = date('Y');
            }
            if (!is_numeric($statusTo[0]) || !is_numeric($statusTo[1]) || (($statusTo[0] < 1) || ($statusTo[0] > 12))) {
                $statusTo[0] = date('n');
                $statusTo[1] = date('Y');
            }

            $statusStart = mktime(0, 0, 0, $statusFrom[0], 1, $statusFrom[1]); //start timestamp
            $statusEnd = mktime(23, 59, 59, $statusTo[0], 1, $statusTo[1]); //end timestamp, first day of the month
            $statusEnd = mktime(23, 59, 59, $statusTo[0], date('t', $statusEnd), $statusTo[1]); //end timestamp
        }

//create title suffix
        $title_suffix = date("M", mktime(0, 0, 0, $from[0], 1, 2005)) . ' ' . $from[1] . ' to ' . date("M",
                mktime(0, 0, 0, $to[0], 1, 2005)) . ' ' . $to[1];

        // Get this user's array of proposal statuses
        $accountStatuses = $this->account()->getStatuses(true);

        $statuses = array();
        $statusTitles = array();

        $selectedStatus = $this->uri->segment(3);

        switch ($selectedStatus) {
            case 'activity':
                $title = 'Activity Total';
                $xLabels = array('Jan 2011', 'Feb 2011');
                $raw_data = array(
                    array('First', 50, 100),
                    array('Second', 250, 90),
                );
                /*
                $statuses[] = 'Open';
                $statuses[] = 'Won';
                $statuses[] = 'Completed';
                $statuses[] = 'Lost';
                $statuses[] = 'Cancelled';
                $statuses[] = 'On Hold';
                 */
                // All statuses, so loops through their list
                foreach ($accountStatuses as $k => $v) {
                    $statuses[$k] = $k;
                    $statusTitles[$k] = $v;
                }
                break;

            default:
                $title = $accountStatuses[$selectedStatus];
                $statuses[$selectedStatus] = $selectedStatus;
                $statusTitles[$selectedStatus] = $accountStatuses[$selectedStatus];
                break;
        }
        $title = '';
//calculate the data and create the formatted arrays
        $k = 0;
        $xLabels = array();
        $data = array();
        $links = array();
        for ($year = $from[1]; $year <= $to[1]; $year++) {
            $a = 1;
            $b = 12;
            if ($year == $from[1]) {
                $a = $from[0];
            }
            if ($year == $to[1]) {
                $b = $to[0];
            }
            for ($month = $a; $month <= $b; $month++) {
                $k++;
                $xLabels[] = date("M", mktime(0, 0, 0, $month, 1, 2005)) . "\n" . $year;
                foreach ($statuses as $status) {
                    $data[$status][$month . '-' . $year] = 0;
                }
                $links[$k] = $month . '-' . $year;
            }
        }
        $k++;
        $links[$k] = 'Total';
        foreach ($statuses as $key => $val) {
            $data[$val]['Total'] = 0;
        }
        $this->load->database();

        // Construct the query
        $query = 'SELECT p FROM models\Proposals p
                    INNER JOIN p.client c
                    INNER JOIN c.company cmp
                    WHERE (cmp.companyId = c.company)
                    AND (cmp.companyId = :companyId)
                    AND (p.created >= :start)
                    AND (p.created <= :end)';

        // Query Creator
        $proposalsQuery = $this->em->createQuery($query);
        $proposalsQuery->setParameter('companyId', $this->account()->getCompany()->getCompanyId());
        $proposalsQuery->setParameter('start', $start);
        $proposalsQuery->setParameter('end', $end);

        $proposals = $proposalsQuery->getResult();

        $data['proposals_ids'] = '';

        if ($this->input->post('statusApply')) {
            foreach ($proposals as $proposal) {
                $data['proposals_ids'] .= $proposal->getProposalId() . '|';
//check account
                if (in_array($proposal->getClient()->getAccount()->getAccountId(), $users)) {
//check status
                    if (in_array($proposal->getProposalStatus()->getStatusId(), $statuses)) {
// Check status date change
                        if ($proposal->lastStatusChangeInRange($statusStart, $statusEnd)) {
                            $statusChangeLog = $proposal->getLastStatusChange();
//check service
                            if ((($this->input->post('service')) && ($this->db->query("SELECT serviceId FROM proposal_services WHERE proposal=" . $proposal->getProposalId() . " AND initial_service=" . $this->input->post('service'))->num_rows())) || (!$this->input->post('service'))) {
//do magic here
                                $status = $proposal->getStatus();
                                $m_y = date('n', $statusChangeLog->getTimeAdded()) . '-' . date('Y',
                                        $statusChangeLog->getTimeAdded());
                                $data[$status][$m_y] += $proposal->getTotalPrice();
                                $data[$status]['Total'] += $proposal->getTotalPrice();

                            }
                        }
                    }
                }
            }
        } else {
            foreach ($proposals as $proposal) {
                $data['proposals_ids'] .= $proposal->getProposalId() . '|';
//check account
                if (in_array($proposal->getClient()->getAccount()->getAccountId(), $users)) {
//check status
                    if (in_array($proposal->getProposalStatus()->getStatusId(), $statuses)) {
//check service
                        if ((($this->input->post('service')) && ($this->db->query("SELECT serviceId FROM proposal_services WHERE proposal=" . $proposal->getProposalId() . " AND initial_service=" . $this->input->post('service'))->num_rows())) || (!$this->input->post('service'))) {
//do magic here
                            $status = $proposal->getStatus();
                            $m_y = date('n', $proposal->getCreated(false)) . '-' . date('Y',
                                    $proposal->getCreated(false));
                            $data[$status][$m_y] += $proposal->getTotalPrice();
                            $data[$status]['Total'] += $proposal->getTotalPrice();

                        }
                    }
                }
            }
        }

        $raw_data = array();
        foreach ($statuses as $key => $val) {
            $row = array();
            $row[] = $statusTitles[$key];
            for ($i = 1; $i <= $k; $i++) {
                $row[] = $data[$key][$links[$i]];
            }
            $raw_data[] = $row;
        }
//Set up the return data
        //        $title .= ' - ' . $title_suffix;
        //        $title .= $title_suffix;
        //append the users to the title
        $title .= ' | Users: ';
        if ($this->input->post('service')) {
            $title .= ' | And service = ' . $this->input->post('service');
        }
        $count = 0;
        $user_names = '';
        foreach ($users as $uid) {
            $count++;
            $user = $this->em->find('models\Accounts', $uid);
            $title .= $user->getFullName();
            $user_names .= $user->getFullName();
            if ($count != count($users)) {
                $title .= ', ';
                $user_names .= ', ';
            }
        }
        $xLabels[] = 'TOTAL';
//override title again, to empty string
        $title = ' ';
        $result = array(
            'title' => $title,
            'h_title' => $h_title,
            'v_title' => $v_title,
            'xLabels' => $xLabels,
            'raw_data' => $raw_data,
            'user_names' => $user_names,
            'debug' => $data['proposals_ids'],
            'start' => $start,
            'end' => $end,
            'query' => "SELECT serviceId FROM proposal_services WHERE proposal=" . $proposal->getProposalId() . " AND initial_service=" . $this->input->post('service'),
        );
        echo json_encode($result);
//        mail('chris@rapidinjection.com', 'PMS Reports Debug', 'DATA:' . print_r($data, true) . 'RAW:' . print_r($raw_data, true) . 'LINK:' . print_r($links, true));
        $this->load->view('mail_memory_usage');
    }

    /**
     * @param $proposalId
     *
     *  Returns whether or not proposal has a snow removal category (in JSON format)
     */
    public function proposalServiceTypes($proposalId)
    {

        // Object for response
        $return = new stdClass();
        // Default to false
        $return->snow = 0;
        // Default to zero services
        $return->serviceCount = 0;

        // Load the proposal
        $proposal = $proposal = $this->em->find('models\Proposals', $proposalId);

        // Check loaded ok
        if ($proposal) {

            // Query the services
            $proposalServices = $this->em->createQuery('SELECT ps
                                                        FROM models\Proposal_services ps
                                                        WHERE ps.proposal=' . $proposal->getProposalId() . '
                                                        ORDER BY ps.ord, ps.serviceId')->getResult();

            // SPL time
            $ao = new ArrayObject($proposalServices);

            // Are there items?
            if ($ao->count()) {

                $return->serviceCount = $ao->count();
                $return->error = 0;

                $ai = $ao->getIterator();
                while ($ai->valid()) {

                    $proposalService = $ai->current();
                    /* @var $proposalService models\Proposal_services */

                    if ($proposalService) {
                        $service = $this->em->find('models\Services', $proposalService->getInitialService());
                        /* @var $service \models\Services */

                        // Check for snow
                        if ($service->getParent() == 105) {
                            // Set the flag
                            $return->snow = 1;
                        }
                    }
                    $ai->next();
                }
            } else {
                // there are no items, so no snow removal
                $return->error = 0;
                $return->snow = 0;
            }
        } else {
            $return->error = 1;
        }

        echo json_encode($return);

    }

    /** Return the details of this export for ajax */
    public function savedExportDetails()
    {
        $this->load->library('JsonResponse');
        $exportId = $this->uri->segment(3);

        $data = new JsonResponse();

        $export = $this->em->find('\models\SavedReport', $exportId);
        /* @var $export \models\SavedReport */

        // Check user permission
        if (!$this->account()->isAdministrator()) {
            $data->error = true;
        }

        // Check the export loaded
        if (!$export) {
            $data->error = true;
        }

        // Check the company permission
        if ($export->getCompany()->getCompanyId() !== $this->account()->getCompany()->getCompanyId()) {
            $data->error = true;
        }

        if (!$data->error) {
            $data->exportName = $export->getReportName();
            $data->user = $export->getAccount()->getFullName();
            $data->criteria = $export->getDisplayCriteria();
        }
        $data->send();
    }

    public function proposalAddService()
    {
        $response = [];
        $initial_service = $this->em->find('models\Services', $this->input->post('serviceId'));
        //Save service to database.
        $proposal_service = new \models\Proposal_services();
        $proposal_service->setOrd(99);
        $proposal_service->setPrice($this->input->post('price'));
        $proposal_service->setAmountQty($this->input->post('amountQty'));
        $proposal_service->setPricingType($this->input->post('pricingType'));
        $proposal_service->setMaterial($this->input->post('material'));
        $proposal_service->setProposal($this->input->post('proposal'));
        $proposal_service->setInitialService($this->input->post('serviceId'));
        $proposal_service->setOptional($this->input->post('option'));
        $proposal_service->setNoPrice($this->input->post('no_price'));
        $proposal_service->setMapAreaData($this->input->post('map_area_data'));

        $proposal_service->setIsEstimate($this->input->post('is_estimate'));
        $proposal_service->setIsHideInProposal($this->input->post('is_hide_proposal'));

        $proposal_service->setExcludeFromTotal($this->input->post('excludeFromTotals'));
        $proposal_service->setApproved(1);
        $approved = 1; // Flag for response
        //save service
        if (strstr($this->input->post('serviceName'), 'autocomplete=') == false) {
            $proposal_service->setServiceName($this->input->post('serviceName'));
        } else {
            $proposal_service->setServiceName($initial_service->getServiceName());
        }


        // Is it tax?
        $proposal_service->setTax(0);
        if ($initial_service->getTax()) {
            $proposal_service->setTax(1);
        }

        $this->em->persist($proposal_service);
        //mark proposal for rebuild
        $proposal = $this->em->findProposal($this->input->post('proposal'));
        if ($proposal) {
            $proposal->setRebuildFlag(1);
            if ($this->account()->getCompany()->hasQb()) {
                if ($this->account()->getCompany()->getQbType() == 'desktop') {
                    $proposal->updateQBDSyncFlag();

                }else{
                    $proposal->updateQBSyncFlag();
                }
            }
            $this->em->persist($proposal);
        }
        $this->em->flush();
        $response['proposalId'] = $proposal_service->getProposal();
        $response['id'] = $proposal_service->getServiceId();
        $texts = array();
        $k = 0;
        $txts = $this->input->post('texts');
        if (!$txts) {
            $txts = array();
        }
        foreach ($txts as $textValue) {

            $k++;
            $text = new \models\Proposal_services_texts();
            $text->setServiceId($proposal_service->getServiceId());
            $text->setText(htmlentities($textValue, ENT_QUOTES));
            $text->setOrd($k);
            $texts[$k] = $text;
            $this->em->persist($texts[$k]);
        }
        $k = 0;
        $fields = array();
        $fds = $this->input->post('fields');
        if (!$fds) {
            $fds = array();
        }
        foreach ($fds as $fieldCode => $fieldValue) {
            $k++;
            $field = new \models\Proposal_services_fields();
            $field->setServiceId($proposal_service->getServiceId());
            $field->setFieldCode($fieldCode);
            $field->setFieldValue($fieldValue);
            $fields[$k] = $field;
            $this->em->persist($fields[$k]);
        }

        $additionalText = '';

        // Handle Tax stuff //
        // Only check if the edited service isn't a tax service
        if (!$initial_service->getTax()) {
            // Now check if the proposal has a tax service
            if ($proposal->hasTaxService()) {
                $additionalText = '<br /><p style="text-align: center">Remember to edit your tax service if necessary</p>';
            }
        }

        $this->log_manager->add(\models\ActivityAction::ADD_PROPOSAL_SERVICE,
            'Added "' . $proposal_service->getServiceName() . '" to the proposal.', $proposal->getClient(), $proposal);
        $this->em->flush();
         updateProposalPrice($this->input->post('proposal'));
        $proposal_approval = 1;
        // Approval checks if the proposal owner requires approval
        if ($proposal->getOwner()->requiresApproval()) {

            // If it's an admin, approve it
            if ($this->account()->isAdministrator()) {
                $this->getProposalRepository()->approveService($proposal_service->getServiceId());
            } else {
                // Check the total price to see if this service need approval
                if ($proposal->getPrice() >= $this->account()->getApprovalLimit()) {
                    $this->getProposalRepository()->unapproveService($proposal_service->getServiceId());
                    $approved = 0;
                    $proposal->setApproved(0);
                    $this->em->persist($proposal);
                    $this->em->flush();
                    $proposal_approval = 0;
                } else {
                    // Otherwise we're ok
                    $this->getProposalRepository()->approveService($proposal_service->getServiceId());
                }
            }
            // Update the flag
            $this->getProposalRepository()->updateUnapprovedServices($proposal);

        }
        $this->getEstimationRepository()->updateProposalEstimate($proposal, false);

        // Update text field in proposal start
          //  Add custom checked start
            $customText = $this->em->getRepository('models\Customtext')
            ->findBy(array('service_id' => $this->input->post('serviceId')));
            $textValue = $proposal->getTexts();
            $categoryValue = $proposal->getTextsCategories();
            
             if(!empty($customText))
            {
                foreach ($customText as $item) {
                    $textId = $item->getTextId();
                    if (!in_array($textId, $textValue)) {
                        $textValue[] = $textId;
                    }

                    // For Category Updateion 
                        $CategoryId = $item->getCategory();
                        if (array_key_exists($CategoryId, $categoryValue)) {
                            $categoryValue[$CategoryId] = 1;
                        }
                }
                    $pairs = array();
                    // Loop through the original array
                    foreach ($categoryValue as $Ckey => $Cvalue) {
                        // Append each key:value pair to the $pairs array
                        $pairs[] = $Ckey . ':' . $Cvalue;
                    }
                    $CateResult = implode('|', $pairs);
           
                //For Category updation end 
                $newTextValue = implode(',', $textValue);
                $proposal->setTexts($newTextValue);
                $proposal->setTextsCategories($CateResult);
                $proposal->setRebuildFlag(1);
                $this->em->persist($proposal);
                $this->em->flush();

        } 
        
         //add custom checked close
        $response['TextId'] = $textValue;
        $response['categoryValue'] = (!empty($customText)) ? array($CategoryId=>1):array("not found category");
        $response['service_id'] = $this->input->post('serviceId');
        $response['optional'] = $proposal_service->getOptional();
        $response['noPrice'] = $proposal_service->getNoPrice();
        $response['hideInProposal'] = $proposal_service->getIsHideInProposal();
        $response['approved'] = $approved;
        $response['proposal_approval'] = $proposal_approval;
        $response['map_area_data'] = $proposal_service->getMapAreaData();
        //$this->session->set_flashdata('success', '<p style="text-align: center; padding-top: 10px;">Service Added!' . $additionalText);
        echo json_encode($response);
    }

    public function deleteProposalService($proposalServiceId)
    {

        if ($this->account()) {
            $response = [
                'id' => $proposalServiceId,
                'user_logged_in' => 1,
                'error' => 0,
            ];

            $service = $this->em->find('models\Proposal_services', $proposalServiceId);
            

            if ($service) {
                $serviceId = $service->getInitialService();
                $this->getProposalRepository()->deleteProposalService($service, $this->account());

                //mark proposal for rebuild
                $proposal = $this->em->findProposal($service->getProposal());
              
                // add a custom checked start
                    $textValue = $proposal->getTexts();
                    $categoryValue = $proposal->getTextsCategories();
                     
                    $customTextArray = $this->em->getRepository('models\Customtext')
                    ->findBy(array('service_id' => $serviceId));
                    // Step 1: Extract textId values from customTextArray
                    if(!empty($customTextArray))
                    {
                        $textIds = array_map(function($customText) {
                        return $customText->getTextId();
                        }, $customTextArray);

                        // Step 2: Remove textId values from array2
                        $textValue2 = array_filter($textValue, function($value) use ($textIds) {
                                return !in_array($value, $textIds);
                        });

                        $CategoryId="";
                        $CategoryId = $customTextArray[0]->getCategory();
                       
                        $combination =  $customText = $this->em->getRepository('models\Customtext')
                        ->findBy(array('category' => $CategoryId)); 
                         $result = $this->searchCustomTexts($combination, $textValue2,$CategoryId);
                         $cateResult = (!empty($result)) ? array($CategoryId=>1) :array($CategoryId=>0);//for updation response

                        //For updatation in database table
                         if (array_key_exists($CategoryId, $categoryValue)) {
                            $categoryValue[$CategoryId] = (!empty($result)) ? 1 : 0;
                        }
                        $pairs2 = array();
                        foreach ($categoryValue as $Ckey => $Cvalue) {
                            // Append each key:value pair to the $pairs2 array
                            $pairs2[] = $Ckey . ':' . $Cvalue;
                        }
                        $CateResult2 = implode('|', $pairs2);
  
                    }  
                    // add custom checked close
                 if ($proposal) {
                    $proposal->setRebuildFlag(1);
                    $this->em->persist($proposal);
                }
                updateProposalPrice($proposal->getProposalId());
                $this->getEstimationRepository()->updateProposalEstimate($proposal, false);
                // Check the total price to see if this service need approval
                if ($proposal->getPrice() <= $this->account()->getApprovalLimit()) {
                    $this->getProposalRepository()->approveAllServices($proposal->getProposalId());
                }

                if(!empty($textValue2) && !empty($customTextArray)){
                    $newTextValue2 = implode(',', $textValue2);
                    $proposal->setTexts($newTextValue2);
                    $proposal->setTextsCategories($CateResult2);
                    $this->em->persist($proposal);
                    $response['TextId'] = $textIds;                  
                    $response['categoryValue'] = (!empty($customTextArray)) ? $cateResult:array("not found category");
                    $response['customarray']=$customTextArray;

                }
                $response['service_id'] = $this->input->post('serviceId');
                $this->em->flush();
                $this->em->detach($service);
                $service = $this->em->find('models\Proposal_services', $proposalServiceId);

                if ($service) {
                    $response['error'] = 1;
                }
            } else {
                $response['error'] = 1;
            }

        } else {
            $response['error'] = 1;
            $response['user_loged_in'] = 0;
        }

        echo json_encode($response);
    }


   public  function searchCustomTexts($customTexts, $textValues,$CategoryId) {
    $exists = [];
        foreach ($textValues as $textId) {
            foreach ($customTexts as $customText) {
                if ($customText->getTextId() == $textId && $customText->getCategory() == $CategoryId) {
                      
                    $exists[] = $textId;

                }
            }
        }
        return  $exists;
    }
 
    public function deleteProposalImage($imageId)
    {
        $response = [
            'id' => $imageId,
            'error' => 0,
            'message' => '',
        ];

        $image = $this->em->findProposalImage($imageId);
        if (!$image) {
            $response['error'] = 1;
            $response['message'] = 'Image could not be loaded';
            echo json_encode($response);
            return;
        }

        $proposal = $image->getProposal();
        if (!$proposal) {
            $response['error'] = 1;
            $response['message'] = 'Proposal could not be loaded';
            echo json_encode($response);
            return;
        }

        $this->getProposalRepository()->deleteProposalImage($image, $this->account());

        $proposal->setRebuildFlag(1);
        $proposal->setImageCount($this->getProposalRepository()->getRealImageCount($proposal));
        $this->em->persist($proposal);
        $this->em->flush();

        echo json_encode($response);
    }

    public function moveServiceMapToMaps($imageId)
    {
        $response = [
            'id' => $imageId,
            'error' => 0,
            'message' => '',
        ];

        $image = $this->em->findProposalImage($imageId);
        if (!$image) {
            $response['error'] = 1;
            $response['message'] = 'Image could not be loaded';
            echo json_encode($response);
            return;
        }

        $proposal = $image->getProposal();
        $response['path'] = $image->getImage();
        if (!$proposal) {
            $response['error'] = 1;
            $response['message'] = 'Proposal could not be loaded';
            echo json_encode($response);
            return;
        }

        $image->setProposalServiceId(NULL);
        $this->em->persist($image);
        $proposal->setRebuildFlag(1);
        $this->em->persist($proposal);
        $this->em->flush();

        echo json_encode($response);
    }
    
    public function updateProposalImage($imageId)
    {
        $response = [
            'id' => $imageId,
            'error' => 0,
        ];
        $proposal_id = $this->input->get('proposal_id');
        $proposal = $this->em->findProposal($proposal_id);


        $image = $this->em->findProposalImage($imageId);

        // add history log for update image name start
           $oldImage = $image->getTitle();
           $newImage = $this->input->get('title');
           if(trim($oldImage)!=trim($newImage))
           {
               $image->setTitle($this->input->get('title'));
               $this->getLogRepository()->add([
                'action' => \models\ActivityAction::PROPOSAL_IMAGE_ADD_TO_PROPOSAL,
                'details' => "Image title is updated in Proposal",
                'proposal' => $proposal->getProposalId(),
                'account' => $this->account()->getAccountId(),
                'company' => $this->account()->getCompanyId(),
            ]);

           }
        // add history log for update image name end
        //add history log for image_layout start
         $oldImageLayout =  $image->getImageLayout();
         $newImageLayout = $this->input->get('image_layout');
         if($oldImageLayout!=$newImageLayout){
            $layout = ($newImageLayout == 0) ? 1 : (($newImageLayout == 1) ? 2 : 4);
            $image->setImageLayout($this->input->get('image_layout'));
             $this->getLogRepository()->add([
                'action' => \models\ActivityAction::PROPOSAL_IMAGE_LAYOUT_CHANGE,
                'details' => "Images Layout updated to $layout Images Per Page",
                'proposal' => $proposal->getProposalId(),
                'account' => $this->account()->getAccountId(),
                'company' => $this->account()->getCompanyId(),
            ]);
         }
        //add history log for image_layout close
        //add history log for image add & remove from proposal start
           $oldActive = $image->getActive();
           $newActive = $this->input->get('active');
           if($newActive!=$oldActive){
             $proposalIs = ($newActive==1)?"add in":"hide from";
             $image->setActive($this->input->get('active'));
             $this->getLogRepository()->add([
                'action' => ($newActive == 1) ? \models\ActivityAction::PROPOSAL_IMAGE_ADD_TO_PROPOSAL : \models\ActivityAction::PROPOSAL_IMAGE_REMOVE_FROM_PROPOSAL,
                'details' => "Image $proposalIs proposal",
                'proposal' => $proposal->getProposalId(),
                'account' => $this->account()->getAccountId(),
                'company' => $this->account()->getCompanyId(),
            ]);
           }
        //add history log for image add & remove from proposal close
         
        // add history log for image add & remove from work order start
         $oldActiveWo =  $image->getActivewo();
         $newActiveWo =  $this->input->get('activewo');
         if($oldActiveWo!=$newActiveWo){
            $WorkOrder= ($newActiveWo==1)?"add in":"hide from";
            $image->setActivewo($this->input->get('activewo'));
            $this->getLogRepository()->add([
            'action' => ($newActiveWo == 1) ? \models\ActivityAction::PROPOSAL_IMAGE_ADD_TO_WORKORDER : \models\ActivityAction::PROPOSAL_IMAGE_REMOVE_FROM_WORKORDER,
            'details' => "Image $WorkOrder workorder",
            'proposal' => $proposal->getProposalId(),
            'account' => $this->account()->getAccountId(),
            'company' => $this->account()->getCompanyId(),
        ]);
         }

        // add history log for image add & remove from work order close



        if($this->input->get('service_id')){
            $image->setProposalServiceId($this->input->get('service_id'));
        }

    
        
        $this->em->persist($image);

        $proposal = $image->getProposal();
        $proposal->setRebuildFlag(1);
        $this->em->persist($proposal);

        $this->em->flush();

        $response['title'] = $this->input->get('title');

        echo json_encode($response);
    }

    public function updateProposalServicesOrder()
    {
        $services = array();
        $order = $this->input->post('service');
        if (!is_array($order)) {
            $order = array();
        }
        foreach ($order as $ord => $sId) {
            $service = $this->em->find('models\Proposal_services', $sId);
            if ($service) {
                $service->setOrd($ord);
                $services[$sId] = $service;
                $this->em->persist($services[$sId]);
            }
        }

        // Rebuild if necessary
        if ($this->input->post('rebuild')) {
            $proposal = $this->em->findProposal($service->getProposal());
            if ($proposal) {
                $proposal->setRebuildFlag(1);
                $this->em->persist($proposal);
            }
        }

        $this->em->flush();
    }

    public function getProposalServiceDetails($id)
    {
        $return = array();
        $return['error'] = 0;
        $service = $this->em->find('models\Proposal_services', $id);
        if (!$service) {
            $return['error'] = 1;
        } else {
            $this->load->database();
            $return['serviceName'] = $service->getServiceName();
            $return['serviceId'] = $service->getServiceId();
            $texts = array();
            $text_ids = array();
            $txts = $this->em->createQuery('SELECT t FROM models\Proposal_services_texts t WHERE t.serviceId=' . $id . ' ORDER BY t.ord')->getResult();

            foreach ($txts as $text) {
                $texts[] = html_entity_decode($text->getText());
                $text_ids[] = $text->getTextId();
            }
            $return['texts'] = $texts;
            $return['text_ids'] = $text_ids;
            $fields = array();
            //$fds = $this->em->createQuery('select f from models\ServiceField f where f.service=' . $service->getInitialService() . ' order by f.ord')->getResult();
            $fds = $this->account()->getCompany()->getServiceFields($service->getInitialService());
            foreach ($fds as $field) {
                //create field Code
                $fieldCodes = '<p class="clearfix"><label>' . $field->getFieldName() . '</label>';
                //check if we got field values, who knows we may have not any ?!
                $fieldValue = $field->getFieldValue();
                $savedValue = $this->em->getRepository('models\Proposal_services_fields')->findOneBy(array(
                    'serviceId' => $service->getServiceId(),
                    'fieldCode' => $field->getFieldCode(),
                ));
                if ($savedValue) {
                    $fieldValue = $savedValue->getFieldValue();
                }
                switch ($field->getFieldType()) {
                    case 'number':
                        $fieldCodes .= '<input class="field field-numberFormat" type="number" name="' . $field->getFieldCode() . '" id="' . $field->getFieldCode() . '" value="' . $fieldValue . '">';
                        break;
                    case 'text':
                        $fieldCodes .= '<input class="field" type="text" name="' . $field->getFieldCode() . '" id="' . $field->getFieldCode() . '" value="' . $fieldValue . '">';
                        break;
                    case 'select':
                        $fieldCodes .= '<select name="' . $field->getFieldCode() . '" id="' . $field->getFieldCode() . '" class="field">';
                        $options = explode("\n", $field->getFieldValue());
                        if (!in_array($fieldValue, $options) && ($savedValue)) {
                            $options[] = $fieldValue;
                        }
                        foreach ($options as $option) {
                            if ($option) {
                                if ($fieldValue == $option) {
                                    $fieldCodes .= '<option selected="selected">';
                                } else {
                                    $fieldCodes .= '<option>';
                                }
                                $fieldCodes .= $option . '</option>';
                            }
                        }
                        $fieldCodes .= '</select>';
                        break;
                    case 'textarea':
                        $fieldCodes .= '<textarea id="' . $field->getFieldCode() . '" class="field" name="' . $field->getFieldCode() . '">' . $fieldValue . '</textarea>';
                        break;
                }
                $fieldCodes .= '</p>';
                $fields[] = $fieldCodes;
            }
            //calculator buttons
            switch ($service->getInitialService()) {
                case 'z27':
                    $fields[] = '<p class="clearfix" style="text-align: center;">
                    If you want to calculate a new price or edit any existing data, click the following button: <br>
                    <a class="btn update-button editSealcoatingService">Calculate New Price</a>
                    </p>';
                    break;
            }

            $fields[] = '<p class="clearfix"><label>Map Area</label><input class="field " name="edit_map_area_data" id="edit_map_area_data" value="' . $service->getMapAreaData() . '" ></p>';

            $fields[] = '<h4 style="text-align: center;">Pricing</h4>';

            $initialService = $this->em->find('models\Services', $service->getInitialService());

 
            if (($service->getInitialService() == SNOW_CATEGORY) || $initialService->getParent() == SNOW_CATEGORY) {
                $pricingTypeCode = '';
                $optionChecked = $service->isOptional() ? 'checked="checked"' : '';

                foreach ($this->servicePricingTypes as $label => $type) {
                    $selected = '';
                    if ($service->getPricingType() == $type) {
                        $selected = ' selected="selected"';
                    }
                    $pricingTypeCode .= '<option' . $selected . ' value="' . $type . '">' . $label . '</option>';
                }
                $fields[] = '<p class="clearfix"><label>Optional Service</label><input type="checkbox"' . $optionChecked . ' name="editOptional" id="editOptional" style="width: 14px; padding: 0; margin: 3px 0;"></p>';
                $fields[] = '<p class="clearfix"><label>Pricing Type</label><select name="pricingType" id="pricingType">' . $pricingTypeCode . '</select></p> ';
                $fields[] = '<p class="clearfix" id="materials-container"><label>Choose Material</label>' . form_dropdown('material',
                        $this->materials, $service->getMaterial(), ' id="material"') . '</p>';
                $fields[] = '<p class="clearfix" id="price-container"><label id="price-label">Price</label><input type = "text" name = "price" class="field-priceFormat" id = "editPrice" value = "' . $service->getPrice() . '"></p> ';
                $fields[] = '<p class="clearfix amount-container"><label id="amount-label">Frequency</label><input type = "text" name = "amountQty" class="field-numberFormat" id = "amountQty" value = "' . $service->getAmountQty() . '"></p>';
                $fields[] = '<p class="clearfix amount-container">
                <label id="total">Total Amount</label>
                <input type="text" class="priceFormat" disabled value="$0" id="totalCalculated" />
                </p> ';

            } else {
                if ($initialService->getTax()) {
                    $excludeChecked = $service->getExcludeFromTotal() ? 'checked="checked"' : '';
                    $fields[] = '<p class="clearfix" id="price-container"><label id="price-label">Price</label><input type = "text" name = "price" class="field-priceFormat" id = "editPrice" value = "' . $service->getPrice() . '"></p> ';
                    //$fields[] = '<p class="clearfix"><label style="width: 135px;">Exclude from Totals</label><input type="checkbox"' . $excludeChecked . ' name="edit_exclude_total" id="edit_exclude_total" style="width: 14px; padding: 0; margin: 3px 0;"></p>';
                } else {
                    $noPriceChecked = $service->isNoPrice() ? 'checked="checked"' : '';
                    $optionChecked = $service->isOptional() ? 'checked="checked"' : '';
                    $estimatorChecked = $service->getIsEstimate() ? 'checked="checked"' : '';
                    $isHideInProposal = $service->getIsHideInProposal() ? 'checked="checked"' : '';
                    $priceShow = $service->getIsEstimate() ? 'none' : 'block';
                    //$estimatorChecked = 'checked="checked"';

                    $fields[] = '<p class="clearfix"><label>No Price</label><input type="checkbox"' . $noPriceChecked . ' name="edit_no_price" id="edit_no_price" style="width: 14px; padding: 0; margin: 3px 0;"></p>';
                    $fields[] = '<p class="clearfix"><label>Optional Service</label><input type="checkbox"' . $optionChecked . ' name="editOptional" id="editOptional" style="width: 14px; padding: 0; margin: 3px 0;"></p>';
                    if ($this->account()->hasEstimatingPermission()) {

                        $fields[] = '<p class="clearfix"><label>Use Estimator</label><input type="checkbox" ' . $estimatorChecked . ' name="enable_service_estimate" id="enable_service_estimate" style="width: 14px; padding: 0; margin: 3px 0;"></p>';
                    }
                    else{
                       // $priceShow = 'block';
                       if($service->getIsEstimate()){
                        $fields[] = '<p class="clearfix"><label>Use Estimator</label><input type="checkbox" checked="checked" disabled="disabled" name="enable_service_estimate" id="enable_service_estimate" style="width: 14px; padding: 0; margin: 3px 0;"></p>';
                       }
                    }

                    $fields[] = '<p class="clearfix" ><label>Hidden <i class="fa fa-fw fa-info-circle tiptipright" style="cursor:pointer;" title="If checked, this service will not appear in the proposal and will not be included in the price"></i></label><input type="checkbox" ' . $isHideInProposal . ' name="hide_from_proposal" id="hide_from_proposal" style="width: 14px; padding: 0; margin: 3px 0;"></p>';
                    $fields[] = '<p class="clearfix" id="price-container"  style="display:' . $priceShow . '"><label id="price-label">Price</label><input type = "text" name = "price" class="field-priceFormat" id = "editPrice" value = "' . $service->getPrice() . '"></p> ';
                    //$fields[] = '<a href="JavaScript:void(0);" class="btn update-button saveIcon" style="position: absolute;margin-top: 31px;right:0px;" id="editServiceCopyButton">Save</a>';
                }
            }
            $return['estimateItemCount'] = (int)$this->getEstimationRepository()->getProposalServiceLineItemsCount($id);
            $return['fields'] = $fields;

            $serviceImageIds = array();
            $serviceImageTitles = array();
            $serviceImagePaths = array();
            $serviceImageActives = array();
            $serviceImageWos = array();
            $serviceImageNotes = array();

            $serviceImageQuery = 'SELECT pm FROM models\Proposals_images pm 
                                WHERE pm.proposal_service_id=' . $id . ' AND pm.map = 0
                                ORDER BY pm.ord';

            $serviceImages = $this->em->createQuery($serviceImageQuery)->getResult();

            foreach ($serviceImages as $serviceImage) {
                $serviceImageIds[] = $serviceImage->getImageId();
                $serviceImageTitles[] = $serviceImage->getTitle();
                $serviceImageNotes[] = $serviceImage->getNotes();
                $serviceImagePaths[] = $serviceImage->getImage();
                $serviceImageActives[] = $serviceImage->getActive();
                $serviceImageWos[] = $serviceImage->getActivewo();

            }

            $return['serviceImageIds'] = $serviceImageIds;
            $return['serviceImageTitles'] = $serviceImageTitles;
            $return['serviceImagePaths'] = $serviceImagePaths;
            $return['serviceImageActives'] = $serviceImageActives;
            $return['serviceImageWos'] = $serviceImageWos;
            $return['serviceImageNotes'] = $serviceImageNotes;


            //Service Map Image
            $serviceMapImageIds = array();
            $serviceMapImageTitles = array();
            $serviceMapImagePaths = array();
            $serviceMapImageActives = array();
            $serviceMapImageWos = array();
            $serviceMapImageNotes = array();

            $serviceMapImageQuery = 'SELECT pm FROM models\Proposals_images pm 
                                WHERE pm.proposal_service_id=' . $id . ' AND pm.map = 1
                                ORDER BY pm.ord';

            $serviceMapImages = $this->em->createQuery($serviceMapImageQuery)->getResult();

            foreach ($serviceMapImages as $serviceMapImage) {
                $serviceMapImageIds[] = $serviceMapImage->getImageId();
                $serviceMapImageTitles[] = $serviceMapImage->getTitle();
                $serviceMapImageNotes[] = $serviceMapImage->getNotes();
                $serviceMapImagePaths[] = $serviceMapImage->getImage();
                $serviceMapImageActives[] = $serviceMapImage->getActive();
                $serviceMapImageWos[] = $serviceMapImage->getActivewo();

            }

            $return['serviceMapImageIds'] = $serviceMapImageIds;
            $return['serviceMapImageTitles'] = $serviceMapImageTitles;
            $return['serviceMapImagePaths'] = $serviceMapImagePaths;
            $return['serviceMapImageActives'] = $serviceMapImageActives;
            $return['serviceMapImageWos'] = $serviceMapImageWos;
            $return['serviceMapImageNotes'] = $serviceMapImageNotes;
            
        }

        echo json_encode($return);
    }

    public function proposalEditService()
    {

        $this->load->database();
        /* @var $service models\Proposal_services */
        $service = $this->em->find('models\Proposal_services', $this->input->post('serviceId'));

        // We need the old fields for comparison
        $oldFields = $this->getProposalRepository()->getIndexedSavedProposalServiceFields($service);
        $oldPrice = $service->getPrice();
        $oldServiceName = $service->getServiceName();
        $oldServiceMapArea = $service->getMapAreaData();
        $oldServiceHideInProposal = $service->getIsHideInProposal();
        $old_text_ids = [];

        if (!$service) {
            $this->session->set_flashdata('error',
                'Service not found! Please try again in a bit and notify us if this happens often!');
        } else {

            $proposal = $this->em->findProposal($service->getProposal());

            //save service
            if (strstr($this->input->post('serviceName'), 'autocomplete=') == false) {
                $service->setServiceName($this->input->post('serviceName'));
            }
            $service->setNoPrice($this->input->post('noPrice'));
            $service->setOptional($this->input->post('option'));
            $service->setIsEstimate($this->input->post('isEstimate'));
            $service->setIsHideInProposal($this->input->post('isHideInProposal'));
            $service->setPrice($this->input->post('price'));
            $service->setAmountQty($this->input->post('amountQty'));
            $service->setPricingType($this->input->post('pricingType'));
            $service->setMaterial($this->input->post('material'));
            $service->setMapAreaData($this->input->post('edit_map_area_data'));
            $this->em->persist($service);
            //save texts

            $txts = $this->em->createQuery('SELECT t FROM models\Proposal_services_texts t WHERE t.serviceId=' . $service->getServiceId() . ' ORDER BY t.ord')->getResult();
            foreach ($txts as $text) {
                $old_texts[] = trim($text->getText());
                $old_text_ids[] = $text->getTextId();
            }


            $if_text_fields = false;
            $if_text_fields2 = false;
            $if_text_fields3 = false;
            $logString3 = '';
            $logString5 = '';
            $logString6 = '';
            $k = 0;
            $txts = $this->input->post('texts');
            if (!$txts) {
                $txts = array();
            }

            $text_ids = $this->input->post('text_ids');
            if (!$text_ids) {
                $text_ids = array();
            }


            $t = 0;
            $all_text_array = array();
            foreach ($txts as $textValue) {


                if (count($text_ids) > $t) {

                    if ($text_ids[$t]) {

                        $old_txts = $this->em->createQuery('SELECT t FROM models\Proposal_services_texts t WHERE t.textId=' . $text_ids[$t])->getResult();

                        if ($old_txts) {
                            if (strip_tags($old_txts[0]->getText()) != strip_tags($textValue)) {

                                $k++;
                                $if_text_fields = true;

                                $logString3 .= '<strong>Text :</strong> Updated to ' . trim($textValue) . '<br />';
                            }
                        }

                    }
                } else {
                    $if_text_fields2 = true;
                    $num = $t + 1;
                    $logString5 .= trim($textValue) . '<br />';
                }
                $t++;

            }


            if (count($old_text_ids) && $text_ids) {
                $delete_ids = array_diff($old_text_ids, $text_ids);
                if (is_array($delete_ids)) {


                    foreach ($delete_ids as $delete_id) {
                        $if_text_fields3 = true;
                        $old_txts = $this->em->createQuery('SELECT t FROM models\Proposal_services_texts t WHERE t.textId=' . $delete_id)->getResult();
                        $logString6 .= '<strong>Text :</strong> ' . trim($old_txts[0]->getText()) . ' <br />';
                    }
                }
            }

            $this->db->query('DELETE FROM proposal_services_texts WHERE serviceId=' . $service->getServiceId());

            $k = 0;
            // Save the texts
            foreach ($txts as $textValue) {
                //echo $textValue;die;
                $k++;
                $text = new \models\Proposal_services_texts();
                $text->setServiceId($service->getServiceId());
                $text->setText(htmlentities($textValue, ENT_QUOTES));
                $text->setOrd($k);
                $texts[$k] = $text;
                $this->em->persist($texts[$k]);
            }

            if ($if_text_fields) {
                $logString3 = '<strong>Text Updated</strong> <br/>' . $logString3;
            }

            if ($if_text_fields2) {
                $logString5 = '<strong>Text Added</strong> <br/>' . $logString5;
            }
            if ($if_text_fields3) {
                $logString6 = '<strong>Text Deleted</strong> <br/>' . $logString6;
            }

            // Save the fields
            $fds = $this->input->post('fields');
            if (!$fds) {
                $fds = array();
            }
            $if_fields_edited = false;
            $logString2 = '';
            $k = 0;
            foreach ($fds as $fieldCode => $fieldValue) {
                $k++;
                $sid = $service->getServiceId();
                $sql = "SELECT t FROM models\Proposal_services_fields t WHERE t.serviceId=" . $sid . " AND t.fieldCode='" . $fieldCode . "'";
                // die;
                $old_field = $this->em->createQuery($sql)->getResult();


                if (isset($old_field[0]) && $old_field[0]->getFieldValue() != $fieldValue) {
                    $sql2 = "SELECT t FROM models\ServiceField t WHERE  t.fieldCode='" . $fieldCode . "'";

                    $field_detail = $this->em->createQuery($sql2)->getResult();
                    if ($field_detail) {
                        $if_fields_edited = true;
                        $logString2 .= '<strong>' . $field_detail[0]->getFieldName() . ':</strong> Updated from ' .
                            $old_field[0]->getFieldValue() . ' to ' . $fieldValue . '<br />';
                    }
                }


                $this->db->query('DELETE FROM proposal_services_fields WHERE serviceId=' . $service->getServiceId() . " AND fieldCode='" . $fieldCode . "'");
                $field = new \models\Proposal_services_fields();
                $field->setServiceId($service->getServiceId());
                $field->setFieldCode($fieldCode);

                $field->setFieldValue($fieldValue);
                $fields[$k] = $field;
                $this->em->persist($fields[$k]);

            }

            if ($if_fields_edited) {
                $logString2 = 'Service Fields Updated:<br/>' . $logString2;
            }

            $logString4 = '';
            $logString7 = '';
            $logString8 = '';
            $logString9 = '';
            if ($oldPrice != $service->getPrice()) {
                $logString4 = '<br />' . '<strong>Price</strong>: changed from ' . $oldPrice . ' to ' . $service->getPrice();
            }
            if ($oldServiceName != $service->getServiceName()) {
                $logString7 = '<br />' . '<strong>Service Name</strong>: changed from "' . $oldServiceName . '" to "' . $service->getServiceName() . '"';
            }
            if ($oldServiceHideInProposal != $service->getIsHideInProposal()) {
                $logString8 = ($service->getIsHideInProposal()) ? '<br />' . '<strong>Service </strong>: Hide in Proposal ' : '<br />' . '<strong>Service </strong>: Show in Proposal ';

            }
            if ($oldServiceMapArea != $service->getMapAreaData()) {
                if ($oldServiceMapArea == '') {
                    $logString9 = '<br />' . '<strong>Map Area </strong>: Added <strong>' . $service->getMapAreaData() . '</strong>';
                } else if ($service->getMapAreaData() == '') {
                    $logString9 = '<br />' . '<strong>Map Area </strong>: Deleted <strong>' . $oldServiceMapArea . '</strong>';
                } else {
                    $logString9 = '<br />' . '<strong>Map Area </strong>: Changed From <strong>' . $oldServiceMapArea . '</strong> To <strong>' . $service->getMapAreaData() . '</strong>';
                }

            }


            $logStringMerge = $logString3 . $logString5 . $logString6 . $logString2 . $logString4 . $logString7 . $logString8 . $logString9;
            // Flag proposal for rebuild

            if ($logStringMerge) {
                $this->log_manager->add(\models\ActivityAction::EDIT_PROPOSAL_SERVICE,
                    'Edited Service "' . $service->getServiceName() . '" <br/><br/>' . $logStringMerge, $proposal->getClient(), $proposal);
                if ($proposal) {
                    $proposal->setRebuildFlag(1);
                   
                    $this->em->persist($proposal);
                }
            }

            $additionalText = '';

            // Handle Tax stuff //
            // Only check if the edited service isn't a tax service
            if (!$service->getTax()) {
                // Now check if the proposal has a tax service
                if ($proposal->hasTaxService()) {
                    $additionalText = '<br /><p style="text-align: center">Remember to edit your tax service if necessary</p>';
                }
            }

            $this->em->flush();
            updateProposalPrice($service->getProposal());
            $proposal_approval = 1;
            // New fields for comparison
            $newFields = $this->getProposalRepository()->getIndexedSavedProposalServiceFields($service);
            // if($oldFields){
            //     $fieldChanges = $this->getProposalRepository()->getProposalServiceDifferences($oldFields, $newFields);
            // }


            // Approval checks if the proposal owner requires approval
            if ($proposal->getOwner()->requiresApproval()) {

                $approver = null;

                // If it's an admin, approve it
                if ($this->account()->isAdministrator()) {
                    $this->getProposalRepository()->approveService($service->getServiceId());
                    $approver = $this->account();
                } else {
                    // Check the total price to see if this service need approval
                    if ($proposal->getPrice() >= $this->account()->getApprovalLimit()) {
                        $this->getProposalRepository()->unapproveService($service->getServiceId());
                        $proposal->setApproved(0);
                        $this->em->persist($proposal);
                        $this->em->flush();
                        $proposal_approval = 0;
                    } else {
                        // Otherwise we're ok
                        $this->getProposalRepository()->approveService($service->getServiceId());
                    }
                }
                // Update the flag
                $this->getProposalRepository()->updateUnapprovedServices($proposal, $approver);
            }

            // Log it //

            // Base String
            $logString = 'Edited Service "' . $service->getServiceName() . '" <br/>';

            // Field Changes
            if ($oldFields) {
                $changesString = $this->getProposalRepository()->getFieldsChangedText($oldFields, $newFields);

                if ($changesString) {
                    $logString .= '<br />' . $changesString;
                }
            }


            if (isset($changesString) && $changesString != '') {
                $lineItems = $this->getEstimationRepository()->getAllProposalServiceLineItems($this->input->post('serviceId'));

                foreach ($lineItems as $lineItem) {
                    $calculator = $this->getEstimationRepository()->getEstimateCalculatorValue($lineItem->getId());
                    if ($calculator) {

                        $newdata = json_decode(json_encode(json_decode($calculator[0]['saved_values'])), true);

                        $tempdata = array();
                        $need_recalculate = false;
                        foreach ($newdata as $data) {
                            if (array_key_exists("field_code", $data)) {
                                if ($fds[$data['field_code']]) {
                                    $data['value'] = $fds[$data['field_code']];
                                    $need_recalculate = true;
                                }

                            }
                            $tempdata[] = $data;
                        }
                        if ($need_recalculate) {
                            $this->recalculate_estimate($tempdata, $lineItem, $calculator[0]['calculator_name']);

                            $scv = $this->em->find('models\EstimationCalculatorValue', $calculator[0]['id']);

                            $valuesText = json_encode($tempdata);

                            $scv->setSavedValues($valuesText);
                            $this->em->persist($scv);
                            $this->em->flush();

                            //if perant has trucking child then update trucking child
                            $childTruckingItems = $this->getEstimationRepository()->getChildTruckingItems($lineItem->getId());

                            foreach ($childTruckingItems as $childTruckingItem) {

                                $calculator = $this->getEstimationRepository()->getEstimateCalculatorValue($childTruckingItem->id);
                                if ($calculator) {
                                    $formdata = json_decode(json_encode(json_decode($calculator[0]['saved_values'])), true);
                                    $this->recalculate_child_trucking_estimate($formdata, $childTruckingItem, $lineItem->getQuantity(), $calculator[0]['id']);
                                }

                            }
                            //if perent is sealcoating type Item
                            if ($calculator[0]['calculator_name'] == 'sealcoating_form') {
                                //get the child sand and additive items

                                $this->getEstimationRepository()->clearsealcoatdefualtchild($lineItem->getId());
                                //foreach($sealcoatDefaultChildItems as $sealcoatDefaultChildItem){
                                $this->sealcote_default_child_save($tempdata, $lineItem);

                                //}
                            }

                        }

                    }

                }
            }

            //Update Service Image Data

            $service_images = $this->input->post('images');
            if(is_array($service_images)){
                foreach($service_images as $service_image){
                    
                    $image = $this->em->findProposalImage($service_image['image_id']);
                    $image->setTitle($service_image['image_title']);
                    $image->setActive($service_image['image_proposal_check']);
                    $image->setActivewo($service_image['image_wo_check']);
                    $this->em->persist($image);
                    $this->em->flush();
                }
            }
            // Update QB if required
            if ($proposal) {
                $proposal->setRebuildFlag(1);
                if ($this->account()->getCompany()->hasQb()) {
                    if ($this->account()->getCompany()->getQbType() == 'desktop') {
                        $proposal->updateQBDSyncFlag();
    
                    }else{
                        $proposal->updateQBSyncFlag();
                    }
                }
                $this->em->persist($proposal);
                $this->em->flush();
            }

            $response = [
                'id' => $service->getServiceId(),
                'additionalText' => $additionalText,
                'optional' => $service->getOptional(),
                'approved' => $service->getApproved(),
                'noPrice' => $service->getNoPrice(),
                'hideInProposal' => $service->getIsHideInProposal(),
                'map_area_data' => $service->getMapAreaData(),
                'oldPrice' => $oldPrice,
                'proposal_approval' => $proposal_approval,
                'rebuild' => $proposal->getRebuildFlag()
            ];

            echo json_encode($response);
        }
    }

    public function proposalSaveImage()
    {
        set_time_limit(120);

        $data = [
            'error' => 0,
        ];
        $proposal = $this->em->findProposal($this->input->post('proposalId'));

        if (!$proposal) {
            $data['error'] = 1;
            $data['message'] = "Unable to load proposal. Proposal ID: " . $this->input->post('proposalId');
            echo json_encode($data);
            return;
        }

        $imgData = [
            'imgUrl' => $this->input->post('imgUrl'),
        ];

        $uploadedImage = $this->getProposalRepository()->saveProposalImage($proposal, $imgData);

        $logString = 'New Image Uploaded';
        $this->log_manager->add(\models\ActivityAction::ADD_PROPOSAL_IMAGE, $logString, $proposal->getClient(), $proposal);

        if (!$uploadedImage) {
            $data['error'] = 1;
        } else {
            $data['id'] = $uploadedImage->getImageId();
            $data['path'] = $uploadedImage->getImage();
        }

        echo json_encode($data);
    }

    public function changeProposalLayout($proposalId, $layout)
    {
        $proposal = $this->em->find('models\Proposals', $proposalId);
        if ($proposal) {
            $proposal->setLayout($layout);
            $proposal->setRebuildFlag(1);
            $this->em->persist($proposal);
            $this->em->flush();
            $this->session->set_flashdata('success', 'Layout changed!');
        }
    }

    public function sort_proposals()
    {
        //sort proposals items actually!
        $items = array();
        foreach ($_POST['item'] as $ord => $item) {
            $proposalItem = $this->em->find('models\Proposals_items', $item);
            $proposalItem->setOrder($ord);
            $items[$proposalItem->getLinkId()] = $proposalItem;
            $this->em->persist($items[$proposalItem->getLinkId()]);
        }
        $proposal = $proposalItem->getProposal();
        $proposal->setRebuildFlag(1);
        $this->em->persist($proposal);
        $this->em->flush();
        $this->em->clear();
    }

    public function sort_proposalImages()
    {
        $items = array();
        //        mail('chris@rapidinjection.com', 'proposal images sort', print_r($_POST, true));
        foreach ($_POST['image'] as $ord => $item) {
            $proposalImage = $this->em->find('models\Proposals_images', $item);
            $proposalImage->setOrder($ord);
            $items[$proposalImage->getImageId()] = $proposalImage;
            $this->em->persist($items[$proposalImage->getImageId()]);
        }
        $proposal = $proposalImage->getProposal();
        $proposal->setRebuildFlag(1);
        $this->em->persist($proposal);
        $this->em->flush();
        $this->em->clear();
    }

    

    public function sort_proposalServiceImages()
    {
        $items = array();
        //        mail('chris@rapidinjection.com', 'proposal images sort', print_r($_POST, true));
        foreach ($_POST['image'] as $ord => $item) {
            $proposalImage = $this->em->find('models\Proposals_images', $item);
            $proposalImage->setOrder($ord);
            $items[$proposalImage->getImageId()] = $proposalImage;
            $this->em->persist($items[$proposalImage->getImageId()]);
        }
        $proposal = $proposalImage->getProposal();
        $proposal->setRebuildFlag(1);
        $this->em->persist($proposal);
        $this->em->flush();
        $this->em->clear();
    }

    public function sort_proposalVideos()
    {
        $items = array();
        $proposalId = '';


        foreach ($_POST['video'] as $ord => $item) {
            $proposalVideo = $this->em->find('models\ProposalVideo', $item);
            $proposalVideo->setOrd($ord);

            $this->em->persist($proposalVideo);
            $proposalId = $proposalVideo->getProposalId();
        }

        $proposal = $this->em->findProposal($proposalId);
        $proposal->setRebuildFlag(1);
        $this->em->persist($proposal);
        $this->em->flush();
        $this->em->clear();
    }

    public function getSnowServiceDetails($id)
    {
        $return = array();
        $return['error'] = 0;
        $service = $this->em->find('models\Services', $id);
        if (!$service) {
            $return['error'] = 1;
        } else {
            $this->load->database();
            $return['serviceName'] = $service->getServiceName();
            $customTitle = $this->em->getRepository('models\Service_titles')->findOneBy(array(
                'company' => $this->account()->getCompany()->getCompanyId(),
                'service' => $service->getServiceId(),
            ));
            if ($customTitle) {
                $return['serviceName'] = $customTitle->getTitle();
            }
            $texts = array();
            $q = "SELECT st.*, sdt.linkId, sdt.replacedBy FROM service_texts st
                    LEFT JOIN service_texts_order sto ON (st.textId = sto.textId)
                    LEFT JOIN service_deleted_texts sdt ON ((st.textId = sdt.textId) AND (sdt.company = " . $this->account()->getCompany()->getCompanyId() . "))
                    WHERE ((st.service = " . $service->getServiceId() . ") AND (st.company = " . $this->account()->getCompany()->getCompanyId() . " OR st.company = 0))
                    ORDER BY COALESCE( sto.ord, 999999 ) , st.ord";
            $q = "SELECT DISTINCT(st.textId), sdt.linkId, sdt.replacedBy FROM service_texts st
                    LEFT JOIN service_texts_order sto ON (st.textId = sto.textId AND sto.company=" . $this->account()->getCompany()->getCompanyId() . ")
                    LEFT JOIN service_deleted_texts sdt ON ((st.textId = sdt.textId) AND (sdt.company = " . $this->account()->getCompany()->getCompanyId() . "))
                    WHERE ((st.service = " . $service->getServiceId() . ") AND (st.company = " . $this->account()->getCompany()->getCompanyId() . " OR st.company = 0))
                    ORDER BY COALESCE( sto.ord, 999999 ) , st.ord";
            $txts = $this->db->query($q);
            foreach ($txts->result() as $txt) {
                $text = $this->em->find('models\ServiceText', $txt->textId);
                if ($text) {
                    $texts[$txt->textId] = array(
                        'text' => $text,
                        'deleted' => $txt->linkId,
                        'replacedBy' => $txt->replacedBy,
                    );
                }
            }
            //move deleted to last and replaced texts under the item that replaces them
            foreach ($texts as $id => $text) {
                if ($text['deleted'] && $text['replacedBy'] && isset($texts[$text['replacedBy']])) {
                    unset($texts[$id]);
                    $texts[$text['replacedBy']]['replacedText'] = $text;
                } elseif ($text['deleted']) {
                    unset($texts[$id]);
                    //$texts[$id] = $text;
                }
            }
            $texts2 = array();
            foreach ($texts as $txt) {
                $text = $txt['text'];
                if (!$txt['deleted']) {
                    $texts2[] = $text->getText();
                }
            }
            $return['texts'] = $texts2;
            $fields = array();
            $fds = $this->em->createQuery('SELECT f FROM models\ServiceField f WHERE f.service=' . $service->getServiceId() . ' ORDER BY f.ord')->getResult();
            $k = 0;
            foreach ($fds as $field) {
                $k++;
                $class = '';
                if ($k % 2) {
                    $class = ' odd';
                }
                //create field Code
                $fieldCode = '<p class="clearfix' . $class . '"><label>' . $field->getFieldName() . '</label>';
                switch ($field->getFieldType()) {
                    case 'number':
                        $fieldCode .= '<input class="field field-numberFormat" type="text" name="' . $field->getFieldCode() . '" id="' . $field->getFieldCode() . '" value="' . $field->getFieldValue() . '">';
                        break;
                    case 'text':
                        $fieldCode .= '<input class="field" type="text" name="' . $field->getFieldCode() . '" id="' . $field->getFieldCode() . '" value="' . $field->getFieldValue() . '">';
                        break;
                    case 'select':
                        $fieldCode .= '<select name="' . $field->getFieldCode() . '" id="' . $field->getFieldCode() . '" class="field">';
                        $options = explode("\n", $field->getFieldValue());
                        foreach ($options as $option) {
                            if ($option) {
                                $fieldCode .= '<option>' . $option . '</option>';
                            }
                        }
                        $fieldCode .= '</select>';
                        break;
                    case 'textarea':
                        $fieldCode .= '<textarea id="' . $field->getFieldCode() . '" class="field" name="' . $field->getFieldCode() . '">' . $field->getFieldValue() . '</textarea>';
                        break;
                }
                $fieldCode .= '</p>';
                $fields[] = $fieldCode;
            }
            //calculator buttons
            switch ($id) {
                case 27:
                    $fields[] = '<p class="clearfix" style="text-align: center;">
                    If you want to calculate the price, click the following button:
                    <a class="btn update-button addSealcoatingService" href="#">Save and go to Calculator</a>
                    </p>';
                    break;
            }
            $fields[] = '<h4 style="text-align: center;">Pricing</h4>';
            $pricingTypeCode = '';
            foreach ($this->servicePricingTypes as $label => $type) {
                $pricingTypeCode .= '<option value="' . $type . '">' . $label . '</option>';
            }
            $fields[] = '<p class="clearfix"><label>Optional Service</label><input type="checkbox" name="optional" id="optional" style="width: 14px; padding: 0; margin: 3px 0;"></p>';

            $fields[] = '<p class="clearfix"><label>Pricing Type</label><select name="pricingType" id="pricingType">' . $pricingTypeCode . '</select></p>';
            $fields[] = '<p class="clearfix" id="materials-container"><label>Choose Material</label>' . form_dropdown('material',
                    $this->materials, array(), ' id="material"') . '</p>';
            $fields[] = '<p class="clearfix" id="price-container"><label id="price-label">Price</label><input type="text" name="price" class="field-priceFormat" id="addPrice" value="$0"></p>';
            $fields[] = '<p class="clearfix amount-container"><label id="amount-label">Frequency</label><input type="text" name="amountQty" class="field-numberFormat" id="amountQty" value="0">
                </p>
             <p class="clearfix amount-container">
            <label id="total">Total Amount</label>
            <input type="text" class="priceFormat" disabled value="$0" id="totalCalculated" />
            </p>';
            $return['fields'] = $fields;
        }
        echo json_encode($return);
    }

    public function getServiceDetails($id)
    {
        $return = array();

        if ($this->account()) {
            $return['error'] = 0;
            $return['user_logged_in'] = 1;
            $service = $this->em->find('models\Services', $id);
            if (!$service) {
                $return['error'] = 1;
            } else {
                $this->load->database();
                $return['serviceName'] = $service->getServiceName();
                $customTitle = $this->em->getRepository('models\Service_titles')->findOneBy(array(
                    'company' => $this->account()->getCompany()->getCompanyId(),
                    'service' => $service->getServiceId(),
                ));
                if ($customTitle) {
                    $return['serviceName'] = $customTitle->getTitle();
                }
                $texts = array();
                $q = "SELECT st.*, sdt.linkId, sdt.replacedBy FROM service_texts st
                        LEFT JOIN service_texts_order sto ON (st.textId = sto.textId)
                        LEFT JOIN service_deleted_texts sdt ON ((st.textId = sdt.textId) AND (sdt.company = " . $this->account()->getCompany()->getCompanyId() . "))
                        WHERE ((st.service = " . $service->getServiceId() . ") AND (st.company = " . $this->account()->getCompany()->getCompanyId() . " OR st.company = 0))
                        ORDER BY COALESCE( sto.ord, 999999 ) , st.ord";
                $q = "SELECT DISTINCT(st.textId), sdt.linkId, sdt.replacedBy FROM service_texts st
                        LEFT JOIN service_texts_order sto ON (st.textId = sto.textId AND sto.company=" . $this->account()->getCompany()->getCompanyId() . ")
                        LEFT JOIN service_deleted_texts sdt ON ((st.textId = sdt.textId) AND (sdt.company = " . $this->account()->getCompany()->getCompanyId() . "))
                        WHERE ((st.service = " . $service->getServiceId() . ") AND (st.company = " . $this->account()->getCompany()->getCompanyId() . " OR st.company = 0))
                        ORDER BY COALESCE( sto.ord, 999999 ) , st.ord";
                $txts = $this->db->query($q);
                foreach ($txts->result() as $txt) {
                    $text = $this->em->find('models\ServiceText', $txt->textId);
                    if ($text) {
                        $texts[$txt->textId] = array(
                            'text' => $text,
                            'deleted' => $txt->linkId,
                            'replacedBy' => $txt->replacedBy,
                        );
                    }
                }
                //move deleted to last and replaced texts under the item that replaces them
                foreach ($texts as $id => $text) {
                    if ($text['deleted'] && $text['replacedBy'] && isset($texts[$text['replacedBy']])) {
                        unset($texts[$id]);
                        $texts[$text['replacedBy']]['replacedText'] = $text;
                    } elseif ($text['deleted']) {
                        unset($texts[$id]);
                        //$texts[$id] = $text;
                    }
                }
                $texts2 = array();
                foreach ($texts as $txt) {
                    $text = $txt['text'];
                    if (!$txt['deleted']) {
                        $texts2[] = $text->getText();
                    }
                }
                $return['texts'] = $texts2;
                $fields = array();
                $fds = $this->em->createQuery('SELECT f FROM models\ServiceField f WHERE f.service=' . $service->getServiceId() . ' ORDER BY f.ord')->getResult();
                $fds = $this->account()->getCompany()->getServiceFields($service->getServiceId());
                $k = 0;
                foreach ($fds as $field) {
                    $k++;
                    $class = '';
                    if ($k % 2) {
                        $class = ' odd';
                    }
                    //create field Code
                    $fieldCode = '<p class="clearfix' . $class . '"><label>' . $field->getFieldName() . '</label>';
                    switch ($field->getFieldType()) {
                        case 'text':
                            $fieldCode .= '<input class="field field-numberFormat" name="' . $field->getFieldCode() . '" id="' . $field->getFieldCode() . '" value="' . $field->getFieldValue() . '">';
                            break;
                        case 'texttext':
                            $fieldCode .= '<input class="field" type="text" name="' . $field->getFieldCode() . '" id="' . $field->getFieldCode() . '" value="' . $field->getFieldValue() . '">';
                            break;
                        case 'select':
                            $fieldCode .= '<select name="' . $field->getFieldCode() . '" id="' . $field->getFieldCode() . '" class="field">';
                            $options = explode("\n", $field->getFieldValue());
                            foreach ($options as $option) {
                                if ($option) {
                                    $fieldCode .= '<option>' . $option . '</option>';
                                }
                            }
                            $fieldCode .= '</select>';
                            break;
                        case 'textarea':
                            $fieldCode .= '<textarea id="' . $field->getFieldCode() . '" class="field" name="' . $field->getFieldCode() . '">' . $field->getFieldValue() . '</textarea>';
                            break;
                    }
                    $fieldCode .= '</p>';
                    $fields[] = $fieldCode;
                }
                //calculator buttons
                switch ($this->uri->segment(3)) {
                    case 27:
                        $fields[] = '<p class="clearfix" style="text-align: center;">
                        If you want to calculate the price, click the following button:
                        <a class="btn update-button addSealcoatingService" href="#">Save and go to Calculator</a>
                        </p>';
                        break;
                    default:
                        //                    $fields[]  = '<p>TESTING</p>'; //Just Testing some shit
                        break;
                }
            }

            $fields[] = '<p class="clearfix"><label>Map Area</label><input class="field field-numberFormat" name="map_area_data" id="map_area_data" ></p>';

            if (!$service->getTax()) {
                $fields[] = '<p class="clearfix"><label>No Price</label><input type="checkbox" name="no_price" id="no_price" style="width: 14px; padding: 0; margin: 3px 0;"></p>';
                $fields[] = '<p class="clearfix"><label>Optional Service</label><input type="checkbox" name="optional" id="optional" style="width: 14px; padding: 0; margin: 3px 0;"></p>';
            }
            $isShowPrice = 'block';
            if ($this->account()->hasEstimatingPermission()) {
                $isShowPrice = 'none';
                $fields[] = '<p class="clearfix"><label>Use Estimator</label><input type="checkbox" checked="checked" name="add_service_estimate" id="add_service_estimate" style="width: 14px; padding: 0; margin: 3px 0;"></p>';
            }
            $fields[] = '<p class="clearfix" style="display:none;"><label>Hide From Proposal</label><input type="checkbox" name="add_hide_from_proposal" id="add_hide_from_proposal" style="width: 14px; padding: 0; margin: 3px 0;"></p>';
            $fields[] = '<p class="clearfix add_price_p"  style="display:' . $isShowPrice . '"><label>Price</label><input type="text" name="price" class="field-priceFormat" id="addPrice" value="$0"></p>';
            //$fields[] = '<a href="JavaScript:void(0);" class="btn update-button addIcon" style="margin-top: 10px;float:right;" id="addServiceCopyButton">Add Service</a>';
            $return['fields'] = $fields;
        } else {
            $return['error'] = 1;
            $return['user_logged_in'] = 0;
        }

        echo json_encode($return);
    }

    public function sort_proposalAttachments()
    {
        $items = array();
        foreach ($_POST['attachment'] as $ord => $item) {
            $attachment = $this->em->find('\models\Proposal_attachments', $item);
            $attachment->setOrd($ord);
            $items[$attachment->getAttachmentId()] = $attachment;
            $this->em->persist($items[$attachment->getAttachmentId()]);
        }
        $this->em->flush();
        $this->em->clear();
    }

    public function reorder_texts()
    {
        $k = 0;
        $textOrders = '';
        foreach ($_POST['text'] as $textId) {
            $k++;
            $textOrders .= $textId;
            if ($k < count($_POST['text'])) {
                $textOrders .= ',';
            }
        }
        $orderedTexts = explode(',', $textOrders);
        $allTexts = explode(',', $this->account()->getCompany()->getCustomTextsOrder());
        foreach ($allTexts as $key => $id) {
            if (in_array($id, $orderedTexts)) {
                unset($allTexts[$key]);
            }
        }
        foreach ($orderedTexts as $ot) {
            $allTexts[] = $ot;
        }
        $finalOrder = implode(',', $allTexts);
        $company = $this->account()->getCompany();
        $company->setCustomTextsOrder($finalOrder);
        $this->em->persist($company);
        $this->em->flush();
        $this->account()->resetCompanyProposals();
        echo json_encode(array($finalOrder));
    }

    public function addProposalCalculatorItems()
    {
        $token = -rand(100000000, 999999999);
        $response['token'] = $token;
        $fieldsValues = array();
        foreach ($_POST as $key => $val) {
            $field = new \models\Calculators_values();
            $field->setCompany($this->account()->getCompany()->getCompanyId());
            $field->setFieldName($key);
            $field->setFieldValue($val);
            $field->setItemId($token);
            $fieldsValues[$key] = $field;
            $this->em->persist($fieldsValues[$key]);
        }
        $this->em->flush();
        echo json_encode($response);
    }

    public function updateProposalCalculatorItems()
    {
        $response = array();
        $fields = array();
        foreach ($_POST as $key => $val) {
            $field = $this->em->getRepository('models\Calculators_values')->findOneBy(array(
                'itemId' => $this->uri->segment(3),
                'fieldName' => $key,
            ));
            if ($field) {
                $fields[$key] = $field;
            } else {
                $field = new \models\Calculators_values();
                $field->setCompany($this->account()->getCompany()->getCompanyId());
                $field->setFieldName($key);
                $field->setItemId($this->uri->segment(3));
                $fields[$key] = $field;
            }
            $field->setFieldValue($val);
            $this->em->persist($fields[$key]);
        }

        $this->em->flush();
        echo json_encode($response);
    }

    public function enableService()
    {
        // Load the service
        $serviceId = $this->input->post('service');
        $service = $this->em->find('\models\Services', $serviceId);
        // Load the helper
        $this->load->library('helpers/ServiceHelper', array('account' => $this->account()));
        $this->servicehelper->setService($service);

        switch ($this->input->post('action')) {
            case 'disable':
                $this->servicehelper->disable();
                break;
            case 'enable':
                $this->servicehelper->enable();
                break;
        }
        //Temp Delete Cache result
        $this->getQueryCacheRepository()->deleteCompanyServiceCache($this->account()->getCompanyId());
        // $this->em->getConfiguration()->getResultCacheImpl()->delete( CACHE_COMPANY_SERVICES . $this->account()->getCompanyId());
    }

    public function updateServiceTextsOrder()
    {
        $texts = array();
        $dataText = $this->input->post('texts');
        if (is_array($dataText)) {
            foreach ($dataText as $ord => $tId) {
                $textOrder = new \models\Service_texts_order();
                $textOrder->setCompany($this->account()->getCompany()->getCompanyId());
                $textOrder->setService($this->input->post('service'));
                $textOrder->setTextId($tId);
                $textOrder->setOrd($ord);
                $texts[$tId] = $textOrder;
                $this->em->persist($texts[$tId]);
            }
            $this->em->flush();
        }
    }

    public function updateCompanyServiceTextsOrder()
    {
        $texts = array();

        // Clear order for this service
        $this->account()->getCompany()->clearServiceTextOrder($this->input->post('service'));
        $dataText = $this->input->post('texts');
        if (is_array($dataText)) {
            foreach ($dataText as $ord => $tId) {
                $textOrder = new \models\ServiceTextOrder();
                $textOrder->setCompany($this->account()->getCompany()->getCompanyId());
                $textOrder->setService($this->input->post('service'));
                $textOrder->setTextId($tId);
                $textOrder->setOrd($ord);
                $this->em->persist($textOrder);
            }
        }

        $this->em->flush();
    }

    public function get_service_text($id)
    {
        $text = $this->em->find('models\ServiceText', $id);
        if ($text) {
            echo $text->getText();
        }
    }

    /**
     *
     */
    public function editServiceName()
    {
        $this->load->database();
        $value = trim($this->input->post('value'));
        if ($value) {
            $this->db->query("DELETE FROM service_titles WHERE company=" . $this->account()->getCompany()->getCompanyId() . " AND service=" . $this->input->post('id'));
            $service_title = new \models\Service_titles();
            $service_title->setCompany($this->account()->getCompany()->getCompanyId());
            $service_title->setService($this->input->post('id'));
            $service_title->setTitle($value);
            echo $service_title->getTitle();
            $service = $this->em->find('models\Services', $this->input->post('id'));
            if ($service) {
                $this->log_manager->add(\models\ActivityAction::EDIT_PROPOSAL_SERVICE,
                    'Changed Service Name to "' . strip_tags($value) . '" for service - ' . $service->getServiceName());

                if ($this->account()->getCompany()->hasQb()) {

                    switch ($this->account()->getCompany()->getQbType()) {

                        case 'online':
                            $cqs = $this->getQuickbooksRepository()->getCompanyQbService($this->account()->getCompanyId(),
                                $service->getServiceId());
                            /* @var $cqs \models\CompanyQbService */
                            if ($cqs) {
                                $cqs->setTitle($value);
                                if ($cqs->getQBID()) {
                                    $cqs->setQBSyncFlag(3);
                                } else {
                                    $cqs->setQBSyncFlag(1);
                                }
                                $this->em->persist($cqs);
                            }
                            break;

                        case 'desktop':
                            ///////For enqueue the client for Quickboos desktop : BY Sunil//////////;
                            $this->db->select('quickbooks_queue_id')->from('quickbooks_queue')->where('qb_action', 'ItemServiceAdd')->where('ident', $this->input->post('id'))->where('qb_status', 's');

                            $query = $this->db->get();
                            $user = md5($this->account()->getCompanyId());
                            if ($query->num_rows() > 0) {
                                $this->quickbooks_model->enqueue(QUICKBOOKS_MOD_SERVICEITEM, $this->input->post('id'), 0, '', $user);
                            } else {
                                $this->quickbooks_model->enqueue(QUICKBOOKS_ADD_SERVICEITEM, $this->input->post('id'), 0, '', $user);
                            }
                            ////////////////////////////end :by sunil///////////////////////
                            break;
                    }
                }
            }
            $this->em->persist($service_title);
        } else {
            $currentServiceName = $this->em->getRepository('models\Service_titles')->findOneBy(array(
                'company' => $this->account()->getCompany()->getCompanyId(),
                'service' => $this->input->post('id'),
            ));
            echo $currentServiceName->getTitle();
        }
        $this->em->flush();
    }

    public function getPaymentTerm($id)
    {
        $proposal = $this->em->find('models\Proposals', $id);
        if ($proposal) {
            if ($proposal->getPaymentTermText()) {
                echo $proposal->getPaymentTermText();
            } else {
                echo $this->account()->getCompany()->getPaymentTermText();
            }
        }
    }

    public function getContractCopy($id)
    {
        $proposal = $this->em->find('models\Proposals', $id);
        if ($proposal) {
            if ($proposal->getContractCopy()) {
                echo $proposal->getContractCopy();
            } else {
                echo $this->account()->getCompany()->getContractCopy();
            }
        }
    }

    public function saveImageNotes($id)
    {
        $image = $this->em->find('models\Proposals_images', $id);
        if ($image) {
            //add a log for notes start
              $oldNotes =  $image->getNotes();
              $newNotes = $this->input->post('notes');
              if(trim($oldNotes)!=trim($newNotes)){
                  $image->setNotes($this->input->post('notes'));
                $this->getLogRepository()->add([
                    'action' => \models\ActivityAction::PROPOSAL_IMAGE_ADD_TO_PROPOSAL,
                    'details' => "Notes Updated into Proposal Image",
                    'proposal' => NULL,
                    'account' => $this->account()->getAccountId(),
                    'company' => $this->account()->getCompanyId(),
                ]);
              }

            //add a log for notes end

            $this->em->persist($image);
            $this->em->flush();
        }
    }

    public function rotateImage()
    {
        $response = new JsonResponse();

        $image = $this->em->findProposalImage($this->input->post('imageId'));

        if (!$image) {
            $response->error = 1;
            $response->send();
            return;
        }

        $proposal = $image->getProposal();

        if (!$proposal) {
            $response->error = 1;
            $response->send();
            return;
        }

        $rotate = 90; //left
        if ($this->input->post('rotation') == 'right') {
            $rotate = 270;
        }

        $this->getProposalRepository()->rotateImage($image, $rotate);

        $proposal->setRebuildFlag(1);
        $this->em->persist($proposal);
        $this->em->flush();

        $response->error = 0;
        $response->path = $image->getWebPath();
        $response->send();
    }

    public function serviceSaveFields()
    {
        $this->load->database();
        $fields = $this->input->post('fields');
        $serviceId = $this->input->post('serviceId');
        foreach ($fields as $code => $value) {
            $insert = array(
                'serviceId' => $serviceId,
                'fieldCode' => $code,
                'fieldValue' => $value,
            );
            $this->db->query("delete from proposal_services_fields where serviceId={$serviceId} and fieldCode='{$code}'");
            $this->db->query("insert into proposal_services_fields values(NULL,{$serviceId},'{$code}','{$value}')");
        }
        $price = $this->input->post('price');
        $this->db->query("update proposal_services set price='{$price}' where serviceId={$serviceId} limit 1");
    }

    public function calculatorSaveFields()
    {
        foreach ($this->input->post('fields') as $fieldName => $fieldValue) {
            $this->calculator->setValue($this->input->post('serviceId'), $this->input->post('initialService'),
                $this->account()->getCompany()->getCompanyId(), $fieldName, $fieldValue);
        }
        $this->session->set_flashdata('success', 'Your job costs have been saved to the proposal.');
    }

    public function order_event_types()
    {
        $this->getEventRepository()->clearEventTypeOrder($this->account()->getCompany()->getCompanyId());
        $event_types = $this->input->post('event_types');

        if (count($event_types)) {
            $i = 1;
            foreach ($event_types as $event_type) {
                $eto = new \models\EventTypeOrder();
                $eto->setCompany($this->account()->getCompany()->getCompanyId());
                $eto->setEventTypeId($event_type);
                $eto->setOrd($i);
                $this->em->persist($eto);
                $i++;
            }
            $this->em->flush();
        }

        echo json_encode(array('error' => 0));
    }

    public function order_statuses()
    {
        $statuses = $this->input->post('status');

        // Clear existing config
        $this->getCompanyRepository()->clearStatusConfig($this->account()->getCompanyId());

        if (count($statuses)) {
            $i = 1;
            foreach ($statuses as $statusId) {
                $csc = new \models\CompanyStatusConfig();
                $csc->setStatusId($statusId);
                $csc->setCompanyId($this->account()->getCompanyId());
                $csc->setOrd($i);
                $this->em->persist($csc);
                $i++;
            }
            $this->em->flush();
            //Temp Delete Cache result
            $this->getQueryCacheRepository()->deleteCompanyStatusCache($this->account()->getCompanyId());
            // $this->em->getConfiguration()->getResultCacheImpl()->delete( CACHE_COMPANY_STATUSES . $this->account()->getCompanyId());
        }

        echo json_encode(array('error' => 0));
    }

    public function order_default_statuses()
    {
        $statuses = $this->input->post('status');

        if (count($statuses)) {
            $i = 1;
            foreach ($statuses as $statusId) {
                $status = $this->em->find('\models\Status', $statusId);
                /* @var $status \models\Status */
                $status->setOrder($i);
                $this->em->persist($status);
                $i++;
            }
            $this->em->flush();
        }

        echo json_encode(array('error' => 0));
    }

    public function chartData()
    {
        $this->load->library('stats/MyQueryServlet');
        $servlet = new MyQueryServlet();

        // Create the datatables
        // $range = 'year';
        $custom = false;
        $range['start'] = '0';
        $range['finish'] = Carbon::create()->endOfDay()->timestamp;
        $account = $this->account();

        // Totals
        $data = new DataTable();

        $data->addColumn(new ColumnDescription('status', ValueType::STRING, 'Status'));
        $data->addColumn(new ColumnDescription('value', ValueType::NUMBER, 'Value'));

        $statuses = $account->getStatuses();

        foreach ($statuses as $status) {

            $val = $account->getRangeCreatedProposalsStatusPrice($range, $status, $custom);

            $row = new TableRow(array($status->getText(), (int)$val));
            $data->addRow($row);

        }

        $servlet->setDataTable($data);

        $servlet->execute();
    }

    public function dashboardStats($filter = 'all')
    {
        $data = [];
        $time['start'] = '0';
        $time['finish'] = Carbon::create()->endOfDay()->timestamp;
        $dashboardStats = $this->getDashboardStatsRepository();

        $range = $this->input->post('range');

        if ($range != 'custom') {
            $time = getRangeStartFinish($range);
        } else {
            if ($this->input->post('customFrom') == '' && $this->input->post('customTo') == '') {
                $time['start'] = '0';
                $time['finish'] = Carbon::create()->endOfDay()->timestamp;
            } else {
                // $time['start'] = strtotime($this->input->post('customFrom'));
                $time['start'] = Carbon::parse($this->input->post('customFrom'))->startOfDay()->timestamp;
                // $time['finish'] = strtotime("11:59:59pm " . $customFrom = $this->input->post('customTo'));
                $time['finish'] = Carbon::parse($this->input->post('customTo'))->endOfDay()->timestamp;
            }
        }

        $companyId = $this->account()->getCompany()->getCompanyId();
        $tabId = $this->input->post('tabId');

        switch ($this->input->post('user')) {

            case 'user':
                if ($tabId != 2) {
                    $account = $this->em->findAccount($this->input->post('accountId'));

                    $data['proposalCount'] = $account->getRangeCreatedProposals($time, true);
                    $data['proposalValue'] = $account->getRangeCreatedProposalsPrice($time);
                    //readable total value
                    $data['readableTotalValue'] = readableValue($data['proposalValue']);

                    //complete value
                    $compVal = $account->getRangeMagicNumber($time, $account->getCompany()->getDefaultStatus(\models\Status::COMPLETED));

                    //rollover value
                    $data['rolloverValue'] = readableValue($account->getRolloverValue($time['start']));
                }

                switch ($tabId) {

                    case '0':
                        $lostValSF = $account->getRangeCreatedProposalsStatusPrice($time, $account->getCompany()->getDefaultStatus(\models\Status::LOST));
                        $data['lostValueSF'] = readableValue($lostValSF);

                        $compValSF = $account->getRangeCreatedProposalsStatusPrice($time, $account->getCompany()->getDefaultStatus(\models\Status::COMPLETED));
                        $data['completedPct'] = $data['proposalValue'] ? number_format((($compValSF / $data['proposalValue']) * 100)) : 0;
                        $wonValSF = $account->getRangeCreatedProposalsStatusPrice($time, $account->getCompany()->getDefaultStatus(\models\Status::WON));
                        $data['wonPct'] = $data['proposalValue'] ? number_format((($wonValSF / $data['proposalValue']) * 100)) : 0;
                        $data['lostPct'] = $data['proposalValue'] ? number_format((($lostValSF / $data['proposalValue']) * 100)) : 0;

                        $openValSF = $account->getRangeCreatedProposalsStatusPrice($time, $account->getCompany()->getDefaultStatus(\models\Status::OPEN));
                        $data['openPct'] = $data['proposalValue'] ? number_format((($openValSF / $data['proposalValue']) * 100)) : 0;

                        $data['magicNumberValue'] = readableValue($compVal);

                        $data['completedValueSF'] = readableValue($compValSF);

                        $data['openValueSF'] = readableValue($openValSF);

                        $data['wonValueSF'] = readableValue($wonValSF);
                        break;

                    case '1':
                        // Completed
                        $data['completedValue'] = readableValue($compVal);
                        // Won
                        //$wonVal = $account->getRangeCreatedProposalsStatusPrice($time, $account->getCompany()->getDefaultStatus(\models\Status::WON));
                        $wonVal = $account->getSalesValueCreated($time);
                        $data['wonValue'] = readableValue($wonVal);
                        // Lost
                        $lostVal = $account->getRangeCreatedProposalsStatusPrice($time, $account->getCompany()->getDefaultStatus(\models\Status::LOST));
                        $data['lostValue'] = readableValue($lostVal);
                        // Open
                        $openVal = $account->getRangeCreatedProposalsStatusPrice($time, $account->getCompany()->getDefaultStatus(\models\Status::OPEN));
                        $data['openValue'] = readableValue($openVal);
                        // avg value
                        $data['avgValue'] = $data['proposalCount'] ? (readableValue($data['proposalValue'] / $data['proposalCount'])) : 0;
                        break;

                    case '2':

                        $data = array_merge($data, $dashboardStats->getCompanyStats($this->account()->getCompany()->getCompanyId(), $time['start'], $time['finish'], $this->input->post('accountId')));
                        break;
                }

                break;

            case 'company':
                if ($tabId != 2) {
                    // Totals
                    $data['proposalCount'] = $this->account()->getCompany()->getRangeCreatedProposals($time, true);
                    $data['proposalValue'] = $this->account()->getCompany()->getRangeCreatedProposalsPrice($time);

                    $data['readableTotalValue'] = readableValue($data['proposalValue']);
                    // Rollover
                    $data['rolloverValue'] = readableValue($this->account()->getCompany()->getRolloverValue($time['start']));
                    //complate
                    $compVal = $this->account()->getCompany()->getRangeMagicNumber($time, $this->account()->getCompany()->getDefaultStatus(\models\Status::COMPLETED));
                }

                switch ($tabId) {

                    case '0':

                        ////////tab 1

                        // SF Values
                        $data['magicNumberValue'] = readableValue($compVal);
                        $compValSF = $this->account()->getCompany()->getRangeCreatedProposalsStatusPrice($time,
                            $this->account()->getCompany()->getDefaultStatus(\models\Status::COMPLETED));
                        $data['completedValueSF'] = readableValue($compValSF);
                        $data['completedPct'] = $data['proposalValue'] ? number_format((($compValSF / $data['proposalValue']) * 100)) : 0;

                        $openValSF = $this->account()->getCompany()->getRangeCreatedProposalsStatusPrice($time,
                            $this->account()->getCompany()->getDefaultStatus(\models\Status::OPEN));
                        $data['openValueSF'] = readableValue($openValSF);
                        $data['openPct'] = $data['proposalValue'] ? number_format((($openValSF / $data['proposalValue']) * 100)) : 0;

                        $wonValSF = $this->account()->getCompany()->getRangeCreatedProposalsStatusPrice($time,
                            $this->account()->getCompany()->getDefaultStatus(\models\Status::WON));
                        $data['wonValueSF'] = readableValue($wonValSF);
                        $data['wonPct'] = $data['proposalValue'] ? number_format((($wonValSF / $data['proposalValue']) * 100)) : 0;

                        $lostValSF = $this->account()->getCompany()->getRangeCreatedProposalsStatusPrice($time,
                            $this->account()->getCompany()->getDefaultStatus(\models\Status::LOST));
                        $data['lostValueSF'] = readableValue($lostValSF);
                        $data['lostPct'] = $data['proposalValue'] ? number_format((($lostValSF / $data['proposalValue']) * 100)) : 0;
                        break;

                    case '1':

                        // Completed
                        $data['completedValue'] = readableValue($compVal);
                        $data['avgValue'] = $data['proposalCount'] ? (readableValue($data['proposalValue'] / $data['proposalCount'])) : 0;
                        // Won
                        //$wonVal = $this->account()->getCompany()->getRangeCreatedProposalsStatusPrice($time,$this->account()->getCompany()->getDefaultStatus(\models\Status::WON));
                        $wonVal = $this->account()->getCompany()->getRangeCreatedWonProposalsPrice($time);
                        $data['wonValue'] = readableValue($wonVal);
                        // Open
                        $openVal = $this->account()->getCompany()->getRangeCreatedProposalsStatusPrice($time,
                            $this->account()->getCompany()->getDefaultStatus(\models\Status::OPEN));
                        $data['openValue'] = readableValue($openVal);
                        // Lost
                        $lostVal = $this->account()->getCompany()->getRangeCreatedProposalsStatusPrice($time,
                            $this->account()->getCompany()->getDefaultStatus(\models\Status::LOST));
                        $data['lostValue'] = readableValue($lostVal);
                        break;

                    case '2':

                        /*Leads Stuff*/
                        $data = array_merge($data, $dashboardStats->getCompanyStats($this->account()->getCompany()->getCompanyId(), $time['start'],
                            $time['finish']));

                        break;
                }

                break;
            case 'branch':

                if ($this->input->post('branchId') > 0) {
                    if ($tabId != 2) {
                        $branch = $this->em->findBranch($this->input->post('branchId'));
                        $branchCompany = $this->em->findCompany($branch->getCompany());
                        // Totals
                        $data['proposalCount'] = $branch->getRangeCreatedProposals($time, true);
                        $data['proposalValue'] = $branch->getRangeCreatedProposalsPrice($time);

                        $data['readableTotalValue'] = readableValue($data['proposalValue']);
                        // Rollover
                        $data['rolloverValue'] = readableValue($branch->getRolloverValue($time['start']));
                        // Completed
                        $compVal = $branch->getRangeMagicNumber($time, $branchCompany->getDefaultStatus(\models\Status::COMPLETED));
                    }

                    switch ($tabId) {

                        case '0':
                            //tab 1
                            // SF Values
                            $compValSF = $branch->getRangeCreatedProposalsStatusPrice($time, $branchCompany->getDefaultStatus(\models\Status::COMPLETED));
                            $data['completedValueSF'] = readableValue($compValSF);
                            $data['completedPct'] = $data['proposalValue'] ? number_format((($compValSF / $data['proposalValue']) * 100)) : 0;

                            $openValSF = $branch->getRangeCreatedProposalsStatusPrice($time,
                                $branchCompany->getDefaultStatus(\models\Status::OPEN));
                            $data['openValueSF'] = readableValue($openValSF);
                            $data['openPct'] = $data['proposalValue'] ? number_format((($openValSF / $data['proposalValue']) * 100)) : 0;

                            $wonValSF = $branch->getRangeCreatedProposalsStatusPrice($time,
                                $branchCompany->getDefaultStatus(\models\Status::WON));
                            $data['wonValueSF'] = readableValue($wonValSF);
                            $data['wonPct'] = $data['proposalValue'] ? number_format((($wonValSF / $data['proposalValue']) * 100)) : 0;

                            $lostValSF = $branch->getRangeCreatedProposalsStatusPrice($time,
                                $branchCompany->getDefaultStatus(\models\Status::LOST));
                            $data['lostValueSF'] = readableValue($lostValSF);
                            $data['lostPct'] = $data['proposalValue'] ? number_format((($lostValSF / $data['proposalValue']) * 100)) : 0;

                            break;

                        case '1':
                            $data['avgValue'] = $data['proposalCount'] ? (readableValue($data['proposalValue'] / $data['proposalCount'])) : 0;
                            $data['completedValue'] = readableValue($compVal);
                            // Won
                            $wonVal = $branch->getRangeCreatedProposalsWonStatusPrice($time);
                            $data['wonValue'] = readableValue($wonVal);
                            // Open
                            $openVal = $branch->getRangeCreatedProposalsStatusPrice($time,
                                $branchCompany->getDefaultStatus(\models\Status::OPEN));
                            $data['openValue'] = readableValue($openVal);
                            // Lost
                            $lostVal = $branch->getRangeCreatedProposalsStatusPrice($time,
                                $branchCompany->getDefaultStatus(\models\Status::LOST));
                            $data['lostValue'] = readableValue($lostVal);
                            break;

                        case '2':
                            /*Leads Stuff*/
                            $data = array_merge($data,
                                $dashboardStats->getCompanyStats($this->account()->getCompany()->getCompanyId(), $time['start'],
                                    $time['finish'], null, $this->input->post('branchId')));

                            break;

                    }
                } else {
                    if ($tabId != 2) {
                        // Main branch - needs different queries
                        $branchCompany = $this->account()->getCompany();

                        // Totals
                        $data['proposalCount'] = \models\Branches::getRangeCreatedProposalsMain($time, $companyId, true);
                        $data['proposalValue'] = \models\Branches::getRangeCreatedProposalsPriceMain($time, $companyId);

                        $data['readableTotalValue'] = readableValue($data['proposalValue']);
                        // Rollover
                        $data['rolloverValue'] = readableValue(\models\Branches::getRolloverValueMain($time['start'],
                            $companyId));
                        // Completed
                        $compVal = \models\Branches::getRangeMagicNumberMain($time, $companyId, $branchCompany->getDefaultStatus(\models\Status::COMPLETED));
                    }

                    switch ($tabId) {
                        case '0':

                            // SF Values
                            $compValSF = \models\Branches::getRangeCreatedProposalsStatusPriceMain($time, $companyId,
                                $branchCompany->getDefaultStatus(\models\Status::COMPLETED));
                            $data['completedValueSF'] = readableValue($compValSF);
                            $data['completedPct'] = $data['proposalValue'] ? number_format((($compValSF / $data['proposalValue']) * 100)) : 0;

                            $openValSF = \models\Branches::getRangeCreatedProposalsStatusPriceMain($time, $companyId,
                                $branchCompany->getDefaultStatus(\models\Status::OPEN));
                            $data['openValueSF'] = readableValue($openValSF);
                            $data['openPct'] = $data['proposalValue'] ? number_format((($openValSF / $data['proposalValue']) * 100)) : 0;

                            $wonValSF = \models\Branches::getRangeCreatedProposalsStatusPriceMain($time, $companyId,
                                $branchCompany->getDefaultStatus(\models\Status::WON));
                            $data['wonValueSF'] = readableValue($wonValSF);
                            $data['wonPct'] = $data['proposalValue'] ? number_format((($wonValSF / $data['proposalValue']) * 100)) : 0;

                            $lostValSF = \models\Branches::getRangeCreatedProposalsStatusPriceMain($time, $companyId,
                                $branchCompany->getDefaultStatus(\models\Status::LOST));
                            $data['lostValueSF'] = readableValue($lostValSF);
                            $data['lostPct'] = $data['proposalValue'] ? number_format((($lostValSF / $data['proposalValue']) * 100)) : 0;
                            break;

                        case '1':
                            $data['avgValue'] = $data['proposalCount'] ? (readableValue($data['proposalValue'] / $data['proposalCount'])) : 0;
                            $data['completedValue'] = readableValue($compVal);
                            // Won
                            $wonVal = \models\Branches::getRangeWonMagicNumberMain($time, $companyId);
                            $data['wonValue'] = readableValue($wonVal);
                            // Open
                            $openVal = \models\Branches::getRangeMagicNumberMain($time, $companyId,
                                $branchCompany->getDefaultStatus(\models\Status::OPEN));
                            $data['openValue'] = readableValue($openVal);
                            // Lost
                            $lostVal = \models\Branches::getRangeMagicNumberMain($time, $companyId,
                                $branchCompany->getDefaultStatus(\models\Status::LOST));
                            $data['lostValue'] = readableValue($lostVal);
                            break;

                        case '2':

                            /*Leads Stuff*/
                            $data = array_merge($data,
                                $dashboardStats->getCompanyStats($this->account()->getCompany()->getCompanyId(), $time['start'],
                                    $time['finish'], null, $this->input->post('branchId')));
                            break;
                    }
                }

                break;
        }

        $data['time'] = $time;

        // Return as JSON
        echo json_encode($data);
    }


    public function dashboardUserStats($filter = 'all')
    {
        $data = [];
        $time['start'] = '0';
        $time['finish'] = Carbon::create()->endOfDay()->timestamp;
        $dashboardStats = $this->getDashboardStatsRepository();

        if ($this->input->post('customFrom') == '' && $this->input->post('customTo') == '') {
            $time['start'] = '0';
            $time['finish'] = Carbon::create()->endOfDay()->timestamp;
        } else {
            $time['start'] = strtotime($this->input->post('customFrom'));
            $time['finish'] = strtotime("11:59:59pm " . $customFrom = $this->input->post('customTo'));
        }


        $companyId = $this->account()->getCompany()->getCompanyId();


        $account = $this->em->findAccount($this->input->post('accountId'));

        $data['proposalCount'] = $account->getRangeCreatedProposals($time, true);
        $data['proposalValue'] = $account->getRangeCreatedProposalsPrice($time);
        //readable total value
        $data['readableTotalValue'] = readableValue($data['proposalValue']);

        //complete value
        $compVal = $account->getRangeMagicNumber($time, $account->getCompany()->getDefaultStatus(\models\Status::COMPLETED));

        //rollover value
        $data['rolloverValue'] = readableValue($account->getRolloverValue($time['start']));

        $lostValSF = $account->getRangeCreatedProposalsStatusPrice($time, $account->getCompany()->getDefaultStatus(\models\Status::LOST));
        $data['lostValueSF'] = readableValue($lostValSF);

        $compValSF = $account->getRangeCreatedProposalsStatusPrice($time, $account->getCompany()->getDefaultStatus(\models\Status::COMPLETED));
        $data['completedPct'] = $data['proposalValue'] ? number_format((($compValSF / $data['proposalValue']) * 100)) : 0;
        $wonValSF = $account->getRangeCreatedProposalsStatusPrice($time, $account->getCompany()->getDefaultStatus(\models\Status::WON));
        $data['wonPct'] = $data['proposalValue'] ? number_format((($wonValSF / $data['proposalValue']) * 100)) : 0;
        $data['lostPct'] = $data['proposalValue'] ? number_format((($lostValSF / $data['proposalValue']) * 100)) : 0;

        $openValSF = $account->getRangeCreatedProposalsStatusPrice($time, $account->getCompany()->getDefaultStatus(\models\Status::OPEN));
        $data['openPct'] = $data['proposalValue'] ? number_format((($openValSF / $data['proposalValue']) * 100)) : 0;

        $data['magicNumberValue'] = readableValue($compVal);

        $data['completedValueSF'] = readableValue($compValSF);

        $data['openValueSF'] = readableValue($openValSF);

        $data['wonValueSF'] = readableValue($wonValSF);


        // Completed
        $data['completedValue'] = readableValue($compVal);
        // Won
        $wonVal = $account->getRangeMagicNumber($time, $account->getCompany()->getDefaultStatus(\models\Status::WON));
        $data['wonValue'] = readableValue($wonVal);
        // Lost
        $lostVal = $account->getRangeMagicNumber($time, $account->getCompany()->getDefaultStatus(\models\Status::LOST));
        $data['lostValue'] = readableValue($lostVal);
        // Open
        $openVal = $account->getRangeMagicNumber($time, $account->getCompany()->getDefaultStatus(\models\Status::OPEN));
        $data['openValue'] = readableValue($openVal);
        // avg value
        $data['avgValue'] = $data['proposalCount'] ? (readableValue($data['proposalValue'] / $data['proposalCount'])) : 0;


        $data = array_merge($data, $dashboardStats->getCompanyStats($this->account()->getCompany()->getCompanyId(), $time['start'], $time['finish'], $this->input->post('accountId')));


        $data['time'] = $time;

        // Return as JSON
        echo json_encode($data);
    }


    public function dashboardTable()
    {
        $companyRepo = $this->getCompanyRepository();

        $time['start'] = '0';
        $time['finish'] = Carbon::create()->endOfDay()->timestamp;
        $time['start'] = strtotime($this->session->userdata('pStatusFilterFrom'));
        $time['finish'] = strtotime("11:59:59pm " . $this->session->userdata('pStatusFilterTo'));

        switch ($this->input->post('user')) {

            case 'user':
                $accounts = [
                    $this->em->findAccount($this->input->post('accountId')),
                ];
                break;

            case 'branch':
                $accounts = $companyRepo->getSalesAccounts($this->account()->getCompanyId(),
                    $this->input->post('branchId'));
                break;

            default:

                if ($this->account()->getUserClass() == 1) {
                    $accounts = $companyRepo->getSalesAccounts($this->account()->getCompanyId(),
                        $this->account()->getBranch());
                } else {
                    if ($this->account()->getUserClass() >= 2) {
                        $accounts = $companyRepo->getSalesAccounts($this->account()->getCompany());
                    }
                }
                break;
        }

        $company = $this->account()->getCompany();
        /* @var $company \models\Companies */
        $companyOpenStatus = $company->getDefaultStatus(\models\Status::OPEN);
        $companyCompleteStatus = $company->getDefaultStatus(\models\Status::COMPLETED);
        $companyWonStatus = $company->getDefaultStatus(\models\Status::WON);
        $companyLostStatus = $company->getDefaultStatus(\models\Status::LOST);

        $data = array();

        $data['sEcho'] = 1;
        $data['iTotalRecords'] = count($accounts);
        $data['iTotalDisplayRecords'] = count($accounts);
        $data['aaData'] = array();

        foreach ($accounts as $account) {
            /* @var $account \models\Accounts */

            // Totals
            $totalBid = $account->getRangeCreatedProposalsPrice($time);
            $proposalCount = $account->getRangeCreatedProposals($time, true);
            // Average - avoid division by 0
            $avgBid = $proposalCount ? ($totalBid / $proposalCount) : 0;

            // Open
            $openBidPrice = $account->getRangeMagicNumber($time, $companyOpenStatus);

            // Won
            $wonBidPrice = $account->getSalesValue($time);

            // Lost
            $lostBidPrice = $account->getRangeMagicNumber($time, $companyLostStatus);

            // Complete
            $compBidPrice = $account->getRangeMagicNumber($time, $companyCompleteStatus);

            // Rollover
            $rollover = $account->getRolloverValue($time['start']);

            // Populate the table row data
            $row = [];
            // User name
            $row[] = $account->getFullName();
            // Number of proposals
            $row[] = $proposalCount;
            $row[] = '<a href="' . site_url('proposals/status/all/user/' . $account->getAccountId()) . '">' . $proposalCount . '</a>';
            // Total bid value
            $row[] = $totalBid;
            $row[] = '<a href="' . site_url('proposals/status/all/user/' . $account->getAccountId()) . '">$' . readableValue($totalBid) . '</a>';
            // Avarage Value
            $row[] = $avgBid;
            $row[] = '$' . readableValue($avgBid);
            // Completed Value
            $row[] = $compBidPrice;
            $row[] = '<a href="' . site_url('proposals/status/' . $companyCompleteStatus->getStatusId() . '/user/' . $account->getAccountId()) . '">$' . readableValue($compBidPrice) . '</a>';
            // Open Value
            $row[] = $openBidPrice;
            $row[] = '<a href="' . site_url('proposals/status/' . $companyOpenStatus->getStatusId() . '/user/' . $account->getAccountId()) . '">$' . readableValue($openBidPrice) . '</a>';
            // Won Value
            $row[] = $wonBidPrice;
            $row[] = '<a href="' . site_url('proposals/status/' . $companyWonStatus->getStatusId() . '/user/' . $account->getAccountId()) . '">$' . readableValue($wonBidPrice) . '</a>';
            // Lost Value
            $row[] = $lostBidPrice;
            $row[] = '<a href="' . site_url('proposals/status/' . $companyLostStatus->getStatusId() . '/user/' . $account->getAccountId()) . '">$' . readableValue($lostBidPrice) . '</a>';

            $data['aaData'][] = $row;
        }

        echo json_encode($data, JSON_PRETTY_PRINT);
    }

    public function dashboardTableSF()
    {
        $companyRepo = $this->getCompanyRepository();

        $time = array();
        $time['start'] = '0';
        $time['finish'] = Carbon::create()->endOfDay()->timestamp;
        $time['start'] = strtotime($this->session->userdata('pStatusFilterFrom'));
        $time['finish'] = strtotime("11:59:59pm " . $this->session->userdata('pStatusFilterTo'));

        switch ($this->input->post('user')) {

            case 'user':
                $accounts = [
                    $this->em->findAccount($this->input->post('accountId')),
                ];
                break;

            case 'branch':
                $accounts = $companyRepo->getSalesAccounts($this->account()->getCompanyId(),
                    $this->input->post('branchId'));
                break;

            default:

                if ($this->account()->getUserClass() == 1) {
                    $accounts = $companyRepo->getSalesAccounts($this->account()->getCompanyId(),
                        $this->account()->getBranch());
                } else {
                    if ($this->account()->getUserClass() >= 2) {
                        $accounts = $companyRepo->getSalesAccounts($this->account()->getCompanyId());
                    }
                }
                break;
        }

        $company = $this->account()->getCompany();
        /* @var $company \models\Companies */
        $companyOpenStatus = $company->getDefaultStatus(\models\Status::OPEN);
        $companyCompleteStatus = $company->getDefaultStatus(\models\Status::COMPLETED);
        $companyWonStatus = $company->getDefaultStatus(\models\Status::WON);
        $companyLostStatus = $company->getDefaultStatus(\models\Status::LOST);

        $data = array();

        $data['sEcho'] = 1;
        $data['iTotalRecords'] = count($accounts);
        $data['iTotalDisplayRecords'] = count($accounts);
        $data['aaData'] = array();

        foreach ($accounts as $account) {
            /* @var $account \models\Accounts */

            $totalBid = $account->getRangeCreatedProposalsPrice($time);
            $proposalCount = $account->getRangeCreatedProposals($time, true);
            // Open
            $openBidPrice = $account->getRangeCreatedProposalsStatusPrice($time, $companyOpenStatus);
            $openBidPct = ($openBidPrice && $totalBid) ? ($openBidPrice / $totalBid) * 100 : 0;

            // Won
            $wonBidPrice = $account->getRangeCreatedProposalsStatusPrice($time, $companyWonStatus);
            $wonBidPct = ($wonBidPrice && $totalBid) ? ($wonBidPrice / $totalBid) * 100 : 0;

            // Lost
            $lostBidPrice = $account->getRangeCreatedProposalsStatusPrice($time, $companyLostStatus);
            $lostBidPct = ($lostBidPrice && $totalBid) ? ($lostBidPrice / $totalBid) * 100 : 0;

            // Complete
            $compBidPrice = $account->getRangeCreatedProposalsStatusPrice($time, $companyCompleteStatus);
            $compBidPct = ($compBidPrice && $totalBid) ? ($compBidPrice / $totalBid) * 100 : 0;

            // Rollover
            $rollover = $account->getRolloverValue($time['start']);

            // Magic Number
            $magicNumber = $account->getRangeMagicNumber($time, $companyCompleteStatus);

            $row = array();
            $row[] = $account->getFullName();

            $row[] = $magicNumber;
            $row[] = '<a href="' . site_url('proposals/status/magicnumber/user/' . $account->getAccountId()) . '">$' . readableValue($magicNumber) . '</a>';

            $row[] = $totalBid;
            $row[] = '<a href="' . site_url('proposals/status/all/user/' . $account->getAccountId()) . '">$' . readableValue($totalBid) . '</a>';

            $row[] = $compBidPrice;
            $row[] = '<a href="' . site_url('proposals/status/' . $companyCompleteStatus->getStatusId() . '/user/' . $account->getAccountId()) . '/sf">$' . readableValue($compBidPrice) . '</a>';
            $row[] = $compBidPct;
            $row[] = number_format($compBidPct, 2) . '%';

            $row[] = $openBidPrice;
            $row[] = '<a href="' . site_url('proposals/status/' . $companyOpenStatus->getStatusId() . '/user/' . $account->getAccountId()) . '/sf">$' . readableValue($openBidPrice) . '</a>';
            $row[] = $openBidPct;
            $row[] = number_format($openBidPct, 2) . '%';

            $row[] = $wonBidPrice;
            $row[] = '<a href="' . site_url('proposals/status/' . $companyWonStatus->getStatusId() . '/user/' . $account->getAccountId()) . '/sf">$' . readableValue($wonBidPrice) . '</a>';
            $row[] = $wonBidPct;
            $row[] = number_format($wonBidPct, 2) . '%';

            $row[] = $proposalCount;
            $row[] = '<a href="' . site_url('proposals/status/all/user/' . $account->getAccountId()) . '">' . $proposalCount . '</a>';

            $data['aaData'][] = $row;
        }

        echo json_encode($data, JSON_PRETTY_PRINT);
    }

    public function dashboardTableLeads()
    {
        $companyRepo = $this->getCompanyRepository();

        $time = array();
        $time['start'] = strtotime($this->session->userdata('pStatusFilterFrom'));
        $time['finish'] = strtotime("11:59:59pm " . $this->session->userdata('pStatusFilterTo'));
        $includeUnassigned = false;

        switch ($this->input->post('user')) {

            case 'user':
                $accounts = [
                    $this->em->findAccount($this->input->post('accountId')),
                ];
                break;

            case 'branch':
                $accounts = $companyRepo->getSalesAndSecretaryAccounts($this->account()->getCompanyId(),
                    $this->input->post('branchId'));
                break;

            default:
                $includeUnassigned = true;
                if ($this->account()->getUserClass() == 1) {
                    $accounts = $companyRepo->getSalesAndSecretaryAccounts($this->account()->getCompanyId(),
                        $this->account()->getBranch());
                } else {
                    if ($this->account()->getUserClass() >= 2) {
                        $accounts = $companyRepo->getSalesAndSecretaryAccounts($this->account()->getCompanyId());
                    }
                }
                break;
        }

        $company = $this->account()->getCompany();
        /* @var $company \models\Companies */
        $data = array();

        $data['sEcho'] = 1;
        $data['iTotalRecords'] = count($accounts);
        $data['iTotalDisplayRecords'] = count($accounts);
        $data['aaData'] = array();
        $dashboardStats = $this->getDashboardStatsRepository();
        $companyId = $this->account()->getCompany()->getCompanyId(); //for shorter function calls
        foreach ($accounts as $account) {
            /* @var $account \models\Accounts */
            $accountId = $account->getAccountId(); //for shorter function calls

            $row = array();
            $row[] = $account->getFullName();
            $row[] = '<a href="' . site_url('leads/index/filter/status/Active/user/' . $account->getAccountId() . '/range/custom/from/' . date('m-d-Y',
                        $time['start']) . '/to/' . date('m-d-Y',
                        $time['finish']) . '') . '">' . $dashboardStats->leadsActive($companyId, $time['start'],
                    $time['finish'], $accountId) . '</a>';
            $row[] = '<a href="' . site_url('leads/index/filter/age/new/user/' . $account->getAccountId() . '/range/custom/from/' . date('m-d-Y',
                        $time['start']) . '/to/' . date('m-d-Y',
                        $time['finish']) . '') . '">' . $dashboardStats->leadsNew($companyId, $time['start'],
                    $time['finish'], $accountId) . '</a>';
            $row[] = '<a href="' . site_url('leads/index/filter/age/current/user/' . $account->getAccountId() . '/range/custom/from/' . date('m-d-Y',
                        $time['start']) . '/to/' . date('m-d-Y',
                        $time['finish']) . '') . '">' . $dashboardStats->leadsCurrent($companyId, $time['start'],
                    $time['finish'], $accountId) . '</a>';
            $row[] = '<a href="' . site_url('leads/index/filter/age/old/user/' . $account->getAccountId() . '/range/custom/from/' . date('m-d-Y',
                        $time['start']) . '/to/' . date('m-d-Y',
                        $time['finish']) . '') . '">' . $dashboardStats->leadsOld($companyId, $time['start'],
                    $time['finish'], $accountId) . '</a>';
            $row[] = '<a href="' . site_url('leads/index/filter/status/Converted/user/' . $account->getAccountId() . '/range/custom/from/' . date('m-d-Y',
                        $time['start']) . '/to/' . date('m-d-Y',
                        $time['finish']) . '') . '">' . $dashboardStats->leadsConverted($companyId, $time['start'],
                    $time['finish'], $accountId) . '</a>';
            $row[] = '<a href="' . site_url('leads/index/filter/status/Cancelled/user/' . $account->getAccountId() . '/range/custom/from/' . date('m-d-Y',
                        $time['start']) . '/to/' . date('m-d-Y',
                        $time['finish']) . '') . '">' . $dashboardStats->leadsCancelled($companyId, $time['start'],
                    $time['finish'], $accountId) . '</a>';
            $row[] = '<a href="' . site_url('leads/index/filter/status/All/user/' . $account->getAccountId() . '/range/custom/from/' . date('m-d-Y',
                        $time['start']) . '/to/' . date('m-d-Y',
                        $time['finish']) . '') . '">' . $dashboardStats->totalLeads($companyId, $time['start'],
                    $time['finish'], $accountId) . '</a>';
            $avgConversion = ($dashboardStats->leadAvgConversion($companyId, $time['start'], $time['finish'],
                $accountId)) ?: 'No Data';
            $row[] = $avgConversion;

            $data['aaData'][] = $row;
        }

        /* Unassigned Leads - Included only if we're doing the whole company */
        if ($includeUnassigned) {
            $row = array();
            $row[] = 'Unassigned';
            $row[] = $dashboardStats->leadsActive($companyId, $time['start'], $time['finish'], null, null, true);
            $row[] = $dashboardStats->leadsNew($companyId, $time['start'], $time['finish'], null, null, true);
            $row[] = $dashboardStats->leadsCurrent($companyId, $time['start'], $time['finish'], null, null, true);
            $row[] = $dashboardStats->leadsOld($companyId, $time['start'], $time['finish'], null, null, true);
            $row[] = $dashboardStats->leadsConverted($companyId, $time['start'], $time['finish'], null, null, true);
            $row[] = $dashboardStats->leadsCancelled($companyId, $time['start'], $time['finish'], null, null, true);
            $row[] = $dashboardStats->totalLeads($companyId, $time['start'], $time['finish'], null, null, true);
            $avgConversion = ($dashboardStats->leadAvgConversion($companyId, $time['start'], $time['finish'], null,
                null, true)) ?: 'No Data';
            $row[] = $avgConversion;
            $data['aaData'][] = $row;
        }

        echo json_encode($data, JSON_PRETTY_PRINT);
    }

    public function dashboardTableSalesTargets()
    {
        $companyRepo = $this->getCompanyRepository();

        $from = $this->session->userdata('pStatusFilterFrom');
        $to = $this->session->userdata('pStatusFilterTo');

        $startTime = new Carbon($from . '00:00:00');
        $endTime = new Carbon($to);

        $weekdays = $startTime->diffInWeekdays($endTime);

        // If 'all', we're on the user breakdown table and show all users based on permissions
        if ($this->input->post('all')) {
            if ($this->account()->hasFullAccess()) {
                $accounts = $companyRepo->getSalesAccounts($this->account()->getCompanyId());
            } else {
                if ($this->account()->isBranchAdmin()) {
                    $accounts = $companyRepo->getSalesAccounts($this->account()->getCompanyId(),
                        $this->account()->getBranch());

                } else {
                    $accounts[] = $this->em->findAccount($this->input->post('accountId'));
                }
            }
        } else {
            // Otherwise, the user/branch is being specified and we need to load the relevant accounts
            switch ($this->input->post('user')) {

                case 'user':

                    if ($this->input->post('accountId')) {
                        $accounts = [
                            $this->em->findAccount($this->input->post('accountId')),
                        ];
                    } else {
                        // If it's just a user logged in, there's no account ID
                        $accounts = [
                            $this->account(),
                        ];
                    }
                    break;

                case 'branch':
                    $accounts = $companyRepo->getSalesAccounts($this->account()->getCompanyId(),
                        $this->input->post('branchId'));
                    break;

                case 'company':
                    $accounts = $companyRepo->getSalesAccounts($this->account()->getCompanyId());
                    break;
            }
        }

        // Now we have the account(s) and can process the data in the same way for all
        $data = array();
        $data['sEcho'] = 1;
        $data['iTotalRecords'] = count($accounts);
        $data['iTotalDisplayRecords'] = count($accounts);
        $data['aaData'] = array();
        $salesTargetStats = $this->getSalesTargetsRepository();
        foreach ($accounts as $account) {
            /* @var $account \models\Accounts */

            $targets = $salesTargetStats->getConfig($account->getCompanyId(), $account->getAccountId());

            // Dates now have to be calculate per user in case of varying start times
            $startTime = new Carbon($from);
            $endTime = new Carbon($to);

            $startTimeString = '';
            if ($targets['start_date'] > $startTime->timestamp) {
                $startTime = Carbon::createFromTimestamp($targets['start_date']);
                $startTimeString = '<a href="#" class="right tiptipright iconLink" onclick="return false" title="User Start Date is ' . $startTime->format('m/d/y') . '. Targets are adjusted to account for this."><i class="fa fa-fw fa-calendar"></i></a>';
            }

            // Calculate weekdays
            $weekdays = $startTime->diffInWeekdays($endTime);

            // Get the stats
            $stats = $salesTargetStats->getUserStats($account, $from, $to);

            // Win rate
            $targetWinRate = $targets['win_rate'];
            $winRate = $stats['win_rate'];

            // Sales Target
            $currentSalesTarget = ($targets['sales_per_day'] * $weekdays);

            // Bid Target
            $targetBidPerDay = $targets['bid_per_day_52'];
//            $targetBidPerDay = $targets['bid_per_day'];
            $targetTotalBid = ($targetBidPerDay * $weekdays);
            $totalBid = $stats['total_bid'];
            $bidDiff = $totalBid - $targetTotalBid;
            $plusDiff = ($bidDiff >= 0);
            if ($weekdays > 0) {
                $bidsPerDay = round($stats['totalProposals'] / $weekdays, 2);
            } else {
                //if weekdays 0 set it as 1
                $weekdays = 1;
                $bidsPerDay = round($stats['totalProposals'] / $weekdays, 2);
            }

            // Sales Value
            $salesValue = $stats['wonCompletedProposals'];
            $rolloverValue = $stats['rangeRollover'];
            $actualValue = ($salesValue - $rolloverValue);
            $differenceValue = ($salesValue - $currentSalesTarget);

            if ($differenceValue < 0) {
                $differenceValueContent = '<span style="color: #FB0003;">' . readableValueWithDollar($differenceValue) . '</span>';
            } else {
                $differenceValueContent = '+$' . str_replace(str_split('()'), '', readableValue($differenceValue));
            }
            $smiley = '';
            if ($plusDiff) {
                $smiley = '<i class="fa fa fw fa-smile-o"></i>';
            }

            // Build the html content //
            $targetsHit = 0;

            // Sales $ //
            $salesClass = 'fa fa-fw fa-arrow-down';
            $linkClass = 'belowTarget';
            if ($salesValue >= $currentSalesTarget) {
                $salesClass = 'fa fa-fw fa-arrow-up';
                $linkClass = 'aboveTarget';
                $targetsHit++;
            }
            $salesContent = '<div style="display: flex;"><a class="" href="' . site_url('proposals/status/sold/user/' . $account->getAccountId()) . '">$' . readableValue($salesValue) . '</a> <a style="margin-left: auto;" class=" iconLink tiptiptarget ' . $linkClass . '" title="
                <p style=\'text-align: center; margin-bottom: 5px; width: 150px; font-weight: bold;\'>Win</p>
                <table width=\'100%\'>
                    <tr>
                        <td>Target:</td>
                        <td>$' . readableValue($currentSalesTarget) . '</td>
                    </tr>
                    <tr style=\'padding: 5px;\'>
                        <td></td>
                        <td></td>
                   </tr>
                        <td>Actual:</td>
                        <td>$' . readableValue($actualValue) . '</td>
                   <tr>
                   </tr>
                        <td>Rollover:</td>
                        <td>$' . readableValue($rolloverValue) . '</td>
                   <tr>
                   </tr>
                        <td>Difference: </td>
                        <td>$' . readableValue($differenceValue) . '</td>
                   <tr>
                </table>
                ">
                <i class="' . $salesClass . '"</i></a>';


            if ($currentSalesTarget) {
                $targetPercentage = round(($salesValue > 0) ? ($salesValue * 100) / $currentSalesTarget : 0, 2) . '%';
            } else {
                $targetPercentage = '-';
            }

            // Win Rate
            $winRateClass = 'fa fa-fw fa-arrow-down';
            $linkClass = 'belowTarget';
            if ($winRate >= $targetWinRate) {
                $winRateClass = 'fa fa-fw fa-arrow-up';
                $linkClass = 'aboveTarget';
            }
            $actual_percent = ($totalBid > 0) ? (($salesValue * 100) / $totalBid) : 0;
            $percent_info = '';
            if ($actual_percent > $winRate) {
                $percent_info .= ' <i class="fa fa-fw fa-info-circle  tiptip right" style="margin-top: 1px;" title="This % does not match the Won $ amount.</br></br>This is because you have won a proposal that was created before the time range you selected.</br></br>The Win Rate is only for proposals you created AND won in the time range."></i>';
            } else if ($actual_percent < $winRate) {
                $percent_info .= ' <i class="fa fa-fw fa-info-circle  tiptip right" style="margin-top: 1px;" title="This % does not match the Won $ amount.</br></br>This is because you have some proposals marked as won, but do not have a win date saved which means they are not included in the Won $. </br></br>Update the win rate of your won proposals and this number will update automatically."></i>';
            }

            if ($winRate > 0) {
                $winRateContent = '<div style="display: flex;"><span class="" ><a class="" href="' . site_url('proposals/status/won/user/' . $account->getAccountId()) . '">' . number_format($winRate,
                        2) . '%</a></span> ' . $percent_info . ' <a style="margin-left: auto;" class=" iconLink tiptip ' . $linkClass . '" title="Target: ' . $targetWinRate . '%"><i class="' . $winRateClass . '"</i></a></div>';
            } else {
                $winRateContent = '<div style="display: flex;"><span class="" >' . number_format($winRate,
                        2) . '%</span> ' . $percent_info . ' <a style="margin-left: auto;" class=" iconLink tiptip ' . $linkClass . '" title="Target: ' . $targetWinRate . '%"><i class="' . $winRateClass . '"</i></a></div>';
            }


            // Bid Amount
            $bidClass = 'fa fa-fw fa-arrow-down';
            $linkClass = 'belowTarget';
            if ($totalBid >= $targetTotalBid) {
                $bidClass = 'fa fa-fw fa-arrow-up';
                $linkClass = 'aboveTarget';
            }
            $bidContent = '<div style="display: flex;"><a class="" href="' . site_url('proposals/status/all/user/' . $account->getAccountId()) . '">$' . readableValue($totalBid) . '</a> <a style="margin-left: auto;" class="iconLink tiptip  ' . $linkClass . '" title="Target: $' . readableValue($targetTotalBid) . '"><i class="' . $bidClass . '"</i></a>';

            // Smiley
            $smileyContent = '';
            if ($targetsHit > 0) {
                $smileyContent = '<img src="/3rdparty/icons/happy.svg" width="15px" height="15px" style="margin-top: 2px;" />';
            }

            $totalProposals = 0;
            if ($stats['totalProposals'] > 0) {
                $totalProposals = '<a href="' . site_url('proposals/status/all/user/' . $account->getAccountId()) . '">' . $stats['totalProposals'] . '</a> ';
            }

            $totalOpen = 0;
            if ($stats['totalOpen'] > 0) {
                $totalOpen = '<a href="' . site_url('proposals/status/open/user/' . $account->getAccountId()) . '">$' . readableValue($stats['totalOpen']) . '</a> ';
            }

            $totalOtherProposal = 0;
            if ($stats['totalOtherProposal'] > 0) {
                $totalOtherProposal = '<a href="' . site_url('proposals/status/other/user/' . $account->getAccountId()) . '">$' . readableValue($stats['totalOtherProposal']) . '</a> ';
            }


            // Content needs to be style dependent on comparison vs performance
            $row = [
                '<a href="' . site_url('account/stats/' . $account->getAccountId()) . '" class="tiptipright" title="View User Statistics">' . $account->getFullName() . '</a>' . $startTimeString,
                $targetsHit,
                $smileyContent,
                $salesContent,
                $targetPercentage,
                $differenceValueContent,
                $differenceValue,
                $totalOpen,
                $totalBid,
                $bidContent,
                $totalOtherProposal,
                $winRateContent,
                $totalProposals,
                $bidsPerDay,
                $salesValue,
                $winRate,
                $targets['sales_target'],
                '$' . readableValue($targets['sales_target']),
                $stats['totalOpen'],
                $stats['totalOtherProposal']
            ];

            $data['aaData'][] = $row;
        }

        // Return as JSON
        echo json_encode($data);
    }

    public function dashboardPie()
    {

        $this->load->library('stats/MyQueryServlet');
        $servlet = new MyQueryServlet();
        $branchId = $this->input->post('branchId');

        $time = array();
        $time['start'] = '0';
        $time['finish'] = Carbon::create()->endOfDay()->timestamp;
        $time['start'] = strtotime('midnight ' . $this->session->userdata('pStatusFilterFrom'));
        $time['finish'] = strtotime("11:59:59pm " . $this->session->userdata('pStatusFilterTo'));

        $range = $this->input->post('range');

        $statuses = $this->account()->getCompany()->getStatuses();
        $totalVal = 0;

        // Create the datatable
        $data = new DataTable();
        // Colums for pie chart
        $data->addColumn(new ColumnDescription('status', ValueType::STRING, 'Status'));
        $data->addColumn(new ColumnDescription('value', ValueType::NUMBER, 'Value'));

        switch ($this->input->post('user')) {

            case 'user':

                $account = $this->em->findAccount($this->input->post('accountId'));
                foreach ($statuses as $status) {
                    $val = $account->getRangeCreatedProposalsStatusPrice($time, $status->getStatusId());
                    $totalVal += $val;
                    $row = new TableRow(array($status->getText(), (int)$val));
                    $data->addRow($row);
                }
                break;

            case 'company':

                $account = $this->account();
                foreach ($statuses as $status) {
                    $val = $account->getCompany()->getRangeCreatedProposalsStatusPrice($time, $status->getStatusId());
                    $totalVal += $val;
                    $row = new TableRow(array($status->getText(), (int)$val));
                    $data->addRow($row);
                }
                break;

            case 'branch':

                // Load the branch model if we have a specific ID
                if ($branchId > 0) {
                    $branch = $this->em->find('\models\Branches', $branchId);

                    foreach ($statuses as $status) {
                        $val = $branch->getRangeCreatedProposalsStatusPrice($time, $status->getStatusId());
                        $totalVal += $val;
                        $row = new TableRow(array($status->getText(), (int)$val));
                        $data->addRow($row);
                    }
                } else {
                    // Main branch, which doesn't technically exist
                    foreach ($statuses as $status) {
                        $val = \models\Branches::getRangeCreatedProposalsStatusPriceMain($time,
                            $this->account()->getCompany()->getCompanyId(), $status->getStatusId());
                        $totalVal += $val;
                        $row = new TableRow(array($status->getText(), (int)$val));
                        $data->addRow($row);
                    }
                }
                break;

        }

        if ($totalVal > 0) {
            $servlet->setDataTable($data);
            $servlet->execute();
        } else {
            echo json_encode(array('empty' => 1));
        }
    }

    /**
     * Save the order of services for this company
     */
    public function orderCompanyServices($categoryId)
    {

        $response = new JsonResponse();
        $services = $this->input->post('services');

        if (count($services)) {
            // Clear existing order
            $this->account()->getCompany()->clearServiceOrder($categoryId);

            $i = 1;

            foreach ($services as $serviceId) {

                $cso = new \models\CompanyServiceOrder();
                $cso->setCompanyId($this->account()->getCompany()->getCompanyId());
                $cso->setServiceId($serviceId);
                $cso->setOrd($i);

                $this->em->persist($cso);
                $i++;
            }
            $this->em->flush();
            //Temp Delete Cache result
            $this->getQueryCacheRepository()->deleteCompanyServiceCache($this->account()->getCompanyId());
            // $this->em->getConfiguration()->getResultCacheImpl()->delete( CACHE_COMPANY_SERVICES . $this->account()->getCompanyId());
            $this->getQueryCacheRepository()->deleteCompanyServiceMapCache($this->account()->getCompanyId());
            // $this->em->getConfiguration()->getResultCacheImpl()->delete( CACHE_COMPANY_SERVICES_MAP . $this->account()->getCompanyId());

        }

        $response->success = 1;

        $response->send();
    }

    public function editServiceCatName()
    {
        $id = str_replace('cat_', '', $this->input->post('id'));
        $cat = $this->em->find('models\Services', $id);
        $cat->setServiceName($this->input->post('value'));
        $this->em->persist($cat);
        $this->em->flush();
        echo $this->input->post('value');
    }

    public function updateServiceFieldsOrder()
    {
        $fields = array();
        foreach ($this->input->post('fields') as $ord => $fId) {
            $field = $this->em->find('models\ServiceField', $fId);
            $field->setOrd($ord);
            $fields[$field->getFieldId()] = $field;
            $this->em->persist($fields[$field->getFieldId()]);
        }
        $this->em->flush();
    }

    public function updateCompanyServiceFieldsOrder()
    {
        $serviceId = $this->input->post('service');

        $this->account()->getCompany()->clearServiceFieldOrder($serviceId);

        $fields = array();
        foreach ($this->input->post('fields') as $ord => $fId) {
            $sfo = new \models\ServiceFieldOrder();
            $sfo->setServiceId($serviceId);
            $sfo->setFieldId($fId);
            $sfo->setOrd($ord);
            $sfo->setCompany($this->account()->getCompany()->getCompanyId());
            $this->em->persist($sfo);
        }
        $this->em->flush();
    }

    public function getServiceFieldDetails($id = 0)
    {
        $fieldArray = array();
        $field = $this->em->find('models\ServiceField', $id);
        $fieldArray['fieldName'] = $field->getFieldName();
        $fieldArray['fieldCode'] = $field->getFieldCode();
        $fieldArray['fieldType'] = $field->getFieldType();
        $fieldArray['fieldValue'] = $field->getFieldValue();
        $fieldArray['fieldId'] = $field->getFieldId();
        echo json_encode($fieldArray);
    }

    public function deleteProposal()
    {
        // Load the proposal
        $proposalId = $this->uri->segment(3);
        $proposal = $this->em->findProposal($proposalId);
        // Load the status text required
        $deleteStatus = $this->account()->getCompany()->getDefaultStatus(\models\Status::DELETE_REQUEST);
        $this->jsonresponse->text = $deleteStatus->getText();

        if ($proposal) {
            if (!$proposal->getIsDemo()) {
                $this->load->library('helpers/ProposalHelper', array('account' => $this->account()));
                $this->proposalhelper->setProposal($proposal);

                // Delete if user has permission
                if ($this->account()->hasDeleteProposalPermission()) {
                    $this->proposalhelper->delete();
                    $this->getClientRepository()->updateProposalCount($proposal->getClient()->getClientId());
                    $this->jsonresponse->deleteComplete = 1;
                } else {
                    // Otherwise request delete
                    $this->proposalhelper->requestDelete();
                    $this->jsonresponse->deleteRequested = 1;
                }
            } else {
                $this->jsonresponse->isDemo = 1;
            }
        } else {
            $this->jsonresponse->error = 1;
        }
        // Send the response
        $this->jsonresponse->send();
    }

    public function containsDuplicates()
    {
        $ids = $this->input->post('ids');

        $data = new stdClass();
        $data->duplicates = 0;

        if (is_array($ids)) {
            $qb = $this->em->createQueryBuilder();

            $qb->select('COUNT(p.proposalId)')
                ->from('\models\Proposals', 'p')
                ->where('p.duplicateOf IS NOT NULL')
                ->andWhere('p.proposalId IN (' . implode(',', $ids) . ')');
            $duplicates = $qb->getQuery()->getSingleScalarResult();

            $data->duplicates = $duplicates;
        }
        echo json_encode($data);
    }

    public function deliveryStatus()
    {
        $ids = $this->input->post('ids');
        $out = array();

        if (is_array($ids) && (count($ids) > 0)) {
            foreach ($ids as $proposalId) {
                $proposal = $this->em->findProposal($proposalId);
                if ($proposal->getDeliveryTime()) {
                    $out[$proposalId] = date('m/d/Y g:ia', realTime($proposal->getDeliveryTime()));
                }
            }
        }
        echo json_encode($out);
    }

    /** Group clients action to delete clients */
    public function clientGroupDelete()
    {
        // Get the list of IDs
        $ids = $this->input->post('ids');
        // Counter
        $numDeleted = 0;

        // Loop if we have them
        if (count($ids)) {
            foreach ($ids as $id) {
                $client = $this->em->find('\models\Clients', $id);
                /* @var $client \models\Clients */

                // Only delete if user has relevant permissions
                if (($this->account()->getCompany() == $client->getCompany()) && (($this->account()->isAdministrator()) || ($this->account()->getFullAccess() == 'yes') || ($this->account() == $client->getAccount()))) {
                    \models\Clients::delete($client);
                    $numDeleted++;

                    // Log each delete
                    $this->log_manager->add(\models\ActivityAction::GROUP_DELETE_CONTACT,
                        "[Group Action] - Contact '" . $client->getFullName() . "' deleted",
                        null,
                        null,
                        null,
                        $this->account()
                    );
                }
            }
        }
        // Respond
        $this->jsonresponse->success = 1;
        $this->jsonresponse->count = $numDeleted;
        $this->jsonresponse->send();
    }

    /** Group clients action to send email */
    public function clientGroupEmail()
    {
        $this->load->library('JsonResponse');
        $response = new JsonResponse();
        // DOn't send if blank content, or the default content of the textarea
        if (!$this->input->post('body') || ($this->input->post('body') == 'This is the content')) {
            $response->success = 0;
            $response->error = 1;
            $response->count = 0;
            $response->send();
        } else {
            //build email data
            $emailData = [
                'subject' => $this->input->post('subject'),
                'body' => $this->input->post('body'),
                'fromName' => $this->input->post('fromName'),
                'fromEmail' => $this->input->post('fromEmail'),
                'replyTo' => $this->input->post('fromEmail'),
                'emailCC' => ($this->input->post('emailCC') == 'true'),
                'categories' => ['Group Resend'],
                'clientFilter' => $this->input->post('clientFilter')
            ];

            //send all proposals selected
            $job_array = [
                'client_ids' => $this->input->post('ids'),
                'email_data' => $emailData,
                'account_id' => $this->account()->getAccountId(),
                'resend_id' => $this->input->post('resendId'),
                'resend_name' => $this->input->post('new_resend_name'),
                'exclude_override' => $this->input->post('exclude_override')
            ];


            $this->load->library('jobs');

            // Save the opaque image
            $this->jobs->create($_ENV['QUEUE_EMAIL'], 'jobs', 'group_client_email_send', $job_array, 'test job');


            //send all proposals selected

            //$counts = $this->getClientRepository()->groupSend($this->input->post('ids'), $emailData,
            //$this->account(),'client_send',NULL,$this->input->post('resendId'),$this->input->post('new_resend_name'));
            $response->success = true;
            $response->count = 0;
            $response->unsent = 0;
            $response->already_sent = 0;
            $response->duplicateEmailCount = 0;
            $response->send();
        }
    }

    public function leadResendAudit()
    {

        $lead = $this->em->find('models\Leads', $this->input->post('leadId'));
        /* @var $lead \models\Leads */

        $serviceIds = explode(',', $lead->getServices());
        $services = [];

        foreach ($serviceIds as $serviceId) {
            $service = $this->em->find('models\Services', $serviceId);
            if ($service) {
                $services[] = $service;
            }
        }

        $assignedAccount = $this->em->find('models\Accounts', $lead->getAccount());

        $k = 0;
        if ($assignedAccount) {
            $mailServices = array();
            foreach ($services as $service) {
                $k++;
                $mailServices[] = $service->getServiceName();
            }
            $mailServices = implode(', ', $mailServices);
            $emailData = array(
                'first_name' => $assignedAccount->getFirstName(),
                'last_name' => $assignedAccount->getLastName(),
                'project_name' => $lead->getProjectName(),
                'company_name' => $lead->getCompanyName(),
                'requested_work' => $mailServices,
                'contact' => $lead->getFirstName() . ' ' . $lead->getLastName(),
                'contact_title' => $lead->getTitle(),
                'phone' => $lead->getBusinessPhone(),
                'address' => $lead->getProjectAddress() . ' ' . $lead->getProjectCity() . ' ' . $lead->getProjectState() . ', ' . $lead->getProjectZip(),
                'notes' => nl2br($lead->getNotes()),
                //added extra
                'projectPhone' => $lead->getProjectPhone(),
                'leadAddress' => $lead->getAddress() . ' ' . $lead->getCity() . ' ' . $lead->getState() . ' ' . $lead->getZip(),
                'projectContact' => $lead->getProjectContact(),
                'email' => $lead->getEmail(),
                'auditUrl' => $lead->getPsaAuditUrl(),
                'auditSmsUrl' => $lead->getPsaSmsUrl(),
            );
            $this->load->model('system_email');

            $this->system_email->sendEmail(18, $assignedAccount->getEmail(), $emailData);

            $response = [
                'success' => 1,
            ];

            return json_encode($response);
        }
    }

    /** Group clients action to reassign */
    public function clientGroupReassign()
    {
        // Get input
        $ids = $this->input->post('ids');
        $assignTo = $this->input->post('reassignTo');
        $reassign_proposal = $this->input->post('reassignProposal');
        // Counter
        $count = 0;
        // Load assignee
        $assignAccount = $this->em->find('\models\Accounts', $assignTo);
        /* @var $assignAccount \models\Accounts */

        // Loop if we got em
        if (count($ids)) {
            foreach ($ids as $id) {
                $client = $this->em->find('\models\Clients', $id);
                /* @var $client \models\Clients */
                $client->setAccount($assignAccount);
                $this->em->persist($client);
                // Increment
                $count++;
                if ($reassign_proposal == 1) {
                    $this->db->query("UPDATE proposals SET owner = $assignTo   WHERE client = $id");
                }

                // Log change
                $this->log_manager->add(\models\ActivityAction::REASSIGN_CONTACT,
                    "[Group Action] Client " . $client->getFullName() . " reassigned to " . $assignAccount->getFullName(),
                    $client);
            }
            // Save
            $this->em->flush();
        }
        // Send response
        $this->jsonresponse->success = 1;
        $this->jsonresponse->count = $count;
        $this->jsonresponse->send();
    }

    /** Group clients action to reassign */
    public function clientGroupAccountReassign()
    {
        // Get input
        $ids = $this->input->post('ids');
        $assignTo = $this->input->post('reassignTo');
        // Counter
        $count = 0;
        // Load assignee
        $assignAccount = $this->em->find('\models\ClientCompany', $assignTo);
        /* @var $assignAccount \models\Accounts */

        // Loop if we got em
        if (count($ids)) {
            foreach ($ids as $id) {
                $client = $this->em->find('\models\Clients', $id);
                /* @var $client \models\Clients */
                $client->setClientAccount($assignAccount);
                $this->em->persist($client);
                // Increment
                $count++;

                // Log change
                $this->log_manager->add(\models\ActivityAction::REASSIGN_CONTACT_ACCOUNT,
                    "[Group Action] Client " . $client->getFullName() . " reassigned to account  " . $assignAccount->getName(),
                    $client);
            }
            // Save
            $this->em->flush();
        }
        // Send response
        $this->jsonresponse->success = 1;
        $this->jsonresponse->count = $count;
        $this->jsonresponse->send();
    }

    public function groupLeadResend()
    {
        $counter = 0;

        if (is_array($this->input->post('ids'))) {

            $ids = $this->input->post('ids');

            foreach ($ids as $leadId) {

                $lead = $this->em->findLead($leadId);

                if ($lead) {
                    if ($lead->getAccount()) {

                        $userAccount = $this->em->findAccount($lead->getAccount());

                        if ($userAccount) {
                            $this->getLeadRepository()->sendLeadEmail($this->account(), $lead, false);
                            $counter++;
                        }
                    }
                }
            }
        }

        echo json_encode(['count' => $counter]);
    }

    function groupLeadsSendEmail22()
    {

        $counter = 0;
        $noEmailCounter = 0;
        $unassignedCounter = 0;
        if (is_array($this->input->post('ids'))) {

            $ids = $this->input->post('ids');

            foreach ($ids as $leadId) {

                $lead = $this->em->findLead($leadId);

                if ($lead->getEmail()) {

                    if ($lead->getAccount()) {

                        $leadAccount = $this->em->findAccount($lead->getAccount());

                        if ($leadAccount) {

                            $fromName = $this->input->post('fromName');
                            $fromEmail = $this->input->post('fromEmail');

                            $emailFromName = ($fromName) ?: $leadAccount->getFullName();
                            $replyTo = ($fromEmail) ?: $leadAccount->getEmail();

                            $etp = new \EmailTemplateParser();
                            $etp->setLead($lead);
                            $etp->setAccount($leadAccount);
                            $text = $etp->parse($this->input->post('body'));
                            $subject = $etp->parse($this->input->post('subject'));

                            $emailData = [
                                'to' => $lead->getEmail(),
                                'fromName' => $emailFromName,
                                'fromEmail' => $replyTo,
                                'subject' => $subject,
                                'body' => $text,
                                'categories' => ['Lead Group Action'],
                            ];

                            $this->load->library('jobs');

                            // Save the opaque image
                            $this->jobs->create($_ENV['QUEUE_EMAIL'], 'jobs', 'group_proposal_resend', $emailData, 'test job');
                            //$this->getEmailRepository()->send($emailData);

                            $counter++;
                            //log
                            $this->log_manager->add(\models\ActivityAction::GROUP_LEAD_EMAIL,
                                "[Group Action] - Lead email sent to " . $lead->getEmail(),
                                null,
                                null,
                                $this->account()->getCompany(),
                                $this->account()
                            );
                            $lead->setLastActivity();
                        } else {
                            $unassignedCounter++;
                        }
                    } else {
                        $unassignedCounter++;
                    }
                } else {
                    $noEmailCounter++;
                }
            }
            $this->em->flush();
        }
        $response = array();
        $response['counter'] = $counter;
        $response['noEmailCounter'] = $noEmailCounter;
        $response['unassignedCounter'] = $unassignedCounter;
        $response['success'] = true;
        echo json_encode($response);
    }


    /** Group clients action to send email */
    public function groupLeadsSendEmail()
    {
        $this->load->library('JsonResponse');
        $response = new JsonResponse();
        // DOn't send if blank content, or the default content of the textarea
        if (!$this->input->post('body') || ($this->input->post('body') == 'This is the content')) {
            $response->success = 0;
            $response->error = 1;
            $response->count = 0;
            $response->send();
        } else {
            //build email data
            $emailData = [
                'subject' => $this->input->post('subject'),
                'body' => $this->input->post('body'),
                'fromName' => $this->input->post('fromName'),
                'fromEmail' => $this->input->post('fromEmail'),
                'categories' => ['Lead Group Resend'],
                'lead_filter' => $this->input->post('leadFilter')
            ];

            //send all proposals selected

            $job_array = [
                'lead_ids' => $this->input->post('ids'),
                'email_data' => $emailData,
                'account_id' => $this->account()->getAccountId(),
                'resend_id' => $this->input->post('resendId'),
                'resend_name' => $this->input->post('new_resend_name')

            ];


            $this->load->library('jobs');

            // Save the opaque image
            $this->jobs->create($_ENV['QUEUE_EMAIL'], 'jobs', 'group_lead_email_send', $job_array, 'test job');

            // $counts = $this->getLeadRepository()->groupSend($this->input->post('ids'), $emailData,
            // $this->account(),'lead_send',NULL,$this->input->post('resendId'),$this->input->post('new_resend_name'));
            $response->success = true;
            $response->counter = 0;
            $response->noEmailCounter = 0;
            $response->unassignedCounter = 0;
            $response->duplicateEmailCount = 0;
            $response->send();
        }
    }

    public function groupLeadsSendAuditEmail()
    {
        $auditLeads = [];
        $counter = 0;
        $noEmailCounter = 0;
        $uniqueEmails = [];

        // Sort out which leads we're sending by checking that they have an audit URL
        if (is_array($this->input->post('ids'))) {

            $ids = $this->input->post('ids');

            foreach ($ids as $leadId) {

                $lead = $this->em->findLead($leadId);

                if ($lead->getAccount() && $lead->getPsaAuditUrl()) {
                    $leadOwner = $this->em->findAccount($lead->getAccount());

                    if (isset($uniqueEmails[$leadOwner->getEmail()])) {
                        $uniqueEmails[$leadOwner->getEmail()][] = $lead;
                    } else {
                        $uniqueEmails[$leadOwner->getEmail()] = [];
                        $uniqueEmails[$leadOwner->getEmail()][] = $lead;
                    }
                    $counter++;
                } else {
                    $noEmailCounter++;
                }

            }
        }

        // Only send an email if we have leads with audits
        if (count($uniqueEmails)) {

            foreach ($uniqueEmails as $emailAddr => $leads) {
                $etp = new \EmailTemplateParser();
                $etp->setAuditLeads($leads);
                $text = $etp->parse($this->input->post('body'));
                $subject = $etp->parse($this->input->post('subject'));

                $emailData = [
                    'to' => $emailAddr,
                    'fromName' => SITE_NAME,
                    'fromEmail' => 'no-reply@' . SITE_EMAIL_DOMAIN,
                    'subject' => $subject,
                    'body' => $text,
                    'categories' => ['Lead Audit Group Action'],
                ];

                $this->getEmailRepository()->send($emailData);

                //log
                $this->log_manager->add('group_email_lead_audit',
                    "[Group Action] - " . count($leads) . " audit links email sent to " . $emailAddr,
                    null,
                    null,
                    $this->account()->getCompany(),
                    $this->account()
                );
            }
        }

        $response = array();
        $response['counter'] = $counter;
        $response['noEmailCounter'] = $noEmailCounter;
        $response['success'] = true;
        echo json_encode($response);
    }

    public function groupDeleteLeads()
    {
        if (is_array($this->input->post('ids'))) {

            // Logging
            foreach ($this->input->post('ids') as $id) {
                $lead = $this->em->find('\models\Leads', $id);
                /* @var $lead \models\Leads */

                // Log each change
                $this->log_manager->add(\models\ActivityAction::GROUP_LEAD_DELETE,
                    "[Group Action] - Lead '" . $lead->getFirstName() . ' ' . $lead->getLastName() . "' deleted",
                    null,
                    null,
                    $lead->getCompany(),
                    $this->account()
                );
            }

            $this->load->database();
            $sql = 'DELETE FROM leads WHERE leadId IN (';
            $k = 0;
            foreach ($this->input->post('ids') as $id) {
                if ($k) {
                    $sql .= ', ';
                }
                $sql .= $id;
                $k++;
            }
            $sql .= ');';
            $this->db->query($sql);
        }
    }

    public function groupCancelLeads()
    {
        if (is_array($this->input->post('ids'))) {

            // Logging
            foreach ($this->input->post('ids') as $id) {
                $lead = $this->em->find('\models\Leads', $id);
                /* @var $lead \models\Leads */

                // Log each change
                /*$this->log_manager->add('group_action_lead_delete',
            "[Group Action] - Lead '" . $lead->getFirstName() . ' ' . $lead->getLastName() . "' deleted",
            null,
            null,
            $lead->getCompany(),
            $this->account()
            );*/
            }

            $this->load->database();
            $sql = "UPDATE leads SET status = 'Cancelled' WHERE leadId IN (";
            $k = 0;
            foreach ($this->input->post('ids') as $id) {
                if ($k) {
                    $sql .= ', ';
                }
                $sql .= $id;
                $k++;
            }
            $sql .= ');';
            $this->db->query($sql);
            //Delete leads Cache
            $this->getQueryCacheRepository()->deleteCompanyLeadsCountCache($this->account()->getCompanyId());
        }
    }

    public function groupLeadsChangeOwner()
    {
        if (is_array($this->input->post('ids'))) {

            $this->load->model('system_email');


            foreach ($this->input->post('ids') as $leadId) {

                $lead = $this->em->findLead($leadId);
                $lead->setAccount($this->input->post('newOwner'));
                $lead->setLastActivity();
                $this->em->persist($lead);

                $emailAccount = $this->em->findAccount($this->input->post('newOwner'));

                // Try to reassign the audit if there is one
                if ($lead->getPsaAuditUrl()) {
                    // Load the API client
                    $this->load->library('psa_client', ['account' => $emailAccount]);

                    // We just need the lead ID. User credentials are supplied by the API client
                    $apiParams = [
                        'leadId' => $lead->getLeadId()
                    ];

                    $this->psa_client->reassignLeadAudit($apiParams);
                }

                // Send the email
                $this->getLeadRepository()->sendLeadEmail($this->account(), $lead, true);

                //Delete leads Cache
                $this->getQueryCacheRepository()->deleteCompanyLeadsCountCache($this->account()->getCompanyId());

                // Log each change
                $this->log_manager->add(\models\ActivityAction::GROUP_LEAD_REASSIGN,
                    "[Group Action] - Lead '" . $lead->getFirstName() . ' ' . $lead->getLastName() . "' reassigned to " . $emailAccount->getFullName(),
                    null,
                    null,
                    $lead->getCompany(),
                    $this->account()
                );
            }
        }
        $this->em->flush();
    }

    public function groupDeleteProspects()
    {
        if (is_array($this->input->post('ids'))) {

            // Logging
            foreach ($this->input->post('ids') as $id) {
                $prospect = $this->em->find('\models\Prospects', $id);
                /* @var $prospect \models\Prospects */

                // Log each change
                $this->log_manager->add(\models\ActivityAction::DELETE_PROSPECT,
                    "[Group Action] - Prospect '" . $prospect->getFullName() . "' deleted",
                    null,
                    null,
                    $prospect->getCompany(),
                    $this->account()
                );
            }

            $this->load->database();
            $sql = 'DELETE FROM prospects WHERE prospectId IN (';
            $k = 0;
            foreach ($this->input->post('ids') as $id) {
                if ($k) {
                    $sql .= ', ';
                }
                $sql .= $id;
                $k++;
            }
            $sql .= ');';
            $this->db->query($sql);
            $prospect_ids = implode(',', $this->input->post('ids'));
            $sql2 = 'DELETE FROM prospect_group_resend_email WHERE prospect_id IN (' . $prospect_ids . ');';
            $this->db->query($sql2);
        }
    }

    public function groupProspectsChangeOwner()
    {
        if (is_array($this->input->post('ids'))) {
            $this->load->database();
            $sql = 'UPDATE prospects SET account=' . $this->input->post('newOwner') . ' WHERE prospectId IN (';
            $k = 0;
            foreach ($this->input->post('ids') as $id) {
                if ($k) {
                    $sql .= ', ';
                }
                $sql .= $id;
                $k++;
            }
            $sql .= ');';
            $this->db->query($sql);

            $newOwnerAccount = $this->em->find('\models\Accounts', $this->input->post('newOwner'));
            /* @var $newOwnerAccount \models\Accounts */

            // Logging
            foreach ($this->input->post('ids') as $id) {
                $prospect = $this->em->find('\models\Prospects', $id);
                /* @var $prospect \models\Prospects */

                // Log each change
                $this->log_manager->add(\models\ActivityAction::PROSPECT_GROUP_REASSIGN,
                    "[Group Action] - Prospect '" . $prospect->getFullName() . "' reassigned to " . $newOwnerAccount->getFullName(),
                    null,
                    null,
                    $prospect->getCompany(),
                    $this->account()
                );
            }
        }
    }

    public function groupProspectsSendEmail22()
    {
        $counter = 0;
        $noEmailCounter = 0;
        $unassignedCounter = 0;
        if (is_array($this->input->post('ids'))) {

            $ids = $this->input->post('ids');

            foreach ($ids as $prospectId) {

                $prospect = $this->em->findProspect($prospectId);

                if ($prospect->getEmail()) {

                    if ($prospect->getAccount()) {

                        $prospectAccount = $this->em->findAccount($prospect->getAccount());
                        $fromName = $prospectAccount->getFullName();
                        $fromEmail = $prospectAccount->getEmail();

                        $etp = new \EmailTemplateParser();
                        $etp->setProspect($prospect);
                        $etp->setAccount($prospectAccount);
                        $text = $etp->parse($this->input->post('body'));
                        $subject = $etp->parse($this->input->post('subject'));

                        $emailData = [
                            'to' => $prospect->getEmail(),
                            'fromName' => $fromName,
                            'fromEmail' => $fromEmail,
                            'subject' => $subject,
                            'body' => $text,
                            'categories' => ['Group Action Prospect'],
                        ];


                        $this->load->library('jobs');

                        // Save the opaque image
                        $this->jobs->create($_ENV['QUEUE_EMAIL'], 'jobs', 'group_proposal_resend', $emailData, 'test job');
                        //$this->getEmailRepository()->send($emailData);

                        $counter++;
                        //log
                        $this->log_manager->add(\models\ActivityAction::PROSPECT_GROUP_EMAIL,
                            "[Group Action] - Prospect email sent to " . $prospect->getFullName() . ' (' . $prospect->getEmail() . ')',
                            null,
                            null,
                            $this->account()->getCompany(),
                            $this->account()
                        );
                    }
                } else {
                    $noEmailCounter++;
                }
            }
            $this->em->flush();
        }
        $response = array();
        $response['counter'] = $counter;
        $response['noEmailCounter'] = $noEmailCounter;
        $response['success'] = true;
        echo json_encode($response);
    }


    public function groupProspectsSendEmail()
    {
        $this->load->library('JsonResponse');
        $response = new JsonResponse();
        // DOn't send if blank content, or the default content of the textarea
        if (!$this->input->post('body') || ($this->input->post('body') == 'This is the content')) {
            $response->success = 0;
            $response->error = 1;
            $response->count = 0;
            $response->send();
        } else {
            //build email data
            $emailData = [
                'subject' => $this->input->post('subject'),
                'body' => $this->input->post('body'),
                'fromName' => $this->input->post('fromName'),
                'fromEmail' => $this->input->post('fromEmail'),
                'replyTo' => $this->input->post('fromEmail'),
                'emailCC' => ($this->input->post('emailCC') == 'true'),
                'categories' => ['Group Resend'],
                'prospect_filter' => $this->input->post('prospectFilter')
            ];


            $job_array = [
                'prospect_ids' => $this->input->post('ids'),
                'email_data' => $emailData,
                'account_id' => $this->account()->getAccountId(),
                'resend_id' => $this->input->post('resendId'),
                'resend_name' => $this->input->post('new_resend_name')

            ];


            $this->load->library('jobs');

            // Save the opaque image
            $this->jobs->create($_ENV['QUEUE_EMAIL'], 'jobs', 'group_prospect_email_send', $job_array, 'test job');

            //send all proposals selected
            // $counts = $this->getProspectRepository()->groupSend($this->input->post('ids'), $emailData,
            //     $this->account(),'prospect_send',NULL,$this->input->post('resendId'),$this->input->post('new_resend_name'));
            $response->success = true;
            $response->counter = 0;
            $response->noEmailCounter = 0;
            //$response->already_sent = $counts['already_sent'];
            $response->send();
        }
    }

    public function sendNavLink()
    {

        // Load the template
        $template = $this->em->find('models\Email_templates', 17);
        /* @var $template \models\Email_templates */

        // Load the parser and parse
        $etp = new EmailTemplateParser();
        $etp->setNavLink($this->input->post('navLink'));

        $subject = $template->getTemplateSubject();
        $text = $etp->parse($template->getTemplateBody());

        $emailData = [
            'to' => $this->input->post('navEmail'),
            'fromName' => SITE_NAME,
            'fromEmail' => 'no-reply@' . SITE_EMAIL_DOMAIN,
            'subject' => $subject,
            'body' => $text,
            'categories' => ['Navigation Link'],
        ];

        $this->getEmailRepository()->send($emailData);

        echo json_encode(['sent' => 1]);
    }

    public function sendPasswordReset()
    {

        $accountId = $this->input->post('accountId');

        $account = $this->em->findAccount($accountId);

        if ($account) {
            $account->sendPasswordReset();
            $this->log_manager->add(\models\ActivityAction::RESET_PASSWORD, 'Password Reset email sent to ' . $account->getEmail());
        }

        $data = ['success' => 1];

        echo json_encode($data);

    }

    public function getUserAuditTypes()
    {
        $accountId = $this->input->post('accountId');
        $account = $this->em->findAccount($accountId);

        if (!$account) {
            echo json_encode([]);
        } else {
            $this->load->library('psa_client', ['account' => $account]);
            $responseObj = $this->psa_client->getAuditTypes();

            echo json_encode($responseObj);
        }
    }

    public function accountGroupMerge()
    {
        $reassignId = $this->input->post('reassignTo');
        $reassignAccount = $this->em->find('models\ClientCompany', $reassignId);
        $ids = $this->input->post('ids');
        $numMerged = 0;

        foreach ($ids as $id) {

            $cAccount = $this->em->find('models\ClientCompany', $id);

            if ($cAccount) {

                //  $clients = $this->getClientRepository()->getAccountClients($id);
                //  $businessTypes = $this->getCompanyRepository()->getCompanyBusinessTypeAssignments($this->account()->getCompany(),'account',$reassignId,true);
                // foreach($clients as $client){

                //     foreach ($businessTypes as $business_type) {
                //         $this->getClientRepository()->checkClientBusinessTypeAssignment($client->clientId,$business_type,$this->account()->getCompany()->getCompanyId());

                //     }
                // }

                // $this->em->flush();
                $this->getCompanyRepository()->checkAccountClientAssignedBusinessTypes($this->account()->getCompany(), $reassignId, $id);

                // Reassign
                $this->db->query("UPDATE clients SET client_account = " . $reassignId . " WHERE client_account = " . $id);
                $this->em->remove($cAccount);
                $numMerged++;


                $this->log_manager->add(\models\ActivityAction::ACCOUNT_MERGED,
                    '[Group Action] Account ' . $cAccount->getName() . ' merged into ' . $reassignAccount->getName());
            }
        }
        $this->em->flush();

        $response = [
            'error' => 0,
            'numMerged' => $numMerged,
        ];

        echo json_encode($response);
    }

    public function accountGroupDelete()
    {
        $resdentialarr = array();
         $ids = $this->input->post('ids');
        $numDeleted = 0;
         foreach ($ids as $id) {
            $cAccount = $this->em->find('models\ClientCompany', $id);
            if ($cAccount) {
                 foreach ($cAccount->getContacts() as $client) {
                    $proposals = $client->getProposals();
                     $checkResidential =  $cAccount->getName();
                     if($checkResidential!="Residential")
                     {
                          foreach ($proposals as $proposal) {
                            /* @var \models\Proposals $proposal */
                            $proposalImages = $proposal->getProposalImages();
                            foreach ($proposalImages as $proposalImage) {
                                  $this->em->remove($proposalImage);
                            }
                            $proposalAttachments = $proposal->getAttatchments();
                            foreach ($proposalAttachments as $proposalAttachment) {
                             $this->em->remove($proposalAttachment);
                            }
                            $this->em->flush();
                            $this->em->remove($proposal);
                            $this->em->flush();
                        }
                            $this->em->remove($client);
                            $this->em->flush();
                    }else{
                        $resdentialarr = "Residential";
                    }
                }
              
                if(empty($resdentialarr))
                {
                    $this->em->remove($cAccount);
                    $numDeleted++;
                    $this->log_manager->add(\models\ActivityAction::DELETE_ACCOUNT, '[Group Action] Account Deleted - ' . $cAccount->getName());
                } 
                $this->em->flush();

            }
        }
        $this->em->flush();

        $response = [
            'error' => 0,
            'numDeleted' => $numDeleted,
        ];

        echo json_encode($response);
    }

    public function ajaxGetAccounts()
    {
        $cAccounts = $this->account()->getAccountsTableData();
        $filteredAccounts = $this->account()->getAccountsTableData(true);
        $data = [];
        $accountsData = [];

        foreach ($cAccounts as $cAccount) {

            $templateData = [
                'cAccount' => $cAccount,
            ];

            $business_type = '<div style="text-align:center"><a href="javascript:void(0);" class="tiptip manage_business_type" title="Add Business Type"  rel="' . $cAccount->id . '"  style="font-size: 14px;color:#a5a2a2;"><i class="fa fa-fw fa-plus"  ></i></a></div>';
            if ($cAccount->types) {
                $types = explode(',', $cAccount->types);
                if (count($types) > 1) {
                    $business_type_tooltip = '';
                    foreach ($types as $type) {

                        $business_type_tooltip .= $type . '<br/>';
                    }
                    $business_type = '<div><span  class="tiptip manage_business_type" title="Update Business Type"  rel="' . $cAccount->id . '"  style="color:#25AAE1;">' . $types[0] . '</span> <a class="tiptip" style="cursor:pointer" title="' . $business_type_tooltip . '"> +' . (count($types) - 1) . '</a></div>';
                } else if (count($types) == 1) {
                    $business_type = '<div><span  class="tiptip manage_business_type" title="Update Business Type"  rel="' . $cAccount->id . '"  style="color:#25AAE1;">' . $types[0] . '</span></div>';
                }
            }
            $ownerName = '<span class="tiptip" title="' . $cAccount->firstName . ' ' . $cAccount->lastName . '">' . substr($cAccount->firstName, 0, 1) . '. ' . substr($cAccount->lastName, 0, 1) . '. </span>';

            $accountsData[] = [
                $this->load->view('templates/accounts/table/check', $templateData, true),
                $this->load->view('templates/accounts/table/actions', $templateData, true),
                $cAccount->name,
                $business_type,
                $cAccount->numContacts,
                $cAccount->numProposals,
                '$' . number_format($cAccount->totalBid),

                '$' . number_format($cAccount->totalSold),
                //$won_rate ,
                round($cAccount->percent_total, 2) . ' %',
                $ownerName,

            ];
        }

        $data['aaData'] = $accountsData;
        $data['sEcho'] = $this->input->get('sEcho');
        $data["iTotalRecords"] = $filteredAccounts;
        $data["iTotalDisplayRecords"] = $filteredAccounts;
        echo json_encode($data);
    }

    public function ajaxGetUserAccounts($user_id)
    {
        $cAccounts = $this->account()->getUserAccountsTableData($user_id);
        $numResults = $this->account()->getUserAccountsTableDataCount($user_id);
        $data = [];
        $accountsData = [];

        foreach ($cAccounts as $cAccount) {

            $names = '';
            $names2 = explode(' ', trim($cAccount->firstName . ' ' . $cAccount->lastName));
            foreach ($names2 as $name) {
                $names .= substr($name, 0, 1) . ' . ';
            }

            $templateData = [
                'cAccount' => $cAccount,
            ];

            $percent_td = ($cAccount->percent_total > 0) ? '<a href="' . base_url() . 'proposals/stats/' . $cAccount->id . '/' . $user_id . '/won_rate" title="View Proposals" class="tiptip "  >' . round($cAccount->percent_total, 2) . ' %</a>' : round($cAccount->percent_total, 2) . ' %';
            $actual_percent = ($cAccount->totalBid > 0) ? (($cAccount->totalSold * 100) / $cAccount->totalBid) : 0;
            if ($actual_percent > $cAccount->percent_total) {
                $percent_td .= ' <i class="fa fa-fw fa-info-circle  tiptipleft right" style="margin-top: 1px;" title="This % does not match the Won $ amount.</br></br>This is because you have won a proposal that was created before the time range you selected.</br></br>The Win Rate is only for proposals you created AND won in the time range."></i>';
            } else if ($actual_percent < $cAccount->percent_total) {
                $percent_td .= ' <i class="fa fa-fw fa-info-circle  tiptipleft right" style="margin-top: 1px;" title="This % does not match the Won $ amount.</br></br>This is because you have some proposals marked as won, but do not have a win date saved which means they are not included in the Won $. </br></br>Update the win rate of your won proposals and this number will update automatically."></i>';
            }

            $accountsData[] = [
                '<input type="checkbox" data-account-id="' . $cAccount->id . '" class="groupSelect">',
                '<a href="javascript:void(0);" class="account_status_info" data-val="' . $cAccount->id . '" >' . $cAccount->name . '</a>',
                $cAccount->numContacts,
                ($cAccount->numProposals > 0) ? '<a href="' . base_url() . 'proposals/stats/' . $cAccount->id . '/' . $user_id . '" title="View Proposals" class="tiptip show_stats_proposals"  >' . $cAccount->numProposals . '</a>' : $cAccount->numProposals,
                ($cAccount->totalBid > 0) ? '<a href="' . base_url() . 'proposals/stats/' . $cAccount->id . '/' . $user_id . '" title="View Proposals" class="tiptip show_stats_proposals"  >$' . number_format($cAccount->totalBid) . '</a>' : '$' . number_format($cAccount->totalBid),
                ($cAccount->totalOpen > 0) ? '<a href="' . base_url() . 'proposals/stats/' . $cAccount->id . '/' . $user_id . '/open" title="View Proposals" class="tiptip "  >$' . number_format($cAccount->totalOpen) . '</a>' : '$' . number_format($cAccount->totalOpen),
                ($cAccount->totalOther > 0) ? '<a href="' . base_url() . 'proposals/stats/' . $cAccount->id . '/' . $user_id . '/other" title="View Proposals" class="tiptip "  >$' . number_format($cAccount->totalOther) . '</a>' : '$' . number_format($cAccount->totalOther),
                ($cAccount->totalSold > 0) ? '<a href="' . base_url() . 'proposals/stats/' . $cAccount->id . '/' . $user_id . '/won" title="View Proposals" class="tiptip "  >$' . number_format($cAccount->totalSold) . '</a>' : '$' . number_format($cAccount->totalSold),
                $percent_td,

                //$won_rate,
                '<span class="tiptip" title="' . $cAccount->firstName . ' ' . $cAccount->lastName . '">' . $names . '</span>',

            ];
        }

        $data['aaData'] = $accountsData;
        $data['sEcho'] = $this->input->get('sEcho');
        $data["iTotalRecords"] = $numResults;
        $data["iTotalDisplayRecords"] = $numResults;
        echo json_encode($data);
    }

    public function accountInfoStats()
    {


        $account = $this->account();
        $time['start'] = '0';
        $time['finish'] = Carbon::create()->endOfDay()->timestamp;
        $cAccount = $this->em->findClientAccount($this->input->post('accountId'));
        $time['start'] = strtotime($this->input->post('from'));
        $time['finish'] = strtotime("11:59:59pm " . $customFrom = $this->input->post('to'));
        // print_r($cAccount->getRangeCreatedProposals($time, true));die;
        // Totals
        $data['proposalCount'] = $cAccount->getRangeCreatedProposals($time, true, true);
        $data['proposalValue'] = $cAccount->getRangeCreatedProposalsPrice($time);
        $data['avgValue'] = $data['proposalCount'] ? (readableValue($data['proposalValue'] / $data['proposalCount'])) : 0;
        $data['readableTotalValue'] = readableValue($data['proposalValue']);

        // Completed
        $compVal = $cAccount->getRangeMagicNumber($time,
            $account->getCompany()->getDefaultStatus(\models\Status::COMPLETED));
        $data['completedValue'] = readableValue($compVal);
        // Won
        $wonVal = $cAccount->getRangeMagicNumber($time, $account->getCompany()->getDefaultStatus(\models\Status::WON));
        $data['wonValue'] = readableValue($wonVal);
        // Open
        $openVal = $cAccount->getRangeMagicNumber($time,
            $account->getCompany()->getDefaultStatus(\models\Status::OPEN));
        $data['openValue'] = readableValue($openVal);
        // Lost
        $lostVal = $cAccount->getRangeMagicNumber($time,
            $account->getCompany()->getDefaultStatus(\models\Status::LOST));
        $data['lostValue'] = readableValue($lostVal);

        $data['time'] = $time;

        // Return as JSON
        echo json_encode($data);


    }

    public function accountInfoPie()
    {
        $this->load->library('stats/MyQueryServlet');
        $servlet = new MyQueryServlet();

        $cAccount = $this->em->findClientAccount($this->input->post('accountId'));
        $time = array();
        $time['start'] = '0';
        $time['finish'] = Carbon::create()->endOfDay()->timestamp;
        $time['start'] = strtotime($this->input->post('from'));
        $time['finish'] = strtotime("11:59:59pm " . $customFrom = $this->input->post('to'));

        $statuses = $this->account()->getCompany()->getStatuses();
        $totalVal = 0;

        // Create the datatable
        $data = new DataTable();
        // Colums for pie chart
        $data->addColumn(new ColumnDescription('status', ValueType::STRING, 'Status'));
        $data->addColumn(new ColumnDescription('value', ValueType::NUMBER, 'Value'));

        foreach ($statuses as $status) {
            $val = $cAccount->getRangeCreatedProposalsStatusPrice($time, $status->getStatusId());
            $totalVal += $val;
            $theVal = (int)$val;

            // Only add the status if it has a value
            if ($theVal > 0) {
                $row = new TableRow(array($status->getText(), $theVal));

                $data->addRow($row);
            }
        }

        if ($totalVal > 0) {
            $servlet->setDataTable($data);
            $servlet->execute();
        } else {
            echo json_encode(array('empty' => 1));
        }
    }

    public function accountUserStatsPie()
    {
        $this->load->library('stats/MyQueryServlet');
        $servlet = new MyQueryServlet();

        $cAccount = $this->em->findClientAccount($this->input->post('accountId'));
        // print_r($cAccount->getId());die;
        $time = array();
        $time['start'] = strtotime($this->input->post('from'));
        $time['finish'] = strtotime("11:59:59pm " . $customFrom = $this->input->post('to'));


        $allUserStats = $cAccount->accountProposalsUserStats($time);


        // if($this->session->userdata('accFilter')) {
        //     if ($this->session->userdata('accFilterAUser')) {
        //         $allUserIds = $this->session->userdata('accFilterAUser');
        //         $aUsers = implode(',', $this->session->userdata('accFilterAUser'));

        //     }else{
        //         $allUserIds = $cAccount->accountProposalsUserIds();
        //     }
        // }else{
        //$allUserIds = $cAccount->accountProposalsUserIds();
        //}
        //print_r($allUserIds);die;

        $totalVal = 0;

        // Create the datatable
        $data = new DataTable();
        // Colums for pie chart
        $data->addColumn(new ColumnDescription('user', ValueType::STRING, 'User'));
        $data->addColumn(new ColumnDescription('value', ValueType::NUMBER, 'Value'));
        $table_data = array();
        $i = 0;
        foreach ($allUserStats as $userData) {
            // $val = $cAccount->getProposalsUserPrice($userData['user_id']);
            // $user = $this->em->findAccount($userData['user_id']);
            $totalVal += $userData['total_amount'];
            // $theVal = (int) $val;

            // Only add the status if it has a value
            if ($userData['total_amount'] > 0) {
                $row = new TableRow(array($userData['firstName'] . ' ' . $userData['lastName'], $userData['total_amount']));
                $data->addRow($row);
            }


        }

        if ($totalVal > 0) {
            $servlet->setDataTable($data);
            $servlet->execute();
        } else {
            echo json_encode(array('empty' => 1));
        }
    }


    public function accountUserInfoPie()
    {
        $this->load->library('stats/MyQueryServlet');
        $servlet = new MyQueryServlet();

        $cAccount = $this->em->findClientAccount($this->input->post('accountId'));
        $userId = $this->input->post('user_id');
        $time = array();
        $time['start'] = '0';
        $time['finish'] = Carbon::create()->endOfDay()->timestamp;
        $time['start'] = strtotime($this->input->post('from'));
        $time['finish'] = strtotime("11:59:59pm " . $customFrom = $this->input->post('to'));

        $statuses = $this->account()->getCompany()->getStatuses();
        $totalVal = 0;

        // Create the datatable
        $data = new DataTable();
        // Colums for pie chart
        $data->addColumn(new ColumnDescription('status', ValueType::STRING, 'Status'));
        $data->addColumn(new ColumnDescription('value', ValueType::NUMBER, 'Value'));

        foreach ($statuses as $status) {
            $val = $cAccount->getRangeCreatedProposalsStatusPrice($time, $status->getStatusId(), $userId);
            $totalVal += $val;
            $theVal = (int)$val;

            // Only add the status if it has a value
            if ($theVal > 0) {
                $row = new TableRow(array($status->getText(), $theVal));
                $data->addRow($row);
            }
        }

        if ($totalVal > 0) {
            $servlet->setDataTable($data);
            $servlet->execute();
        } else {
            echo json_encode(array('empty' => 1));
        }
    }

    public function accountAllUserStatsPie()
    {

        $cAccount = $this->em->findClientAccount($_POST['accountId']);
        $time = array();
        $time['start'] = strtotime($_POST['from']);
        $time['finish'] = strtotime("11:59:59pm " . $customFrom = $_POST['to']);
        $allUserStats = $cAccount->accountProposalsUserStats($time);

        $this->load->library('stats/MyQueryServlet');
        $servlet = new MyQueryServlet();


        $totalVal = 0;

        // Create the datatable
        $data = new DataTable();
        // Colums for pie chart
        $data->addColumn(new ColumnDescription('status', ValueType::STRING, 'Name'));
        $data->addColumn(new ColumnDescription('value', ValueType::NUMBER, 'Bid'));

        foreach ($allUserStats as $userData) {

            $totalVal += $userData['total_amount'];
            $theVal = (int)$userData['total_amount'];

            // Only add the status if it has a value
            if ($theVal > 0) {
                $row = new TableRow(array($userData['firstName'] . ' ' . $userData['lastName'], $theVal));
                $data->addRow($row);
            }
        }

        if ($totalVal > 0) {
            $servlet->setDataTable($data);
            $servlet->execute();
        } else {
            echo json_encode(array('empty' => 1));
        }
    }


    public function accountUserInfoTable()
    {

        $cAccount = $this->em->findClientAccount($_GET['accountId']);
        $userId = $_GET['user_id'];
        $time = array();
        $time['start'] = strtotime($_GET['from']);
        $time['finish'] = strtotime("11:59:59pm " . $customFrom = $_GET['to']);

        //$statuses = $this->account()->getCompany()->getStatuses();
        $totalVal = 0;

        $statusesData = $cAccount->getRangeCreatedProposalsStatusCountPrice($time, 1, $userId);

        // Create the datatable
        $table_data = array();
        foreach ($statusesData as $data) {
            //$val = $cAccount->getRangeCreatedProposalsStatusCountPrice($time, $status->getStatusId(),$userId);
            // print_r($val);die;
            $totalVal += $data['p_total'];
            $theVal = (int)$data['p_total'];

            $statusName = ($data['sales'] == 1) ? '<span class="tiptip" title ="Sales Status">[S]</span> ' . $data['text'] : $data['text'];
            // Only add the status if it has a value
            if ($data['p_count'] > 0) {
                $table_data[] = array(
                    '0' => $statusName,
                    '1' => '<a href="' . base_url() . 'proposals/account_stats/' . $_GET['accountId'] . '/' . $_GET['user_id'] . '/' . $data['id'] . '" title="View Proposals" class="tiptip "  >' . $data['p_count'] . '</a>',
                    '2' => '$' . number_format($theVal),

                );
            }


        }

        $tableData['sEcho'] = (int)$this->input->post('echo');
        $tableData['iTotalRecords'] = count($table_data);
        $tableData['iTotalDisplayRecords'] = count($table_data);
        $tableData['aaData'] = $table_data;
        echo json_encode($tableData);


    }

    public function accountUserStatsInfoTable()
    {

        $cAccount = $this->em->findClientAccount($_GET['accountId']);
        $userId = $_GET['user_id'];
        $time = array();
        $time['start'] = strtotime($_GET['from']);
        $time['finish'] = strtotime("11:59:59pm " . $customFrom = $_GET['to']);

        //$statuses = $this->account()->getCompany()->getStatuses();
        $totalVal = 0;

        $statusesData = $cAccount->getRangeCreatedProposalsStatusCountPrice($time, 1, $userId);

        // Create the datatable
        $table_data = array();
        foreach ($statusesData as $data) {
            //$val = $cAccount->getRangeCreatedProposalsStatusCountPrice($time, $status->getStatusId(),$userId);
            // print_r($val);die;
            $totalVal += $data['p_total'];
            $theVal = (int)$data['p_total'];

            $statusName = ($data['sales'] == 1) ? '<span class="tiptip" title ="Sales Status">[S]</span> ' . $data['text'] : $data['text'];
            // Only add the status if it has a value
            if ($data['p_count'] > 0) {
                $table_data[] = array(
                    '0' => $statusName,
                    '1' => '<a href="' . base_url() . 'proposals/stats/' . $_GET['accountId'] . '/' . $_GET['user_id'] . '/' . $data['id'] . '" title="View Proposals" class="tiptip "  >' . $data['p_count'] . '</a>',
                    '2' => '$' . number_format($theVal),

                );
            }


        }

        $tableData['sEcho'] = (int)$this->input->post('echo');
        $tableData['iTotalRecords'] = count($table_data);
        $tableData['iTotalDisplayRecords'] = count($table_data);
        $tableData['aaData'] = $table_data;
        echo json_encode($tableData);


    }

    public function accountUserStatsTable()
    {

        $cAccount = $this->em->findClientAccount($_GET['accountId']);
        $time = array();
        $time['start'] = strtotime($_GET['from']);
        $time['finish'] = strtotime("11:59:59pm " . $customFrom = $_GET['to']);
        $allUserStats = $cAccount->accountProposalsUserStats($time);

        // print_r($allUserStats);die;

        $table_data = array();
        $i = 0;
        foreach ($allUserStats as $userData) {
            $percent_td = ($userData['percent_total'] > 0) ? '<a href="' . base_url() . 'proposals/account_stats/' . $_GET['accountId'] . '/' . $userData['user_id'] . '/won_rate" title="View Proposals" class="tiptip "  > ' . round($userData['percent_total'], 2) . '%</a>' : round($userData['percent_total'], 2) . ' %';
            $actual_percent = ($userData['total_amount'] > 0) ? (($userData['totalSold'] * 100) / $userData['total_amount']) : 0;
            if ($actual_percent > $userData['percent_total']) {
                $percent_td .= ' <i class="fa fa-fw fa-info-circle  tiptipleft right" style="margin-top: 1px;" title="This % does not match the Won $ amount.</br></br>This is because you have won a proposal that was created before the time range you selected.</br></br>The Win Rate is only for proposals you created AND won in the time range."></i>';
            } else if ($actual_percent < $userData['percent_total']) {
                $percent_td .= ' <i class="fa fa-fw fa-info-circle  tiptipleft right" style="margin-top: 1px;" title="This % does not match the Won $ amount.</br></br>This is because you have some proposals marked as won, but do not have a win date saved which means they are not included in the Won $. </br></br>Update the win rate of your won proposals and this number will update automatically."></i>';
            }

            $table_data[] = array(
                '0' => '<a class="user_name_stats" data-val="' . $userData['user_id'] . '" href="javascript:void(0)">' . $userData['firstName'] . ' ' . $userData['lastName'] . '</a>',
                '1' => '<a href="' . base_url() . 'proposals/account_stats/' . $_GET['accountId'] . '/' . $userData['user_id'] . '" title="View Proposals" class="tiptip "  > ' . $userData['proposal_count'] . '</a>',
                '2' => '<a href="' . base_url() . 'proposals/account_stats/' . $_GET['accountId'] . '/' . $userData['user_id'] . '" title="View Proposals" class="tiptip "  > $' . number_format($userData['total_amount']) . '</a>',
                '3' => ($userData['totalSold'] > 0) ? '<a href="' . base_url() . 'proposals/account_stats/' . $_GET['accountId'] . '/' . $userData['user_id'] . '/won" title="View Proposals" class="tiptip "  > $' . number_format($userData['totalSold']) . '</a>' : '$' . number_format($userData['totalSold']),
                '4' => $percent_td,
            );

        }


        $tableData['sEcho'] = (int)$this->input->post('echo');
        $tableData['iTotalRecords'] = count($table_data);
        $tableData['iTotalDisplayRecords'] = count($table_data);
        $tableData['aaData'] = $table_data;
        echo json_encode($tableData);
    }


    public function history($filterBy = null, $filterId = null)
    {

        $data = array();

        $logs = $this->account()->getHistoryData();

        foreach ($logs as $log) {
            $data[] = [
                '0' => date('m/d/Y h:i:s A', ($log->timeAdded + $this->account()->getTimeZoneOffset())),
                '1' => $log->timeAdded + $this->account()->getTimeZoneOffset(),
                '2' => ($log->userName) ?: ($log->account ? $log->accountFirstName . ' ' . $log->accountLastName : 'No User'),
                '3' => mapIP($log->ip),
                '4' => ($log->client) ? $log->clientCompanyName : 'None',
                '5' => ($log->proposal) ? $log->projectName : 'None',
                $log->details,
            ];
        }
        $total = $this->account()->getHistoryData(false);
       // $filterTotal = $this->account()->getHistoryDataTotal(true);
        $json = [];
        $json["iTotalRecords"] = $total;
        $json["iTotalDisplayRecords"] = $total;
        $json['aaData'] = $data;
        $json['sEcho'] = $this->input->get('sEcho');
        echo json_encode($json);
    }


    public function admin_history($filterBy = null, $filterId = null)
    {

        $data = array();

        $logs = $this->account()->getAdminHistoryData();

        foreach ($logs as $log) {
            $data[] = [
                '0' => date('m/d/Y h:i:s A', ($log->timeAdded + $this->account()->getTimeZoneOffset())),
                '1' => $log->timeAdded + $this->account()->getTimeZoneOffset(),
                '2' => ($log->projectCompanyName) ?: ($log->accountCompanyName ?: 'No Company'),
                '3' => ($log->userName) ?: ($log->account ? $log->accountFirstName . ' ' . $log->accountLastName : 'No User'),
                '4' => mapIP($log->ip),
                '5' => ($log->client) ? $log->clientCompanyName : 'None',
                '6' => ($log->proposal) ? $log->projectName : 'None',
                $log->details,
            ];
        }
       // $total = $this->account()->getAdminHistoryDataTotal();
        $filterTotal = $this->account()->getAdminHistoryData(false);
        $json = [];
        $json["iTotalRecords"] = $filterTotal;
        $json["iTotalDisplayRecords"] = $filterTotal;
        $json['aaData'] = $data;
        $json['sEcho'] = $this->input->get('sEcho');
        echo json_encode($json);
    }
 

    public function editProposalLinkName()
    {
        $proposalLinkRepository = new \Pms\Repositories\ProposalLinks();
        $id = str_replace('name_', '', $this->input->post('id'));
        $proposalLinkRepository->saveLinkName($id, $this->input->post('value'));
        echo $this->input->post('value');
    }

    public function editProposalLinkURL()
    {
        $proposalLinkRepository = new \Pms\Repositories\ProposalLinks();
        $id = str_replace('url_', '', $this->input->post('id'));
        $proposalLinkRepository->saveLinkURL($id, $this->input->post('value'));
        echo $this->input->post('value');
    }

    public function searchClientAccounts()
    {

        $this->load->database();

        $sql = 'SELECT cc.* FROM client_companies cc
            LEFT JOIN accounts a ON cc.owner_user = a.accountId
            WHERE cc.owner_company = ' . $this->account()->getCompany()->getCompanyId();

        if ((!$this->account()->isAdministrator() && $this->account()->hasFullAccess()) && $this->account()->isUser()) {
            $sql .= ' AND cc.owner_user = ' . $this->account()->getAccountId();
        }

        if ($this->account()->isBranchAdmin()) {
            $sql .= ' AND a.branch = ' . $this->account()->getBranch();
        }

        $sql .= " AND cc.name LIKE '%" . $this->input->post('searchVal') . "%'";

        $sql .= ' LIMIT 30';

        $companies = $this->db->query($sql)->result();

        $jsonAccounts = array();
        foreach ($companies as $company) {
            $jsonAccounts[] = array(
                'label' => $company->name,
                'value' => $company->id,
            );
        }
        echo json_encode($jsonAccounts);
    }

    public function updateProposalSettings()
    {
        $response = new JsonResponse();

        // Check if login required
        if (!$this->account()) {
            $response->loginRequired = 1;
            $response->send();
            return;
        }

        $proposal = $this->em->findProposal($this->input->post('proposalId'));
        // Check proposal Load
        if (!$proposal) {
            $response->error = 1;
            $response->text = 'Proposal could not be loaded';
            $response->send();
            return;
        }

        // Check values and update //

        // Owner
        if ($this->input->post('owner') && ($this->input->post('owner') != $proposal->getOwner()->getAccountId())) {
            $owner = $this->em->findAccount($this->input->post('owner'));
            $old_owner = $proposal->getOwner();
            $proposal->setOwner($owner);
            $this->getLogRepository()->add([
                'action' => 'proposal_change_owner',
                'details' => "Owner changed From " . $old_owner->getFullName() . "  to " . $owner->getFullName(),
                'proposal' => $proposal->getProposalId(),
                'account' => $this->account()->getAccountId(),
                'company' => $this->account()->getCompanyId(),
            ]);
        }

        // Resend settings
        if (
            ($this->input->post('resendFrequency') * 86400) != $proposal->getResendFrequency() ||
            $this->input->post('automaticResend') != $proposal->getResendEnabled() ||
            $this->input->post('template') != $proposal->getResendTemplate()
        ) {
            // Format frequency
            $frequency = (($this->input->post('resendFrequency') * 86400) >= 86400) ? round($this->input->post('resendFrequency') * 86400) : 86400;

            $proposal->setResendFrequency($frequency);
            $proposal->setResendTemplate($this->input->post('template'));
            $proposal->setResendEnabled($this->input->post('automaticResend'));
            $this->em->persist($proposal);
            $this->em->flush();

            $this->getLogRepository()->add([
                'action' => 'proposal_change_owner',
                'details' => 'Proposal Resend Settings Changed',
                'proposal' => $proposal->getProposalId(),
                'account' => $this->account()->getAccountId(),
                'company' => $this->account()->getCompanyId(),
            ]);
        }

        // Layout
        if ($this->input->post('layout') != $proposal->getLayout()) {
            $proposal->setLayout($this->input->post('layout'));

            $this->em->persist($proposal);
            $this->em->flush();
            $this->getLogRepository()->add([
                'action' => \models\ActivityAction::PROPOSAL_CHANGE_LAYOUT,
                'details' => "Proposal layout changed to " . $proposal->getLayout(),
                'proposal' => $proposal->getProposalId(),
                'account' => $this->account()->getAccountId(),
                'company' => $this->account()->getCompanyId(),
            ]);

           
        }

        //SHow popup
        if ($this->input->post('preProposalPopup') != $proposal->getIsPreProposalPopup()) {
            $proposal->setIsPreProposalPopup($this->input->post('preProposalPopup'));
            $this->em->persist($proposal);
            $this->em->flush();
            $msg = 'Not visible';
            if ($this->input->post('preProposalPopup') == 1) {
                $msg = 'visible';
            }
            $this->getLogRepository()->add([
                'action' => 'proposal_change_show_popup',
                'details' => "Proposal Pre Proposal popup is " . $msg,
                'proposal' => $proposal->getProposalId(),
                'account' => $this->account()->getAccountId(),
                'company' => $this->account()->getCompanyId(),
            ]);
        }
        // Payment Terms
        if ($this->input->post('paymentTerm') != $proposal->getPaymentTerm()) {
            $proposal->setPaymentTerm($this->input->post('paymentTerm'));
            $this->getLogRepository()->add([
                'action' => 'proposal_change_payment_term',
                'details' => "Payment term changed to " . $this->input->post('paymentTerm'),
                'proposal' => $proposal->getProposalId(),
                'account' => $this->account()->getAccountId(),
                'company' => $this->account()->getCompanyId(),
            ]);
        }

        // Proposal Setting Date
        $newProposalTime = Carbon::createFromFormat('m/d/Y', $this->input->post('proposalSettingDate'));
        $proposalTime = Carbon::createFromTimestamp($proposal->getCreated(false));
        if (!$proposalTime->isSameDay($newProposalTime)) {
            // Change the status update time if open
            if ($proposal->getProposalStatus()->getStatusId() == \models\Status::OPEN) {
                $proposal->setStatusChangeDate($newProposalTime->timestamp);
            }
            //Event Log
            $this->getProposalEventRepository()->changeProposalCreated($proposal, $this->account(), $proposal->getCreated(false), $newProposalTime->timestamp);
            $proposal->setCreated($newProposalTime->timestamp);
            $this->getLogRepository()->add([
                'action' => \models\ActivityAction::UPDATE_PROPOSAL_SETTING,
                'details' => "Proposal Date changed to  " . $newProposalTime->format('m/d/Y'),
                'proposal' => $proposal->getProposalId(),
                'account' => $this->account()->getAccountId(),
                'company' => $this->account()->getCompanyId(),
            ]);
        }

        // Proposal Status Change Date
        $oldChangeTime = Carbon::createFromTimestamp($proposal->getStatusChangeDate());
        $newChangeTime = Carbon::createFromFormat('m/d/Y', $this->input->post('proposalSettingChangeDate'));
        if (!$oldChangeTime->isSameDay($newChangeTime)) {
            $proposal->setStatusChangeDate($newChangeTime->timestamp);
            $this->getLogRepository()->add([
                'action' => \models\ActivityAction::CHANGE_PROPOSAL_STATUS_DATE,
                'details' => "Proposal Status Change Date updated to  " . $newChangeTime->format('m/d/Y'),
                'proposal' => $proposal->getProposalId(),
                'account' => $this->account()->getAccountId(),
                'company' => $this->account()->getCompanyId(),
            ]);
        }

        // Win Date
        if ($this->input->post('proposalSettingWinDate')) {
            $oldChangeTime = Carbon::createFromTimestamp($proposal->getWinDate());
            $newChangeTime = Carbon::createFromFormat('m/d/Y', $this->input->post('proposalSettingWinDate'));

            if (!$oldChangeTime->isSameDay($newChangeTime)) {
                $proposal->setWinDate($newChangeTime->timestamp);

                $this->getLogRepository()->add([
                    'action' => \models\ActivityAction::CHANGE_PROPOSAL_WIN_DATE,
                    'details' => "Proposal Win Date updated to  " . $newChangeTime->format('m/d/Y'),
                    'proposal' => $proposal->getProposalId(),
                    'account' => $this->account()->getAccountId(),
                    'company' => $this->account()->getCompanyId(),
                ]);
            }
        }
            //work order setting start
            $settingMsg = $this->input->post('workOrderSetting');
            $oldSettingMsg = $proposal->getWorkOrderSetting();
            if ($settingMsg!=$oldSettingMsg) {
               $proposal->setWorkOrderSetting($this->input->post('workOrderSetting'));
               $workOrderSett = ($settingMsg==1) ? "Portrait": "Landscape";
                $this->getLogRepository()->add([
                    'action' => \models\ActivityAction::UPDATE_PROPOSAL_SETTING,
                    'details' => "$workOrderSett Work Order Setting Enabled For Company",
                    'proposal' => $proposal->getProposalId(),
                    'account' => $this->account()->getAccountId(),
                    'company' => $this->account()->getCompanyId(),
                ]);
            }
               //work order setting close

            // Flag for rebuild and save changes
            $proposal->setRebuildFlag(1);
            //create a history log for Hide Proposal
            $hideProposalView = $this->input->post('hiddenProposalView');
            $oldHideProposalView = $proposal->getIsHiddenToView();
            if ($hideProposalView!=$oldHideProposalView) {
            $hideProposalViewMsg = ($hideProposalView==1) ? "Enable": "Disabled";
            $proposal->setIsHiddenToView($hideProposalView);
            $this->getLogRepository()->add([
                'action' => \models\ActivityAction::HIDE_PROPOSAL,
                'details' => "Proposal is $hideProposalViewMsg",
                'proposal' => $proposal->getProposalId(),
                'account' => $this->account()->getAccountId(),
                'company' => $this->account()->getCompanyId(),
            ]);
        }
            //create a history log for Hide Proposal
            
            //create a history log for Email stop start
            $resendExclude = $this->input->post('resendExclude');
            $oldResendExclude = $proposal->getResendExcluded();
            if ($resendExclude!=$oldResendExclude) {
            $resendExcludeMsg = ($resendExclude==1) ? "Enable": "Disabled";
            $proposal->setResendExcluded($resendExclude);
            $this->getLogRepository()->add([
                'action' => \models\ActivityAction::UPDATE_PROPOSAL_SETTING,
                'details' => "Email is $resendExcludeMsg for Proposal",
                'proposal' => $proposal->getProposalId(),
                'account' => $this->account()->getAccountId(),
                'company' => $this->account()->getCompanyId(),
            ]);
        }
        //create a history log for Email stop close
         $proposal->setResendExcluded($this->input->post('resendExclude'));
        $this->em->persist($proposal);
        $this->em->flush();

        $response->send();
    }

    /**
     * @param $proposalId
     */
    public function savePaymentTermText($proposalId)
    {
        $response = new JsonResponse();

        $proposal = $this->em->findProposal($proposalId);

        if (!$proposal) {
            $response->error = 1;
            $response->send();
            return;
        }

       // Generate a log history for save payment term text
          $oldPaymentTermText =  $proposal->getPaymentTermText();
          $newPaymentTermText =  $this->input->post('text');
          if(trim($oldPaymentTermText)!=trim($newPaymentTermText)){
            $this->getLogRepository()->add([
                'action' => \models\ActivityAction::UPDATE_PROPOSAL_SETTING,
                'details' => "Save Payment Term is Updated Successfully",
                'proposal' => $proposal->getProposalId(),
                'account' => $this->account()->getAccountId(),
                'company' => $this->account()->getCompanyId(),
            ]);
          }
       // Generate a log history for save payment term text

        $proposal->setPaymentTermText($this->input->post('text'));
        $proposal->setRebuildFlag(1);
        $this->em->persist($proposal);
        $this->em->flush();

        $response->send();
    }

    /**
     * @param $proposalId
     */
    public function saveContractCopy($proposalId)
    {
        $response = new JsonResponse();

        $proposal = $this->em->findProposal($proposalId);

        if (!$proposal) {
            $response->error = 1;
            $response->send();
            return;
        }
        // Generate a log history for save contract copy
        $oldContractCopy = $proposal->getContractCopy();
        $newContratCopy = $this->input->post('text');
        if(trim($oldContractCopy)!=trim($newContratCopy)){
            $proposal->setContractCopy($this->input->post('text'));
            $this->getLogRepository()->add([
                'action' => \models\ActivityAction::UPDATE_PROPOSAL_SETTING,
                'details' => "Proposal Contract is Updated Successfully",
                'proposal' => $proposal->getProposalId(),
                'account' => $this->account()->getAccountId(),
                'company' => $this->account()->getCompanyId(),
            ]);
        }
        // Generate a log history for save contract copy

        $proposal->setRebuildFlag(1);
        $this->em->persist($proposal);
        $this->em->flush();

        $response->send();
    }

    public function addProposalLink()
    {
        $response = new JsonResponse();
        $linkRepository = new \Pms\Repositories\ProposalLinks();

        $linkId = $linkRepository->addLink(
            $this->input->post('linkName'),
            $this->input->post('linkUrl'),
            $this->account()->getCompanyId(),
            $this->input->post('proposalId')
        );

        if ($linkId) {
            $response->error = 0;
            $response->id = $linkId;

            $this->getLogRepository()->add([
                //'action' => 'proposal_edit_date',
                'action' => \models\ActivityAction::UPDATE_PROPOSAL_SETTING,
                'details' => "Added Proposal Link: " . $this->input->post('linkName') . ' - <a href="' . $this->input->post('linkUrl').'" target="_blank">'.$this->input->post('linkName').'</a>',
                'proposal' => $this->input->post('proposalId'),
                'account' => $this->account()->getAccountId(),
                'company' => $this->account()->getCompanyId(),
            ]);
        } else {
            $response->error = 1;
        }

        $response->send();
    }

    public function deleteProposalLink()
    {
        $linkRepository = new \Pms\Repositories\ProposalLinks();
        $linkRepository->deleteLink($this->input->post('linkId'));

        $this->getLogRepository()->add([
            'action' => 'proposal_edit_date',
            'details' => "Deleted Proposal Link",
            'proposal' => $this->input->post('proposalId'),
            'account' => $this->account()->getAccountId(),
            'company' => $this->account()->getCompanyId(),
        ]);

        $response = new JsonResponse();
        $response->error = 0;
        $response->id = $this->input->post('linkId');
        $response->send();
    }

    public function updateProposalVideo()
    {
        $response = new JsonResponse();
        $buttonShow = 0;
        $proposal = $this->em->findProposal($this->input->post('proposalId'));
        if (!$proposal) {
            $response->error = 0;
            $response->send();
        }


        $videoUrl = $this->input->post('videoUrl');

        if (strpos($this->input->post('videoUrl'), 'screencast.com')) {
            $embed = $this->get_screencast_embed($this->input->post('videoUrl'));
            if ($embed) {
                $videoUrl = $embed;
            }
        }


        $proposal->setVideoURL($videoUrl);

        $this->em->persist($proposal);
        $this->em->flush();

        $url = $videoUrl;
        $finalUrl = '';
        if (strpos($url, 'facebook.com/') !== false) {
            //it is FB video
            $finalUrl .= 'https://www.facebook.com/plugins/video.php?href=' . rawurlencode($url) . '&show_text=1&width=200';
        } else if (strpos($url, 'vimeo.com/') !== false) {
            //it is Vimeo video
            $videoId = explode("vimeo.com/", $url)[1];
            if (strpos($videoId, '&') !== false) {
                $videoId = explode("&", $videoId)[0];
            }
            $finalUrl .= 'https://player.vimeo.com/video/' . $videoId;
        } else if (strpos($url, 'youtube.com/') !== false) {
            if (strpos($proposal->getVideoURL(), 'embed') > 0) {
                $finalUrl = $proposal->getVideoURL();
            } else {
                //it is Youtube video
                $videoId = explode("v=", $url)[1];
                if (strpos($videoId, '&') !== false) {
                    $videoId = explode("&", $videoId)[0];
                }
                $finalUrl .= 'https://www.youtube.com/embed/' . $videoId;
            }
        } else if (strpos($url, 'youtu.be/') !== false) {
            //it is Youtube video
            $videoId = explode("youtu.be/", $url)[1];
            if (strpos($videoId, '&') !== false) {
                $videoId = explode("&", $videoId)[0];
            }
            $finalUrl .= 'https://www.youtube.com/embed/' . $videoId;
        } else if (strpos($url, 'screencast.com/') !== false) {
            $finalUrl = $proposal->getVideoURL();
        } else if (strpos($proposal->getVideoURL(), 'dropbox.com') !== false) {
            $finalUrl = str_replace('dl=0', 'raw=1', $proposal->getVideoURL());
        } else {
            $buttonShow = 1;
            $finalUrl = $proposal->getVideoURL();
        }
        $response->error = 0;
        $response->button_show = $buttonShow;
        $response->embeded_url = $finalUrl;

        $this->getLogRepository()->add([
            'action' => 'proposal_update_video',
            'details' => "Proposal video url updated to  '" . $videoUrl . "''",
            'proposal' => $proposal->getProposalId(),
            'account' => $this->account()->getAccountId(),
            'company' => $this->account()->getCompanyId(),
        ]);

        $response->send();
    }

    public function removeProposalVideo()
    {
        $response = new JsonResponse();

        $proposal = $this->em->findProposal($this->input->post('proposalId'));
        if (!$proposal) {
            $response->error = 0;
            $response->send();
        }

        $proposal->setVideoURL('');
        $proposal->setThumbImageURL('');
        $this->em->persist($proposal);
        $this->em->flush();
        $response->error = 0;

        $this->getLogRepository()->add([
            'action' => 'proposal_remove_video',
            'details' => "Proposal video url Removed",
            'proposal' => $proposal->getProposalId(),
            'account' => $this->account()->getAccountId(),
            'company' => $this->account()->getCompanyId(),
        ]);

        $response->send();
    }

    function remove_proposal_video_thumb_image($videoId)
    {

        $proposalVideo = $this->em->find('models\ProposalVideo', $videoId);
        if (!$proposalVideo) {
            $data['error'] = 1;
            $data['success'] = false;
            $data['message'] = "Unable to load proposal. ProposalVideo ID: " . $videoId;
            echo json_encode($data);
            return;
        }
        $proposalVideo->setThumbnailImage('');


        $this->em->persist($proposalVideo);
        $this->em->flush();

        $companyThumbImage = '';
        $defaultThumbImage = 0;
        if ($proposalVideo->getCompanyVideoId() != 0 && $proposalVideo->getCompanyCoverImage() != '') {
            $companyThumbImage = $proposalVideo->getCompanyCoverImage();
            $defaultThumbImage = 1;
        }

        $proposal = $this->em->findProposal($proposalVideo->getProposalId());
        //Log Proposal video add
        $this->log_manager->add(\models\ActivityAction::DELETE_COVER_IMAGE_PROPOSAL_VIDEO, 'Proposal Video Overlay Image removed' , $proposal->getClient(), $proposal);

        $data['error'] = 0;
        $data['success'] = true;
        $data['defaultThumbImage'] = $defaultThumbImage;
        $data['companyThumbImage'] = $companyThumbImage;
        echo json_encode($data);
    }

    function remove_company_video_thumb_image($videoId)
    {

        $CompanyVideo = $this->em->find('models\CompanyVideo', $videoId);
        if (!$CompanyVideo) {
            $data['error'] = 1;
            $data['success'] = false;
            $data['message'] = "Unable to load Company Video. ProposalVideo ID: " . $videoId;
            echo json_encode($data);
            return;
        }
        $CompanyVideo->setThumbnailImage('');

        $this->em->persist($CompanyVideo);
        $this->em->flush();

        //Log video thumb 
        $this->log_manager->add(\models\ActivityAction::COMPANY_DELETE_COVER_IMAGE_PROPOSAL_VIDEO, 'Company Video Overlay Image Removed');

        $data['error'] = 0;
        $data['success'] = true;
        echo json_encode($data);
    }

    function get_http_response_code($url) {
        $headers = get_headers($url);
        return substr($headers[0], 9, 3);
    }
    


    
    function get_screencast_embed($url)
    {

        if($this->get_http_response_code($url) != "200"){
            return false;

        }else{
            // Initialize Guzzle client
            $client = new Client();

            try {
            // Send an HTTP GET request to fetch the HTML content
            $response = $client->get($url);
            
                // Check if the request was successful (status code 200)
                if ($response->getStatusCode() === 200) {
                    $html = (string)$response->getBody();
                    
                    // Create a DOMDocument object and load the HTML
                    $dom = new DOMDocument();
                    @$dom->loadHTML($html); // Use '@' to suppress warnings
                    
                    // Create a DOMXPath object to query the DOM
                    $xpath = new DOMXPath($dom);
                    
                    $query = '//iframe[@name="embedded_content"]';
                    // Find all iframe elements
                    $iframes = $xpath->query($query);
                    
                    // Loop through the iframe elements and do something with them
                    foreach ($iframes as $iframe) {
                        // Output the entire iframe element
                        return $iframe->getAttribute('src'); // Output the src attribute value
                    }
                } else {
                    return false;
                }
            } catch (Exception $e) {
                return false;
            }
        }


     }


    public function proposalImageLayout()
    {
        $response = new JsonResponse();
        $proposal = $this->em->findProposal($this->input->post('proposalId'));

        if (!$proposal) {
            $response->error = 1;
            $response->send();
            return;
        }

        $proposal->setImagesLayout($this->input->post('layout'));
        $this->em->persist($proposal);
        $this->em->flush();
        $response->error = 0;

        $this->getLogRepository()->add([
            'action' => 'proposal_image_layout',
            'details' => "Proposal image layout changed",
            'proposal' => $proposal->getProposalId(),
            'account' => $this->account()->getAccountId(),
            'userName' => $this->account()->getFullName(),
            'company' => $this->account()->getCompanyId(),
        ]);

        $response->send();
    }

    public function proposalHistory($proposalId)
    {
        $sql = "SELECT log.timeAdded, log.userName, log.ip, log.client, log.account, log.proposal, log.details, log.logId,
        accounts.firstName as accountFirstName, accounts.lastName as accountLastName,
        proposals.projectName
        FROM log
        LEFT JOIN accounts on log.account = accounts.accountId
        LEFT JOIN proposals on log.proposal = proposals.proposalId
        WHERE log.proposal = " . $proposalId;

        // Searching
        $searchVal = $this->input->get('search')['value'];
        if ($searchVal) {
            $sql .= " AND (" .
                "(accounts.firstName LIKE '%" . $searchVal . "%')" .
                "OR (accounts.lastName LIKE '%" . $searchVal . "%')" .
                "OR (CONCAT(accounts.firstName,' ', accounts.lastName) LIKE '%" . $searchVal . "%')" .
                "OR (log.userName LIKE '%" . $searchVal . "%')" .
                "OR (log.details LIKE '%" . $searchVal . "%')" .
                ")";
        }

        // Sorting
        $sort = $this->input->get('order')[0];
        $sortDir = $sort['dir'];

        switch ($this->input->get($sort['column'])) {
            case 0:
                $sortCol = 'log.timeAdded';
                break;
            case 2:
                $sortCol = 'log.userName';
                break;
        }

        $sql .= " ORDER BY " . $sortCol . ' ' . $sortDir;
        $sql .= ' LIMIT ' . $this->input->get('length');
        $sql .= ' OFFSET ' . $this->input->get('start');

        $logData = $this->db->query($sql)->result();

        $tableData = [];

        foreach ($logData as $log) {

            if ($log->account) {
                $user = $this->em->findAccount($log->account);
                if ($user) {
                    $userName = $user->getFullName();
                } else {
                    $userName = $log->userName;
                }
            } else {
                $userName = 'No User';
            }

            $tableData[] = [
                $log->timeAdded,
               // date('m/d/Y', $log->timeAdded) . '<br />' . date('g:i A', $log->timeAdded),
                date('m/d/Y g:i A', $log->timeAdded + TIMEZONE_OFFSET),
                $userName,
                mapIP($log->ip),
                $log->details,
            ];
        }

        $data = [];
        $data['aaData'] = $tableData;
        $data['sEcho'] = $this->input->get('sEcho');
        $data["iTotalRecords"] = $this->getProposalRepository()->numLogs($proposalId);
        $data["iTotalDisplayRecords"] = $this->getProposalRepository()->numLogs($proposalId);
        echo json_encode($data);
    }

    public function uploadProjectAttachment($proposalId)
    {
        $response = new JsonResponse();

        $proposal = $this->em->findProposal($proposalId);

        if (!$proposal) {
            $response->error = 1;
            $response->text = 'Proposal Could not be loaded';
            $response->send();
            return;
        }
        if (isset($_FILES["file"]["name"])) {

            if (!$_FILES['file']['error']) {
                //check file size
                if ($_FILES['file']['size'] > 10485760) {
                    $response->error = 1;
                    $response->text = 'File too large! Please upload files under 10MB!';
                    $response->send();
                    return;
                } else {
                    //check if directory exists
                    $folder = $proposal->getUploadDir();
                    if (!is_dir($folder)) {
                        mkdir($folder, 0777, true);
                    }
                    //upload file
                    $ext = explode('.', $_FILES['file']['name']);
                    $ext = $ext[count($ext) - 1];
                    $fileName = md5(time()) . '.' . $ext;
                    $file = $folder . '/' . $fileName;
                    move_uploaded_file($_FILES['file']['tmp_name'], $file);
                    //attach to proposal
                    $newFile = new \models\Proposal_attachments();
                    $newFile->setProposalId($proposal->getProposalId());
                    $newFile->setFilePath($fileName);
                    $newFile->setFileName($this->input->post('fileName'));
                    $newFile->setOrd(99);
                    $this->em->persist($newFile);

                    // Flag the proposal for rebuild
                    $proposal->setRebuildFlag(1);
                    $this->em->persist($proposal);
                    // Flush to DB
                    $this->em->flush();

                    // Log it
                    $this->getLogRepository()->add([
                        'action' => 'proposal_upload_attachment',
                        'details' => "Project Attachment '" . $newFile->getFileName() . "' Uploaded",
                        'proposal' => $proposal->getProposalId(),
                        'account' => $this->account()->getAccountId(),
                        'userName' => $this->account()->getFullName(),
                        'company' => $this->account()->getCompanyId(),
                    ]);

                    // Build and send response
                    $response->error = 0;
                    $response->id = $newFile->getAttachmentId();
                    $response->file = $newFile->getFilePath();
                    $response->fileName = $newFile->getFileName();
                    $response->send();
                    return;
                }
            } else {
                $response->error = 1;
                $response->text = 'There was an error uploading the file. Please try again';
                $response->send();
                return;
            }
        }
    }

    public function deleteProposalAttachment($attachmentId)
    {
        $response = [
            'id' => $attachmentId,
            'error' => 0,
            'message' => '',
        ];

        // Load the attachment
        $pa = $this->em->findProposalAttachment($attachmentId);
        if (!$pa) {
            $response['error'] = 1;
            $response['message'] = 'File could not be loaded';
            echo json_encode($response);
            return;
        }

        // Load the image
        $proposal = $this->em->findProposal($pa->getProposalId());
        if (!$proposal) {
            $response['error'] = 1;
            $response['message'] = 'Proposal could not be loaded';
            echo json_encode($response);
            return;
        }

        // Delete it
        $this->getProposalRepository()->deleteProposalAttachment($pa, $this->account());

        $proposal->setRebuildFlag(1);
        $this->em->persist($proposal);
        $this->em->flush();

        // Respond
        echo json_encode($response);
    }

    public function updateProposalWorkOrderNotes()
    {
        $response = new JsonResponse();

        $proposal = $this->em->findProposal($this->input->post('proposalId'));

        if (!$proposal) {
            $response->error = 1;
        }

        $proposal->setWorkOrderNotes($this->input->post('workOrderNotes'));
        $proposal->setRebuildFlag(1);
        $this->em->persist($proposal);
        $this->em->flush();

        $this->getLogRepository()->add([
            //'action' => 'proposal_update_work_order_notes',
            'action' => \models\ActivityAction::PROPOSAL_WORKORDER,
            'details' => "Updated Work Order Notes",
            'proposal' => $proposal->getProposalId(),
            'account' => $this->account()->getAccountId(),
            'userName' => $this->account()->getFullName(),
            'company' => $this->account()->getCompanyId(),
        ]);

        $response->send();
        return;
    }

    public function hideAnnouncements()
    {
        $accountId = $this->input->post('accountId');
        $announcements = $this->input->post('announcements');

        if (count($announcements)) {
            foreach ($this->input->post('announcements') as $annId) {
                $ah = new models\HiddenAnnouncement();
                $ah->setAccountId($accountId);
                $ah->setAnnouncementId($annId);
                $this->em->persist($ah);
            }
            $this->em->flush();
        }
        return 'ok';
    }

    public function proposalMapData($accountId, $page, $numRecords)
    {
        $account = $this->em->findAccount($accountId);
        $coords = [
            'x1' => $this->input->post('x1'),
            'x2' => $this->input->post('x2'),
            'y1' => $this->input->post('y1'),
            'y2' => $this->input->post('y2'),
        ];
        $proposalMapData = $this->getAccountRepository()->getProposalsMapDataPoints($account, $page, $numRecords, $coords);

        echo json_encode($proposalMapData);
    }

    public function proposalInfo($proposalId)
    {
        $proposal = $this->em->findProposal($proposalId);
        $proposalData = $this->getProposalRepository()->getProposalInfo($proposal, $this->account());

        echo json_encode($proposalData);
    }

    public function proposalMapDataCount($accountId)
    {
        $account = $this->em->findAccount($accountId);

        $coords = [
            'x1' => $this->input->post('x1'),
            'x2' => $this->input->post('x2'),
            'y1' => $this->input->post('y1'),
            'y2' => $this->input->post('y2'),
        ];

        $count = $this->getAccountRepository()->getProposalsMapDataPoints($account, false, false, $coords, true);

        echo json_encode([
            'count' => $count,
        ]);
    }

    public function allProposalMapData($accountId)
    {
        $account = $this->em->findAccount($accountId);
        $proposalMapData = $account->getAllProposalsData();

        $out = [];

        foreach ($proposalMapData as $data) {
            if ($data->proposalId) {
                $out[$data->proposalId] = $data;
            }
        }

        echo json_encode($out);
    }

    public function getFilteredProposalIds($accountId)
    {
        $account = $this->em->findAccount($accountId);

        $proposalsData = $account->getProposalsData(false, false, false, true);

        $out = [];
        foreach ($proposalsData as $data) {
            if (isset($data->proposalId)) {
                $out[] = $data->proposalId;
            }

        }
        echo json_encode($out);
    }

    public function modifyPrices()
    {
        $ids = $this->input->post('ids');
        $modifier = floatval($this->input->post('modifier'));

        

        $job_array = [
            'ids' => $ids,
            'modifier' => $modifier,
            'account_id' => $this->account()->getAccountId(),
            'ip_address' => $_SERVER['REMOTE_ADDR']
        ];
    
        $this->load->library('jobs');
        // Save the Queue Proposal Price Modify
        $this->jobs->create($_ENV['QUEUE_EMAIL'], 'jobs', 'groupProposalPriceModify', $job_array, 'test job');

        $response = new JsonResponse();
        //$response->count = $numProposals;
        $response->error = 0;

        echo json_encode($response);
    }

    public function modifyPricesStatus()
    {
        $statusIds = $this->input->post('ids');
        $modifier = $this->input->post('modifier');
        $pModifyFrom = strtotime($this->input->post('pModifyFrom'));
        $pModifyTo = strtotime($this->input->post('pModifyTo'));

        $job_array = [
            'ids' => $statusIds,
            'modifier' => $modifier,
            'pModifyFrom' => $pModifyFrom,
            'pModifyTo' => $pModifyTo,
            'account_id' => $this->account()->getAccountId(),
            'ip_address' => $_SERVER['REMOTE_ADDR']
        ];
    
        $this->load->library('jobs');
        // Save the Queue Proposal Price Modify
        $this->jobs->create($_ENV['QUEUE_EMAIL'], 'jobs', 'proposalPriceModifyStatus', $job_array, 'test job');

        echo json_encode([
            'success' => 1,
            // 'initialCount' => $initialCount,
            // 'updatedCount' => $updatedCount,
        ]);

    }


    public function proposalSignees()
    {
        $proposal = $this->em->findProposal($this->input->post('proposalId'));
        $response = new JsonResponse();

        if (!$proposal) {
            $response->error = 1;
            $response->text = 'Proposal could not be loaded';
            $response->send();
            return;
        }

        $this->getProposalRepository()->deleteSignees($proposal);

        // Save client sig if there is one
        if ($this->input->post('clientSig')) {

            $clientSig = new ProposalSignee();
            $clientSig->setProposalId($proposal->getProposalId());
            $clientSig->setSigneeType(ProposalSignee::CLIENT);
            $clientSig->setFirstName($this->input->post('clientSigFirstName'));
            $clientSig->setLastName($this->input->post('clientSigLastName'));
            $clientSig->setCompanyName($this->input->post('clientSigCompanyName'));
            $clientSig->setTitle($this->input->post('clientSigTitle'));
            $clientSig->setAddress($this->input->post('clientSigAddress'));
            $clientSig->setCity($this->input->post('clientSigCity'));
            $clientSig->setState($this->input->post('clientSigState'));
            $clientSig->setZip($this->input->post('clientSigZip'));
            $clientSig->setCellPhone($this->input->post('clientSigCellPhone'));
            $clientSig->setOfficePhone($this->input->post('clientSigOfficePhone'));
            $clientSig->setEmail($this->input->post('clientSigEmail'));
            $this->em->persist($clientSig);

            // Log the override
            $this->getLogRepository()->add([
                'proposal' => $proposal->getProposalId(),
                'client' => $proposal->getClient()->getClientId(),
                'action' => \models\ActivityAction::WEB_PROPOSAL_CLIENT_SIGN,
                'details' => 'Proposal Signature Change: Client Signee changed to ' . $clientSig->getName() . ' - ' . $clientSig->getTitle() . ', ' . $clientSig->getCompanyName(),
                'account' => $this->account()->getAccountId(),
                'company' => $this->account()->getCompanyId(),
            ]);
        } else {
            // Log the revert
            $this->getLogRepository()->add([
                'proposal' => $proposal->getProposalId(),
                'client' => $proposal->getClient()->getClientId(),
                'action' => \models\ActivityAction::WEB_PROPOSAL_CLIENT_SIGN,
                'details' => 'Proposal Signature Change: Client Signee reverted to default client details',
                'account' => $this->account()->getAccountId(),
                'company' => $this->account()->getCompanyId(),
            ]);
        }

        // Save company sig if there is one
        if ($this->input->post('companySig')) {

            $companySig = new ProposalSignee();
            $companySig->setProposalId($proposal->getProposalId());
            $companySig->setSigneeType(ProposalSignee::COMPANY);
            $companySig->setFirstName($this->input->post('companySigFirstName'));
            $companySig->setLastName($this->input->post('companySigLastName'));
            $companySig->setCompanyName($this->input->post('companySigCompanyName'));
            $companySig->setTitle($this->input->post('companySigTitle'));
            $companySig->setAddress($this->input->post('companySigAddress'));
            $companySig->setCity($this->input->post('companySigCity'));
            $companySig->setState($this->input->post('companySigState'));
            $companySig->setZip($this->input->post('companySigZip'));
            $companySig->setCellPhone($this->input->post('companySigCellPhone'));
            $companySig->setOfficePhone($this->input->post('companySigOfficePhone'));
            $companySig->setEmail($this->input->post('companySigEmail'));
            $this->em->persist($companySig);

            // Log the override
            $this->getLogRepository()->add([
                'proposal' => $proposal->getProposalId(),
                'client' => $proposal->getClient()->getClientId(),
                'action' => \models\ActivityAction::UPDATE_PROPOSAL_SETTING,
                'details' => 'Proposal Signature Change: Company Signee changed to ' . $companySig->getName() . ' - ' . $companySig->getTitle() . ', ' . $companySig->getCompanyName(),
                'account' => $this->account()->getAccountId(),
                'company' => $this->account()->getCompanyId(),
            ]);
        } else {
            // Log the revert
            $this->getLogRepository()->add([
                'proposal' => $proposal->getProposalId(),
                'client' => $proposal->getClient()->getClientId(),
                'action' => \models\ActivityAction::UPDATE_PROPOSAL_SETTING,
                'details' => 'Proposal Signature Change: Company Signee reverted to default user details',
                'account' => $this->account()->getAccountId(),
                'company' => $this->account()->getCompanyId(),
            ]);
        }

        // Flag proposal for rebuild
        $proposal->setRebuildFlag(1);
        $this->em->persist($proposal);

        $this->em->flush();

        $response->error = 0;
        $response->send();
    }

    /**
     *  Admin ordering of categories
     */
    public function updateEstimationCategoryDefaultOrder()
    {
        $i = 0;
        foreach ($this->input->post('categories') as $categoryId) {

            $category = $this->em->findEstimationCategory($categoryId);
            $category->setOrd($i);
            $this->em->persist($category);
            $i++;
        }
        $this->em->flush();
    }

    /**
     *  Company ordering of categories
     */
    public function updateEstimationCategoryOrder()
    {
        $this->getEstimationRepository()->clearCompanyCategoryOrder($this->account()->getCompany());

        $i = 0;
        foreach ($this->input->post('categories') as $categoryId) {

            $eco = new \models\EstimatingCategoryOrder();
            $eco->setCategoryId($categoryId);
            $eco->setCompany($this->account()->getCompanyId());
            $eco->setOrd($i);
            $this->em->persist($eco);
            $i++;
        }
        $this->em->flush();
    }

    /**
     *  Admin ordering of types
     */
    public function updateEstimationTypeDefaultOrder()
    {
        $i = 0;
        foreach ($this->input->post('types') as $typeId) {

            $type = $this->em->findEstimationType($typeId);
            $type->setOrd($i);
            $this->em->persist($type);
            $i++;
        }
        $this->em->flush();
    }

    /**
     *  Company ordering of types
     */
    public function updateEstimationTypeOrder()
    {
        // Get the list
        $typeIds = $this->input->post('types');

        if (is_array($typeIds)) {
            $this->getEstimationRepository()->clearTypeOrders($this->account()->getCompany(), $typeIds);

            $i = 0;
            foreach ($this->input->post('types') as $typeId) {

                $eto = new EstimationTypeOrder();
                $eto->setTypeId($typeId);
                $eto->setCompany($this->account()->getCompanyId());
                $eto->setOrd($i);
                $this->em->persist($eto);
                $i++;
            }
            $this->em->flush();
        }
    }

    /**
     *  Company ordering of items
     */
    public function updateEstimationItemsCompanyOrder()
    {
        $i = 0;
        $ids = $this->input->post('items');
        $company = $this->account()->getCompany();

        $this->getEstimationRepository()->clearItemOrders($company, $ids);

        if (is_array($ids)) {
            foreach ($ids as $itemId):

                $eio = new \models\EstimationItemOrder();
                $eio->setCompany($company->getCompanyId());
                $eio->setTypeId($itemId);
                $eio->setOrd($i);
                $this->em->persist($eio);

                $i++;
            endforeach;

            $this->em->flush();
        }
    }

    /**
     *  Company ordering of items
     */
    public function updateAdminEstimationItemsCompanyOrder()
    {
        $i = 0;
        $ids = $this->input->post('items');
        $company = $this->account()->getCompany();

        $this->getEstimationRepository()->clearAdminItemOrders($ids);

        if (is_array($ids)) {
            foreach ($ids as $itemId):

                $eio = new \models\EstimationItemOrder();
                $eio->setCompany(0);
                $eio->setTypeId($itemId);
                $eio->setOrd($i);
                $this->em->persist($eio);

                $i++;
            endforeach;

            $this->em->flush();
        }
    }

    /**
     * @param array $response
     */
    private function sendResponse(array $response)
    {
        echo json_encode($response);
    }

    public function saveEstimateLineItems()
    {
        // Send this independently so total price can be returned
        $proposalServiceId = $this->input->post('proposalServiceId');
        // This is the array of line items. Each item should be an array of values
        $lineItems = $this->input->post('lineItems'); 
        // Apply price to proposal or not (1/0)
        //$apply = $this->input->post('apply');
        // Save every time
        $apply = 1;

        foreach ($lineItems as $lineItem) {

            // Load or create new object
            if ($lineItem['id']) {
                $eli = $this->em->findEstimationLineItem($lineItem['id'] ?: null);
            } else {
                $eli = new EstimationLineItem();
            }
            $expected_total = $lineItem['quantity'] * $lineItem['basePrice'];
            // Proposal ID
            $eli->setProposalId($lineItem['proposal_Id'] ?: null);
            // ProposalService ID
            $eli->setProposalServiceId($lineItem['proposalServiceId'] ?: null);
            // Item ID
            $eli->setItemId($lineItem['itemId']);
            // Phase ID
            $eli->setPhaseId($lineItem['PhaseId']);
            // Subcontractor ID
            $eli->setSubId($lineItem['sub_id']);
            // Subcontractor ID
            $eli->setIsCustomSub(@$lineItem['is_custom_sub'] ?: 0);
            // Child material - 0 or 1
            $eli->setChildMaterial($lineItem['child_material']);
            // Unit Price
            $eli->setUnitPrice($lineItem['unitPrice']);
            // Custom Unit Price - 0 or 1
            $eli->setCustomUnitPrice($lineItem['customUnitPrice']);
            // Quantity
            $eli->setQuantity($lineItem['quantity']);
            // Total Price
            $eli->setTotalPrice($lineItem['totalPrice']);
            // Base price
            $eli->setBasePrice($lineItem['basePrice']);
            // setOverheadRate
            $eli->setOverheadRate($lineItem['overHeadRate']);
            // set Profit Rate
            $eli->setProfitRate($lineItem['profitRate']);
            // set OverheadPrice
            $eli->setOverheadPrice($lineItem['overHeadPrice']);
            // set Profit Price
            $eli->setProfitPrice($lineItem['profitPrice']);
            // Set Tax Rate
            $eli->setTaxRate($lineItem['taxRate']);
            // Set Tax Price
            $eli->setTaxPrice($lineItem['taxPrice']);

            // setOverheadRate
            $eli->setTruckingOverheadRate($lineItem['truckingOverHeadRate']);
            // set Profit Rate
            $eli->setTruckingProfitRate($lineItem['truckingProfitRate']);
            // set OverheadPrice
            $eli->setTruckingOverheadPrice($lineItem['truckingOverHeadPrice']);
            // set Profit Price
            $eli->setTruckingProfitPrice($lineItem['truckingProfitPrice']);
            // Set Tax Rate
            $eli->setTruckingTotalPrice($lineItem['truckingTotalPrice']);
            // Set Name
            $eli->setCustomName($lineItem['customName']);
            // Set parent
            $eli->setParentLineItemId(@$lineItem['parentId'] ?: null);
            // Set Notes
            $eli->setNotes($lineItem['notes']);
            // Set Fees
            $eli->setFees(@$lineItem['fees'] ?: 0);
            // Set Permit
            $eli->setPermit(@$lineItem['permit'] ?: 0);
            // Set work order
            $eli->setWorkOrder(@$lineItem['work_order'] ?: 0);
            // Set day
            $eli->setDay(@$lineItem['day'] ?: 0);
            // Set Num people
            $eli->setNumPeople(@$lineItem['num_people'] ?: 0);
            // Set hours_per_day
            $eli->setHoursPerDay(@$lineItem['hours_per_day'] ?: 0);
            // Set Expected total
            $eli->setExpectedTotal($expected_total);
            $eli->setCustomTotalPrice(0);
            // Save it
            $this->em->persist($eli);
            if ($lineItem['itemId'] == 0) {
                $item_name = $lineItem['customName'];
            } else {
                $item_name = $eli->getItem()->getName();
            }
            $proposalService = $this->em->findProposalService($eli->getProposalServiceId());

            $proposal = $this->em->findProposal($proposalService->getProposal());
            // Log it
            $this->getEstimationRepository()->addLog(
                $this->account(),
                $proposal->getProposalId(),
                'save_item',
                $item_name . " item saved"
            );

            //start regular log
            $this->log_manager->add(\models\ActivityAction::PROPOSAL_ESTIMATE_ADD_ITEM,
                'Estimate: ' . $item_name . " item saved",
                $proposal->getClient(),
                $proposal,
                null,
                $this->account());
            //end regular log
        }

        // Flush to DB
        $this->em->flush();
        $phase = $this->em->findEstimationPhase($this->input->post('PhaseId'));
        $phase->setComplete(1);
        $this->em->persist($phase);
        $this->em->flush();

        $numLineItems = $this->getEstimationRepository()->getProposalServiceUncompletedPhasesCount($proposalServiceId);

        // If no line items remaining, set estimate as incomplete

        // Update the Estimate Object
        $proposalService = $this->em->findProposalService($proposalServiceId);
        $estimate = $this->getEstimationRepository()->getProposalServiceEstimate($proposalService);
        //$estimate->setCompleted($apply);
        $price = $this->getEstimationRepository()->getProposalServiceLineItemTotal($proposalServiceId);
        $newPrice = '$' . number_format($price, 2);
        $estimate->setTotalPrice($newPrice);

        $estimate->setCustomPrice(0);
        if ($numLineItems > 0) {
            $estimate->setCompleted(0);
        } else {
            $estimate->setCompleted(1);
        }
        $this->em->persist($estimate);

        // Apply to proposal Service
        if ($apply) {

            $proposalService->setPrice($newPrice);
            $proposalService->setTaxPrice($this->getEstimationRepository()->getProposalServiceLineItemTaxTotal($proposalServiceId));
        }
        $this->em->flush();
        updateProposalPrice($proposalService->getProposal());
        // Respond
        $response = [];
        $response['message'] = 'Items Saved';
        $response['total_price'] = $estimate->getTotalPrice();
        $response['estimate'] = $this->getEstimationRepository()->getEstimateData($estimate);
        $response['lineItemId'] = $eli->getId();
        $response['breakdown'] = $this->getEstimationRepository()->getProposalServicePriceBreakdown($proposalServiceId);
        $this->sendResponse($response);
    }

  

    public function saveEstimatorValues2()
    {
        $day = '0';
        $quantity = '0';
        $hour_per_day = '0';
        $phase_id = $this->input->post('PhaseId');
        if ($this->input->post('values')) {
            $savedNewData = $this->input->post('values');

            foreach ($savedNewData as $data) {

                if ($data['name'] === 'time_type_input' || $data['name'] === 'labor_time_type_input' || $data['name'] === 'equipement_time_type_input' || $data['name'] === 'sep_trucking_day' || $data['name'] === 'trucking_day') {
                    $day = $data['value'];
                } else if ($data['name'] === 'number_of_person' || $data['name'] === 'labor_number_of_person' || $data['name'] === 'equipement_number_of_person' || $data['name'] === 'truck_per_day') {
                    $quantity = $data['value'];
                } else if ($data['name'] === 'hour_per_day' || $data['name'] === 'labor_hour_per_day' || $data['name'] === 'equipement_hour_per_day' || $data['name'] === 'hours_per_trucks') {
                    $hour_per_day = str_replace(',', '', $data['value']);
                }
            }
        }
        // Save Line items
        // Send this independently so total price can be returned
        $proposalServiceId = $this->input->post('proposalServiceId');

        // This is the array of line items. Each item should be an array of values
        $lineItems = $this->input->post('lineItems');

        // Apply price to proposal or not (1/0)
        //$apply = $this->input->post('apply');
        // Save every time
        $apply = 1;

        foreach ($lineItems as $lineItem) {

            $updating = false;

            // Load or create new object
            if ($lineItem['id']) {
                $eli = $this->em->findEstimationLineItem($lineItem['id'] ?: null);
                $updating = true;
                $oldItem = clone $eli;
            } else {
                $eli = new EstimationLineItem();
            }
            $expected_total = $lineItem['quantity'] * $lineItem['basePrice'];
            // Proposal ID
            $eli->setProposalId($lineItem['proposal_Id'] ?: null);
            // ProposalService ID
            $eli->setProposalServiceId($lineItem['proposalServiceId'] ?: null);
            // Item ID
            $eli->setItemId($lineItem['itemId']);
            // Phase ID
            $eli->setPhaseId($lineItem['PhaseId']);
            // Unit Price
            $eli->setUnitPrice($lineItem['unitPrice']);
            // Custom Unit Price - 0 or 1
            $eli->setCustomUnitPrice($lineItem['customUnitPrice']);
            // Quantity
            $eli->setQuantity($lineItem['quantity']);
            // Total Price
            $eli->setTotalPrice($lineItem['totalPrice']);
            // Base price
            $eli->setBasePrice($lineItem['basePrice']);
            // setOverheadRate
            $eli->setOverheadRate($lineItem['overHeadRate']);
            // set Profit Rate
            $eli->setProfitRate($lineItem['profitRate']);
            // set OverheadPrice
            $eli->setOverheadPrice($lineItem['overHeadPrice']);
            // set Profit Price
            $eli->setProfitPrice($lineItem['profitPrice']);
            // Set Tax Rate
            $eli->setTaxRate($lineItem['taxRate']);
            // Set Tax Price
            $eli->setTaxPrice($lineItem['taxPrice']);
            // setOverheadRate
            $eli->setTruckingOverheadRate($lineItem['truckingOverHeadRate']);
            // set Profit Rate
            $eli->setTruckingProfitRate($lineItem['truckingProfitRate']);
            // set OverheadPrice
            $eli->setTruckingOverheadPrice($lineItem['truckingOverHeadPrice']);
            // set Profit Price
            $eli->setTruckingProfitPrice($lineItem['truckingProfitPrice']);
            // Set Tax Rate
            $eli->setTruckingTotalPrice($lineItem['truckingTotalPrice']);
            // Set parent
            $eli->setParentLineItemId($lineItem['parentId']);
            // Template ID
            $eli->setTemplateId(@$lineItem['template_type_id']);
            // Set day
            $eli->setDay($day);
            // Set Num people
            $eli->setNumPeople($quantity);
            // Set hours_per_day
            $eli->setHoursPerDay($hour_per_day);
            // Set Expected total
            $eli->setExpectedTotal($expected_total);
            // Set Edited Base Price
            $eli->setEditedBasePrice($lineItem['edited_base_price']);
            // Set Edited Unit Price
            $eli->setEditedUnitPrice($lineItem['edited_unit_price']);
            // Set Edited Total Price
            $eli->setEditedTotalPrice($lineItem['edited_total_price']);
            // Save it
            $this->em->persist($eli);
            $this->em->flush();
            $logMessage = $eli->getItem()->getName() . " item added for Service: " . $eli->getProposalService()->getServiceName();
            //print_r($proposalServiceId);die;
            if ($updating) {
                $logMessage = $eli->getItem()->getName() . " item updated for Service: " . $eli->getProposalService()->getServiceName();
                $logMessage .= '<br />';
                $logMessage .= $this->getEstimationRepository()->getLineItemsDifferencesString($oldItem, $eli);
            }

            // Log it
            $this->getEstimationRepository()->addLog(
                $this->account(),
                $eli->getProposalService()->getProposal(),
                'save_item',
                $logMessage
            );


            $proposal = $this->em->findProposal($eli->getProposalService()->getProposal());
            //start regular log
            $this->log_manager->add(\models\ActivityAction::PROPOSAL_ESTIMATE_ADD_ITEM,
                'Estimate: ' . $logMessage,
                $proposal->getClient(),
                $proposal,
                null,
                $this->account());
            //end regular log
            if (isset($lineItem['dump_rate'])) {

                $dump_rate = str_replace(['$', ','], ['', ''], $lineItem['dump_rate']);
                if ($updating) {
                    $this->getEstimationRepository()->deleteDumpLineItem($lineItem['id']);
                }

                if ($lineItem['dump_fee_apply'] > 0) {
                    $parentEli = $this->em->findEstimationLineItem($lineItem['parentId'] ?: null);
                    $this->addtruckingDump($dump_rate, $parentEli->getQuantity(), $eli);
                }
            }

        }

        // Flush to DB
        $this->em->flush();

        // Save the calculator values
        try {

            $scv = $this->em->getRepository('models\EstimationCalculatorValue')->findOneBy(array(
                'line_item_id' => $eli->getId()
            ));

            if (!$scv) {
                $scv = new \models\EstimationCalculatorValue();
            }


            $valuesText = '{}';
            if (is_array($this->input->post('values'))) {
                $valuesText = json_encode($this->input->post('values'));
            }

            $scv->setProposalServiceId($this->input->post('proposalServiceId'));
            $scv->setItemId($this->input->post('itemId'));
            $scv->setSavedValues($valuesText);
            $scv->setLineItemId($eli->getId());
            $this->em->persist($scv);
            $this->em->flush();

            $response = [
                'id' => $scv->getId(),
            ];
        } catch (\Exception $e) {

        }

        $numLineItems = $this->getEstimationRepository()->getProposalServiceUncompletedPhasesCount($proposalServiceId);

        // If no line items remaining, set estimate as incomplete

        // Update the Estimate Object
        $proposalService = $this->em->findProposalService($proposalServiceId);
        $estimate = $this->getEstimationRepository()->getProposalServiceEstimate($proposalService);
        //$estimate->setCompleted($apply);
        if ($numLineItems > 0) {
            $estimate->setCompleted(0);
        } else {
            $estimate->setCompleted(1);
        }
        $price = $this->getEstimationRepository()->getProposalServiceLineItemTotal($proposalServiceId);
        $newPrice = '$' . number_format($price, 2);
        $estimate->setTotalPrice($newPrice);

        $estimate->setCustomPrice(0);
        $this->em->persist($estimate);

        // Apply to proposal Service
        if ($apply) {
            $proposalService->setPrice($newPrice);
            $proposalService->setTaxPrice($this->getEstimationRepository()->getProposalServiceLineItemTaxTotal($proposalServiceId));
        }
        $this->em->flush();
        updateProposalPrice($proposalService->getProposal());

        $this->getEstimationRepository()->updateProposalEstimate($proposal, false);

        $phase = $this->em->findEstimationPhase($phase_id);
        $this->getEstimationRepository()->updateEstimatePhase($phase);
        // Respond
        $response = [];
        $response['message'] = 'Items Saved';
        $response['total_price'] = $estimate->getTotalPrice();
        $response['estimate'] = $this->getEstimationRepository()->getEstimateData($estimate);
        $response['lineItemId'] = $eli->getId();
        $response['breakdown'] = $this->getEstimationRepository()->getProposalServicePriceBreakdown($proposalServiceId);
        $this->sendResponse($response);
    }

    public function deleteEstimateLineItem($lineItemId = null)
    {
        try {
            // Load the item
            $eli = $this->em->findEstimationLineItem($lineItemId);

            // Log it
            $this->getEstimationRepository()->addLog(
                $this->account(),
                $eli->getProposalService()->getProposal(),
                'delete_item',
                $eli->getItem()->getName() . " item deleted from " . $eli->getProposalService()->getServiceName()
            );

            $proposal = $this->em->findProposal($eli->getProposalService()->getProposal());

            //start regular log
            $this->log_manager->add(\models\ActivityAction::PROPOSAL_ESTIMATE_DELETE_ITEM,
                'Estimate: ' . $eli->getItem()->getName() . " item deleted from " . $eli->getProposalService()->getServiceName(),
                $proposal->getClient(),
                $proposal,
                null,
                $this->account());
            //end regular log
            // Delete the child items (logging handled in function)
            $this->getEstimationRepository()->deleteChildItems($this->account(), $eli);

            // Delete parent
            $this->em->remove($eli);
            $this->em->flush();

            // Update the proposal service price
            $proposalService = $eli->getProposalService();
            $price = $this->getEstimationRepository()->getProposalServiceLineItemTotal($eli->getProposalService()->getId());
            $newPrice = '$' . number_format($price, 2);
            $proposalService->setPrice($newPrice);
            $this->em->persist($proposalService);
            $this->em->flush();

            // Update the proposal price
            updateProposalPrice($proposal->getProposalId());

            $response['message'] = 'Item Deleted';
            $this->sendResponse($response);
            return;

        } catch (Exception $e) {
            $response['error'] = 1;
            $response['message'] = 'Error Deleting Item';
            $this->sendResponse($response);
            return;
        }
    }

    public function deleteEstimateLineItems()
    {
        // Get the inputs
        $lineItemIds = $this->input->post('lineItemIds');
        $phase_id = $this->input->post('phase_id');
        $proposalServiceId = $this->input->post('proposalServiceId');
        $template_id = $this->input->post('template_id');
        // Load the ProposalService
        $proposalService = $this->em->findProposalService($proposalServiceId);

        // Loops though Line Item Ids
        if (is_array($lineItemIds)) {
            foreach ($lineItemIds as $lineItemId) {

                // Load the line item
                $lineItem = $this->em->findEstimationLineItem($lineItemId);

                if ($lineItem) {
                    // Remove calculator values
                    $this->getEstimationRepository()->deleteLineItemCalculatorValues($lineItemId);

                    if ($lineItem->getItemId() == 0) {
                        $item_name = $lineItem->getCustomName();
                    } else {
                        $item_name = $lineItem->getItem()->getName();
                    }
                    // Log the delete
                    // Log it
                    $this->getEstimationRepository()->addLog(
                        $this->account(),
                        $lineItem->getProposalService()->getProposal(),
                        'delete_item',
                        $item_name . " item deleted"
                    );


                    $proposal = $this->em->findProposal($lineItem->getProposalService()->getProposal());
                    //start regular log
                    $this->log_manager->add(\models\ActivityAction::PROPOSAL_ESTIMATE_DELETE_ITEM,
                        'Estimate: ' . $item_name . " item deleted",
                        $proposal->getClient(),
                        $proposal,
                        null,
                        $this->account());
                    //end regular log
                    // Delete the child items (logging handled in function)
                    $this->getEstimationRepository()->deleteChildItems($this->account(), $lineItem);
                    $this->getEstimationRepository()->clearJobCostItemsByEstimateLineId($lineItemId);

                    // Remove the Line Item
                    $this->em->remove($lineItem);
                    $this->em->flush();

                }
            }
        }
        // Flush to DB
        $this->em->flush();
        if ($template_id) {
            $childs = $this->getEstimationRepository()->getFixedChildTemplateItem($template_id, $phase_id);
            if (count($childs) > 0) {
                $template = $this->em->findTemplate($template_id);
                $temp_total_quantity = 0;
                $total_default_qty = 0;

                foreach ($childs as $child) {
                    $temp_total_quantity = $temp_total_quantity + $child->getQuantity();
                    $total_default_qty = $total_default_qty + $child->getNumPeople();
                }

                $eli = $this->getEstimationRepository()->getFixedParentTemplateItem($template_id, $phase_id);

                $overheadUnitRate = $eli->getOverheadRate();
                $profitUnitRate = $eli->getProfitRate();

                $unitPrice = $eli->getUnitPrice();
                $default_days = $eli->getDay();
                $default_hpd = $eli->getHoursPerDay();
                if ($template->getCalculationType() == 1) {
                    $temp_parent_total = $unitPrice * $default_days;
                    $temp_overhead_total = $overheadUnitRate * $default_days;
                    $temp_profit_total = $profitUnitRate * $default_days;
                } else {
                    $temp_parent_total = $unitPrice * $default_days * $default_hpd;
                    $temp_overhead_total = $overheadUnitRate * $default_days * $default_hpd;
                    $temp_profit_total = $profitUnitRate * $default_days * $default_hpd;
                }


                // set OverheadPrice
                $eli->setOverheadPrice($temp_overhead_total);
                // set Profit Price
                $eli->setProfitPrice($temp_profit_total);
                $eli->setQuantity($temp_total_quantity);
                // Total Price
                $eli->setTotalPrice($temp_parent_total);

                // Set Num people
                $eli->setNumPeople($total_default_qty);
                // Set hours_per_day
                //$eli->setHoursPerDay($default_hpd);
                //fixed template
                //$eli->setFixedTemplate(1);
                // Save it
                $this->em->persist($eli);
                $this->em->flush();
            } else {
                $this->getEstimationRepository()->deleteFixedParentTemplateItem($template_id, $phase_id);

                // Log it
                $this->getEstimationRepository()->addLog(
                    $this->account(),
                    $proposalService->getProposal(),
                    'delete_item',
                    'Template :Parent item deleted'
                );


                $proposal = $this->em->findProposal($proposalService->getProposal());
                //start regular log
                $this->log_manager->add(\models\ActivityAction::PROPOSAL_ESTIMATE_DELETE_ITEM,
                    'Template :Parent item deleted',
                    $proposal->getClient(),
                    $proposal,
                    null,
                    $this->account());
            }

        }

        //update Phase completion
        $phase = $this->em->findEstimationPhase($phase_id);
        $this->getEstimationRepository()->updateEstimatePhase($phase);
        $numLineItems = $this->getEstimationRepository()->getProposalServiceLineItemsCountByPhaseId($phase_id);

        // If no line items remaining, set estimate as incomplete
        if ($numLineItems < 1) {
            $phase->setComplete(0);
        } else {
            $phase->setComplete(1);
        }

        // Flush the DB
        $this->em->persist($phase);
        $this->em->flush();

        // Load the estimate here - needs to be after the DB flush
        $estimate = $this->getEstimationRepository()->getProposalServiceEstimate($proposalService);

        // Clear custom price flag
        $estimate->setCustomPrice(0);

        // Get the count of ine items for this proposal service
        //$numLineItems = $this->getEstimationRepository()->getProposalServiceLineItemsCount($proposalServiceId);
        $numLineItems = $this->getEstimationRepository()->getProposalServiceUncompletedPhasesCount($proposalServiceId);

        // If no line items remaining, set estimate as incomplete
        if ($numLineItems > 0) {
            $estimate->setCompleted(0);
        }

        // Update the total Price
        $price = $this->getEstimationRepository()->getProposalServiceLineItemTotal($proposalServiceId);
        $newPrice = '$' . number_format($price, 2);
        $estimate->setTotalPrice($newPrice);

        $proposalService->setPrice($newPrice);
        $proposalService->setTaxPrice($this->getEstimationRepository()->getProposalServiceLineItemTaxTotal($proposalServiceId));
        // Update the proposal price


        // Save Estimate and proposal service
        $this->em->persist($estimate);
        $this->em->persist($proposalService);
        $this->em->flush();

        // Update the proposal service price

        $this->em->persist($proposalService);
        $this->em->flush();

        // Update the proposal price
        updateProposalPrice($proposalService->getProposal());

        // Clear the EM so we reload correct info
        $this->em->clear();
        $this->getEstimationRepository()->updateProposalEstimate($proposal, false);
        // Send response
        $this->sendResponse([
            'error' => 0,
            'message' => 'Line item(s) deleted',
            'total_price' => $this->getEstimationRepository()->getProposalServiceLineItemTotal($proposalServiceId),
            'estimate' => $this->getEstimationRepository()->getEstimateData($estimate),
            'breakdown' => $this->getEstimationRepository()->getProposalServicePriceBreakdown($proposalServiceId),
        ]);
    }


    public function deleteTemplateEstimateLineItems()
    {
        // Get the inputs
        $lineItemIds = $this->input->post('lineItemIds');
        $phase_id = $this->input->post('phase_id');
        $proposalServiceId = $this->input->post('proposalServiceId');
        $template_id = $this->input->post('template_id');
        // Load the ProposalService
        $proposalService = $this->em->findProposalService($proposalServiceId);

        // Loops though Line Item Ids
        if (is_array($lineItemIds)) {
            foreach ($lineItemIds as $lineItemId) {

                // Load the line item
                $lineItem = $this->em->findEstimationLineItem($lineItemId);

                if ($lineItem) {
                    // Remove calculator values
                    $this->getEstimationRepository()->deleteLineItemCalculatorValues($lineItemId);

                    if ($lineItem->getItemId() == 0) {
                        $item_name = $lineItem->getCustomName();
                    } else {
                        $item_name = $lineItem->getItem()->getName();
                    }
                    // Log the delete
                    // Log it
                    $this->getEstimationRepository()->addLog(
                        $this->account(),
                        $lineItem->getProposalService()->getProposal(),
                        'delete_item',
                        $item_name . " item deleted"
                    );


                    $proposal = $this->em->findProposal($lineItem->getProposalService()->getProposal());
                    //start regular log
                    $this->log_manager->add(\models\ActivityAction::PROPOSAL_ESTIMATE_DELETE_ITEM,
                        'Estimate: ' . $item_name . " item deleted",
                        $proposal->getClient(),
                        $proposal,
                        null,
                        $this->account());
                    //end regular log
                    // Delete the child items (logging handled in function)
                    $this->getEstimationRepository()->deleteChildItems($this->account(), $lineItem);

                    $this->getEstimationRepository()->clearJobCostItemsByEstimateLineId($lineItemId);
                    // Remove the Line Item
                    $this->em->remove($lineItem);


                    $this->em->flush();

                }
            }
        }
        // Flush to DB
        $this->em->flush();

        $childs = $this->getEstimationRepository()->getFixedChildTemplateItem($template_id, $phase_id);

        $this->getEstimationRepository()->deleteFixedParentTemplateItem($template_id, $phase_id);

        // Log it
        $this->getEstimationRepository()->addLog(
            $this->account(),
            $proposalService->getProposal(),
            'delete_item',
            'Template :Parent item deleted'
        );


        $proposal = $this->em->findProposal($proposalService->getProposal());
        //start regular log
        $this->log_manager->add(\models\ActivityAction::PROPOSAL_ESTIMATE_DELETE_ITEM,
            'Template :Parent item deleted',
            $proposal->getClient(),
            $proposal,
            null,
            $this->account());


        //update Phase completion
        $phase = $this->em->findEstimationPhase($phase_id);
        $this->getEstimationRepository()->updateEstimatePhase($phase);
        $numLineItems = $this->getEstimationRepository()->getProposalServiceLineItemsCountByPhaseId($phase_id);

        // If no line items remaining, set estimate as incomplete
        if ($numLineItems < 1) {
            $phase->setComplete(0);
        } else {
            $phase->setComplete(1);
        }

        // Flush the DB
        $this->em->persist($phase);
        $this->em->flush();

        // Load the estimate here - needs to be after the DB flush
        $estimate = $this->getEstimationRepository()->getProposalServiceEstimate($proposalService);

        // Clear custom price flag
        $estimate->setCustomPrice(0);

        // Get the count of ine items for this proposal service
        //$numLineItems = $this->getEstimationRepository()->getProposalServiceLineItemsCount($proposalServiceId);
        $numLineItems = $this->getEstimationRepository()->getProposalServiceUncompletedPhasesCount($proposalServiceId);

        // If no line items remaining, set estimate as incomplete
        if ($numLineItems > 0) {
            $estimate->setCompleted(0);
        }

        // Update the total Price
        $price = $this->getEstimationRepository()->getProposalServiceLineItemTotal($proposalServiceId);
        $newPrice = '$' . number_format($price, 2);
        $estimate->setTotalPrice($newPrice);

        $proposalService->setPrice($newPrice);
        $proposalService->setTaxPrice($this->getEstimationRepository()->getProposalServiceLineItemTaxTotal($proposalServiceId));
        // Update the proposal price
        updateProposalPrice($proposalService->getProposal());

        // Save Estimate and proposal service
        $this->em->persist($estimate);
        $this->em->persist($proposalService);
        $this->em->flush();

        // Update the proposal service price

        $this->em->persist($proposalService);
        $this->em->flush();

        // Update the proposal price
        updateProposalPrice($proposal->getProposalId());

        // Clear the EM so we reload correct info
        $this->em->clear();
        $this->getEstimationRepository()->updateProposalEstimate($proposal, false);
        // Send response
        $this->sendResponse([
            'error' => 0,
            'message' => 'Line item(s) deleted',
            'total_price' => $this->getEstimationRepository()->getProposalServiceLineItemTotal($proposalServiceId),
            'estimate' => $this->getEstimationRepository()->getEstimateData($estimate),
            'breakdown' => $this->getEstimationRepository()->getProposalServicePriceBreakdown($proposalServiceId),
        ]);
    }

    function saveTemplatesGroupItems()
    {
        $lineItemIds = $this->input->post('lineItemIds');

        $edit_template_value_number_of_person = $this->input->post('edit_template_value_number_of_person');
        $edit_template_value_time_type_input = $this->input->post('edit_template_value_time_type_input');
        $edit_template_value_hour_per_day = $this->input->post('edit_template_value_hour_per_day');
        // Load the ProposalService

        $check_edit_tamplate_days_value = $this->input->post('check_edit_tamplate_days_value');
        $check_edit_tamplate_quantity_value = $this->input->post('check_edit_tamplate_quantity_value');
        $check_edit_tamplate_hpd_value = $this->input->post('check_edit_tamplate_hpd_value');


        $proposalServiceId = $this->input->post('proposalServiceId');
        // Load the ProposalService
        $proposalService = $this->em->findProposalService($proposalServiceId);
        $proposal = $this->em->findProposal($proposalService->getProposal());
        $calculation_type = $proposal->getEstimateCalculationType();
        if ($calculation_type == 1) {
            $company = $this->account()->getCompany();

            //$settings = $this->getEstimationRepository()->getCompanySettings($company);
            $estimate = $this->getEstimationRepository()->getProposalServiceEstimate($proposalService);

            $DefaultProfit = $estimate->getProfitRate();
            $DefaultOverhead = $estimate->getOverheadRate();
        }
        $estimate = $this->getEstimationRepository()->getProposalServiceEstimate($proposalService);
        // Loops though Line Item Ids
        if (is_array($lineItemIds)) {

            foreach ($lineItemIds as $lineItemId) {

                $lineItem = $this->em->findEstimationLineItem($lineItemId);
                $oldLineItem = clone $lineItem;
                if ($lineItem) {

                    $calculator = new Pms\Calculators\Material\TimeCalculator();

                    $calculator->setItemBasePrice($lineItem->getBasePrice());


                    if ($check_edit_tamplate_days_value) {
                        $calculator->setDays($edit_template_value_time_type_input);
                    } else {
                        $calculator->setDays($lineItem->getDay());
                    }
                    if ($check_edit_tamplate_quantity_value) {
                        $calculator->setQuantity($edit_template_value_number_of_person);
                    } else {
                        $calculator->setQuantity($lineItem->getNumPeople());
                    }
                    if ($check_edit_tamplate_hpd_value) {
                        $calculator->setHoursPerDay($edit_template_value_hour_per_day);
                    } else {
                        $calculator->setHoursPerDay($lineItem->getHoursPerDay());
                    }

                    $calculator->setUnitType($lineItem->getItem()->getUnitModel()->getSingleName());
                    if ($calculation_type == 1) {
                        $calculator->setOhRate($DefaultOverhead);
                        $calculator->setPmRate($DefaultProfit);

                    } else {
                        $calculator->setOhRate($lineItem->getOverheadRate());
                        $calculator->setPmRate($lineItem->getProfitRate());

                    }

                    $calculator->setTaxRate($lineItem->getTaxRate());
                    $result = $calculator->run();

                    if (count($result) > 0) {
                        //$eli = new EstimationLineItem();

                        // Proposal ID

                        // Quantity
                        $lineItem->setQuantity($result->quantity);
                        // Total Price
                        $lineItem->setTotalPrice($result->totalPrice);

                        // set OverheadPrice
                        $lineItem->setOverheadPrice($result->overheadPrice);
                        // set Profit Price
                        $lineItem->setProfitPrice($result->profitPrice);

                        // Set Tax Price
                        $lineItem->setTaxPrice($result->taxPrice);


                        if ($check_edit_tamplate_days_value) {
                            $lineItem->setDay($edit_template_value_time_type_input);
                        } else {
                            $lineItem->setDay($lineItem->getDay());
                        }
                        if ($check_edit_tamplate_quantity_value) {
                            $lineItem->setNumPeople($edit_template_value_number_of_person);
                        } else {
                            $lineItem->setNumPeople($lineItem->getNumPeople());
                        }
                        if ($check_edit_tamplate_hpd_value) {
                            $lineItem->setHoursPerDay($edit_template_value_hour_per_day);
                        } else {
                            $lineItem->setHoursPerDay($lineItem->getHoursPerDay());
                        }
                        // Set day
                        //$lineItem->setDay($edit_template_value_time_type_input);
                        // Set Num people
                        //$lineItem->setNumPeople($edit_template_value_number_of_person);
                        // Set hours_per_day
                        //$lineItem->setHoursPerDay($edit_template_value_hour_per_day);
                        // Save it
                        $this->em->persist($lineItem);


                        $differenceString = $this->getEstimationRepository()->getLineItemsDifferencesString($oldLineItem, $lineItem);

                        if ($differenceString) {
                            $logMessage = $lineItem->getItem()->getType()->getName() . ': ' . $lineItem->getItem()->getName() . " item edit for Service: " . $lineItem->getProposalService()->getServiceName();
                            $logMessage .= '<br />';
                            $logMessage .= $differenceString;

                            // Log it
                            $this->getEstimationRepository()->addLog(
                                $this->account(),
                                $lineItem->getProposalService()->getProposal(),
                                'save_item',
                                $logMessage
                            );

                            $proposal = $this->em->findProposal($lineItem->getProposalService()->getProposal());
                            //start regular log
                            $this->log_manager->add(\models\ActivityAction::PROPOSAL_ESTIMATE_EDIT_ITEM,
                                'Estimate: ' . $logMessage,
                                $proposal->getClient(),
                                $proposal,
                                null,
                                $this->account());
                            //end regular log

                        }


                    }

                }

            }

        }

        $this->sendResponse([
            'error' => 0,
            'message' => 'Line item(s) Updated',
            'total_price' => $this->getEstimationRepository()->getProposalServiceLineItemTotal($proposalServiceId),
            'estimate' => $this->getEstimationRepository()->getEstimateData($estimate),
            'breakdown' => $this->getEstimationRepository()->getProposalServicePriceBreakdown($proposalServiceId),
        ]);
    }

    /**
     * @param $proposalId
     */
    public function proposalEstimateItems($proposalId)
    {

        $lineItems = $this->getEstimationRepository()->getProposalEstimateLineItems($proposalId);
        $items = [];

        foreach ($lineItems as $lineItem) {
            $line_item_price = '<input type="text" class="temp_item_price_input"  value="' . $lineItem->unit_price . '"><span class="item_price_td_text">' . $lineItem->unit_price . '</span><span class="item_price_edit_icon" ><i class="fa fa-pencil fa-lg"></i></span>';
            $line_item_total_price = '<input type="text" class="temp_item_line_total_input"  value="' . $lineItem->total_price . '"><span class="item_line_total_td_text">' . $lineItem->total_price . '</span><span class="item_line_total_edit_icon" ><i class="fa fa-pencil fa-lg"></i></span>';
            $items[] = [
                0 => $lineItem->categoryName,
                1 => $lineItem->typeName,
                2 => $lineItem->itemName,
                3 => $lineItem->quantity,
                4 => $line_item_price,
                5 => $line_item_total_price,
                6 => 'Actions',
                7 => $lineItem->id,
            ];
        }

        $json["iTotalRecords"] = count($lineItems);
        $json["iTotalDisplayRecords"] = count($lineItems);
        $json['aaData'] = $items;
        $json['sEcho'] = $this->input->get('sEcho');
        echo json_encode($json);
    }

    public function saveCalculatorValues()
    {

        if ($this->input->post('id')) {
            $scv = $this->em->find('models\EstimationCalculatorValue', $this->input->post('id'));

        } else {
            $scv = new \models\EstimationCalculatorValue();
        }

        /* @var $scv \models\EstimationCalculatorValue */

        try {

            $valuesText = '{}';
            if (is_array($this->input->post('values'))) {
                $valuesText = json_encode($this->input->post('values'));
            }

            $scv->setProposalServiceId($this->input->post('proposalServiceId'));
            $scv->setItemId($this->input->post('itemId'));
            $scv->setSavedValues($valuesText);
            $this->em->persist($scv);
            $this->em->flush();

            $response = [
                'id' => $scv->getId(),
            ];
        } catch (\Exception $e) {
            $response = [
                'error' => 1,
                'message' => 'Error Saving Calculator Values',
                'errorMessage' => $e->getMessage(),
            ];
        }

        echo json_encode($response);
    }

    /**
     * @param $proposalServiceId
     * @param $itemId
     */
    public function loadCalculatorValues($proposalServiceId, $itemId, $estimate_line_id)
    {
        
        $item = $this->em->findEstimationItem($itemId);
        $est_item = $this->em->findEstimationLineItem($estimate_line_id);

        $savedValues = $this->em->getRepository('models\EstimationCalculatorValue')
            ->findOneBy([

                'line_item_id' => $estimate_line_id,
            ]);

        $itemData = [
            'id' => null,
            'values' => null,
            'itemDetails' => [
                'categoryName' => $item->getType()->getCategory()->getName(),
                'typeName' => $item->getType()->getName(),
                'itemName' => $item->getName(),
                'base_price' => $est_item->getBasePrice(),
                'unit_price' => $est_item->getUnitPrice(),
                'quantity' => $est_item->getQuantity(),
                'overhead_rate' => $est_item->getOverheadRate(),
                'overhead_price' => $est_item->getOverheadPrice(),
                'profit_rate' => $est_item->getProfitRate(),
                'profit_price' => $est_item->getProfitPrice(),
                'tax_price' => $est_item->getTaxPrice(),
                'is_custom_price' => $est_item->getCustomTotalPrice(),
            ],
        ];

  

        if ($savedValues) {
            $itemData['id'] = $savedValues->getId();
            $itemData['values'] = $savedValues->getSavedValues();
        }

        $this->sendResponse($itemData);
    }

    public function loadItemCalculatorValues2($lineItemId)
    {
        $eli = $this->em->findEstimationLineItem($lineItemId);

        $item = $eli->getItem();

        $savedValues = $this->em->getRepository('models\EstimationCalculatorValue')
            ->findOneBy([
                'line_item_id' => $lineItemId,
            ]);

        $itemData = [
            'id' => null,
            'values' => null,
            'itemDetails' => [
                'categoryName' => $item->getType()->getCategory()->getName(),
                'typeName' => $item->getType()->getName(),
                'itemName' => $item->getName(),
                'base_price' => $item->getBasePrice(),
                'unit_price' => $eli->getUnitPrice(),
                'overhead_rate' => $eli->getOverheadRate(),
                'overhead_price' => $eli->getOverheadPrice(),
                'profit_rate' => $eli->getProfitRate(),
                'profit_price' => $eli->getProfitPrice(),
                'tax_price' => $eli->getTaxPrice(),
                'is_custom_price' => $eli->getCustomTotalPrice(),
                'total_price' => $eli->getTotalPrice(),
            ],
        ];

        if ($savedValues) {
            $itemData['id'] = $savedValues->getId();
            $itemData['values'] = $savedValues->getSavedValues();
        }

        $this->sendResponse($itemData);
    }

    public function deleteCalculatorValues($proposalServiceId, $itemId)
    {

        $savedValues = $this->em->getRepository('models\EstimationCalculatorValue')
            ->findOneBy([
                'proposal_service_id' => $proposalServiceId,
                'item_id' => $itemId,
            ]);

        if ($savedValues) {
            $this->em->remove($savedValues);
            $this->em->flush();
        }

        $response = [
            'error' => 0,
        ];

        echo json_encode($response);
    }

    public function companyServiceTypeAssign()
    {
        $typeId = $this->input->post('typeId');
        $serviceIds = $this->input->post('serviceIds');

        $company = $this->account()->getCompany();

        try {
            if ($typeId) {
                // Clear Previous
                $this->getEstimationRepository()->clearCompanyServiceTypeAssignments($company, $typeId);

                foreach ($serviceIds as $serviceId) {
                    // Save New
                    $ecst = new EstimationCompanyServiceType();
                    $ecst->setCompany($company->getCompanyId());
                    $ecst->setTypeId($typeId);
                    $ecst->setServiceId($serviceId);
                    $this->em->persist($ecst);
                }
                $this->em->flush();
            }

            echo json_encode([
                'error' => 0,
            ]);

        } catch (\Exception $e) {
            echo json_encode([
                'error' => 1,
                'message' => 'There was a problem saving the assignment',
                'debug' => $e->getMessage(),
            ]);
        }
    }

    public function adminCompanyServiceTypeAssign()
    {
        $typeId = $this->input->post('typeId');
        $serviceIds = $this->input->post('serviceIds');


        try {
            if ($typeId) {
                // Clear Previous
                $this->getEstimationRepository()->clearAdminCompanyServiceTypeAssignments($typeId);

                foreach ($serviceIds as $serviceId) {
                    // Save New
                    $ecst = new EstimationCompanyServiceType();
                    $ecst->setCompany(0);
                    $ecst->setTypeId($typeId);
                    $ecst->setServiceId($serviceId);
                    $this->em->persist($ecst);
                }
                $this->em->flush();
            }

            echo json_encode([
                'error' => 0,
            ]);

        } catch (\Exception $e) {
            echo json_encode([
                'error' => 1,
                'message' => 'There was a problem saving the assignment',
                'debug' => $e->getMessage(),
            ]);
        }
    }

    public function getCompanyServiceTypeAssignments()
    {
        $typeId = $this->input->post('typeId');
        $company = $this->account()->getCompany();

        try {
            if ($typeId) {
                $serviceIds = $this->getEstimationRepository()->getCompanyServiceTypeAssignments($company, $typeId);
            }

            echo json_encode([
                'error' => 0,
                'services' => $serviceIds,
            ]);

        } catch (\Exception $e) {
            echo json_encode([
                'error' => 1,
                'message' => 'There was a problem loading your assignments',
                'debug' => $e->getMessage(),
            ]);
        }

    }

    public function getAdminCompanyServiceTypeAssignments()
    {
        $typeId = $this->input->post('typeId');

        try {
            if ($typeId) {
                $serviceIds = $this->getEstimationRepository()->getAdminCompanyServiceTypeAssignments($typeId);
            }

            echo json_encode([
                'error' => 0,
                'services' => $serviceIds,
            ]);

        } catch (\Exception $e) {
            echo json_encode([
                'error' => 1,
                'message' => 'There was a problem loading your assignments',
                'debug' => $e->getMessage(),
            ]);
        }

    }

    /**
     *  Retrieve all line items belonging to a proposal service
     */
    public function getProposalServiceLineItems()
    {
        $proposalServiceId = $this->input->post('proposalServiceId');
        $proposal_Id = $this->input->post('proposal_Id');
        $proposalService = $this->em->findProposalService($proposalServiceId);
        $phases = $this->getEstimationRepository()->getProposalServicePhaseArray($proposalService, $proposal_Id);
        $estimate = $this->getEstimationRepository()->getProposalServiceEstimate($proposalService);
        $totalCost = $this->getEstimationRepository()->get_base_proposal_service_total($proposalServiceId);
        $breakdown = $this->getEstimationRepository()->getProposalServicePriceBreakdown($proposalServiceId);
        $settings = [
            'overhead_rate' => $estimate->getOverheadRate(),
            'profit_rate' => $estimate->getProfitRate(),
        ];

        $out = [
            'phases' => $phases,
            'settings' => $settings,
            'totalCost' => $totalCost,
            'breakdown' => $breakdown,
        ];

        $this->sendResponse($out);
    }

    /**
     *  Retrieve all line items belonging to a phase
     */
    public function getPhaseLineItems()
    {
        $phaseId = $this->input->post('phaseId');
        $estimateId = $this->input->post('estimateId');
        $proposal_service_id = $this->input->post('proposal_service_id');
        $lineItems = $this->getEstimationRepository()->getPhaseLineItemArray($phaseId, $proposal_service_id);
        $phase = $this->em->findEstimationPhase($phaseId);
        $phase_max_days = $this->getEstimationRepository()->getPhaseItemMaxDays($phaseId);
        $templateTotal = $this->getEstimationRepository()->getPhaseTemplatesTotal($phaseId);
        $out = [
            'lineItems' => $lineItems,
            'phase_complete' => $phase->getComplete(),
            'phase_max_days' => ($phase_max_days) ? $phase_max_days : 0,
            'templateTotal' => $templateTotal
        ];

        $this->sendResponse($out);
    }

    public function getProposalServiceCustomLineItems()
    {
        $proposalServiceId = $this->input->post('proposalServiceId');
        $lineItems = $this->getEstimationRepository()->getProposalServiceLineItemArray($proposalServiceId, true);
        echo json_encode($lineItems);
    }

    public function deleteProposalEstimateLineItem($lineItemId)
    {

        try {
            $eli = $this->em->findEstimationLineItem($lineItemId);
            $proposalServiceId = $eli->getProposalServiceId();
            $this->em->remove($eli);
            $this->em->flush();

            $response['message'] = 'Item Deleted';
            $response['totalPrice'] = $this->getEstimationRepository()->getProposalServiceLineItemTotal($proposalServiceId);
            $this->sendResponse($response);
            return;

        } catch (Exception $e) {

            $response['error'] = 1;
            $response['message'] = 'Error Deleting Item';
            $this->sendResponse($response);
            return;
        }
    }

    /* Removed
    public function updateProposalServicePrice()
    {
    $proposalServiceId = $this->input->post('proposalServiceId');
    $newPrice = $this->input->post('price');

    $proposalService = $this->em->findProposalService($proposalServiceId);
    $proposalService->setPrice($newPrice);
    $this->em->persist($proposalService);
    $this->em->flush();

    updateProposalPrice($proposalService->getProposal());

    echo json_encode([
    'error' => 0,
    'message' => 'Price Updated'
    ]);
    }
     */

    public function getProposalServiceFieldsValues($proposalServiceId)
    {
        $company = $this->account()->getCompany();

        $proposalService = $this->em->findProposalService($proposalServiceId);
        $info = $this->getProposalRepository()
            ->getProposalServiceFieldValues($company, $proposalService);

        echo json_encode($info);
    }

    public function estimateTemplateItems($templateId)
    {
        $company = $this->account()->getCompany();

        $allItems = $this->getEstimationRepository()->getEstimateTemplateItemsData($templateId);

        $items = [];
        $i = 1;
        $template = $this->em->findEstimationTemplate($templateId);
        foreach ($allItems as $item) {
            if (!$template->getFixed()) {
                $items[] = [
                    0 => '<a class="handle"><i class="fa fa-fw fa-sort"></i></a>',
                    1 => $item->categoryName,
                    2 => $item->typeName,
                    3 => $item->name,
                    4 => $item->default_days ?: '-',
                    5 => $item->default_qty ?: '-',
                    6 => $item->default_hpd ?: '-',
                    7 => $this->load->view('account/my_account/estimating/template-item-table-actions', [
                        'item' => $item,
                        'itemId' => $item->id,
                        'inTemplate' => $item->etiId,
                    ], true),
                    'DT_RowId' => 'template_items_' . $item->etiId,
                ];
            } else {
                $items[] = [
                    0 => '<a class="handle"><i class="fa fa-fw fa-sort"></i></a>',
                    1 => $item->categoryName,
                    2 => $item->typeName,
                    3 => $item->name,

                    4 => $item->default_qty ?: '-',

                    5 => $this->load->view('account/my_account/estimating/template-item-table-actions', [
                        'item' => $item,
                        'itemId' => $item->id,
                        'inTemplate' => $item->etiId,
                    ], true),
                    'DT_RowId' => 'template_items_' . $item->etiId,
                ];
            }
            $i++;
        }

        $json["iTotalRecords"] = $this->getEstimationRepository()->getEstimateTemplateItemsCount($templateId);
        $json["iTotalDisplayRecords"] = $this->getEstimationRepository()->getEstimateTemplateItemsCount($templateId);
        $json['aaData'] = $items;
        $json['sEcho'] = $this->input->get('sEcho');
        echo json_encode($json);
    }

    public function estimateItemsLookup($templateId)
    {
        $company = $this->account()->getCompany();

        $allItems = $this->getEstimationRepository()->getEstimateLineItemsTableData($company, $templateId);
        $items = [];

        foreach ($allItems as $item) {
            $items[] = [
                0 => $item->etiId ? '<i class="fa fa-fw fa-check-circle"></i>' : '',
                1 => $item->categoryName,
                2 => $item->typeName,
                3 => $item->name,
                4 => $this->load->view('account/my_account/estimating/item-table-actions', [
                    'itemId' => $item->id,
                    'inTemplate' => $item->etiId,
                ], true),
                'DT_RowClass' => ($item->etiId) ? 'inTemplate' : '',
            ];
        }

        $json["iTotalRecords"] = $this->getEstimationRepository()->getEstimateItemsCount($company);
        $json["iTotalDisplayRecords"] = $this->getEstimationRepository()->getEstimateLineItemsTableData($company, $templateId, true);
        $json['aaData'] = $items;
        $json['sEcho'] = $this->input->get('sEcho');
        echo json_encode($json);
    }

    public function adminEstimateItemsLookup($templateId)
    {

        $allItems = $this->getEstimationRepository()->getAdminEstimateLineItemsTableData($templateId);
        $items = [];

        foreach ($allItems as $item) {
            $items[] = [
                0 => $item->etiId ? '<i class="fa fa-fw fa-check-circle"></i>' : '',
                1 => $item->categoryName,
                2 => $item->typeName,
                3 => $item->name,
                4 => $this->load->view('account/my_account/estimating/item-table-actions', [
                    'itemId' => $item->id,
                    'inTemplate' => $item->etiId,
                ], true),
                'DT_RowClass' => ($item->etiId) ? 'inTemplate' : '',
            ];
        }

        $json["iTotalRecords"] = $this->getEstimationRepository()->getAdminEstimateItemsCount();
        $json["iTotalDisplayRecords"] = $this->getEstimationRepository()->getAdminEstimateLineItemsTableData($templateId, true);
        $json['aaData'] = $items;
        $json['sEcho'] = $this->input->get('sEcho');
        echo json_encode($json);
    }

    public function addItemToTemplate()
    {
        $itemId = $this->input->post('itemId');
        $templateId = $this->input->post('templateId');

        $eti = new \models\EstimateTemplateItem();
        $eti->setTemplateId($templateId);
        $eti->setItemId($itemId);
        $this->em->persist($eti);
        $this->em->flush();

        echo json_encode(['error => 0']);
    }

    public function addItemToCrew()
    {
        $itemId = $this->input->post('itemId');
        $crewId = $this->input->post('crewId');

        $eti = new \models\EstimateCrewItem();
        $eti->setCrewId($crewId);
        $eti->setItemId($itemId);
        $this->em->persist($eti);
        $this->em->flush();

        echo json_encode(['error => 0']);
    }

    public function deleteTemplateItem()
    {
        $itemId = $this->input->post('itemId');
        $templateId = $this->input->post('templateId');

        $eti = $this->em->getRepository('models\EstimateTemplateItem')->findOneBy(array(
            'template_id' => $templateId,
            'item_id' => $itemId,
        ));

        if ($eti) {

            $this->em->remove($eti);
            $this->em->flush();
        }
        //$this->getEstimationRepository()->removeTemplateEstimationLineItem($itemId, $templateId);

        echo json_encode(['error => 0']);
    }

    public function deleteCrewItem()
    {
        $itemId = $this->input->post('itemId');
        $crewId = $this->input->post('crewId');

        $eci = $this->em->getRepository('models\EstimateCrewItem')->findOneBy(array(
            'crew_id' => $crewId,
            'item_id' => $itemId,
        ));

        if ($eci) {
            $this->em->remove($eci);
            $this->em->flush();
        }

        echo json_encode(['error => 0']);
    }

    public function getEstimateDetails($proposalServiceId)
    {
        $proposalService = $this->em->findProposalService($proposalServiceId);
        $estimate = $this->getEstimationRepository()->getProposalServiceEstimate($proposalService);
        $data = $this->getEstimationRepository()->getEstimateData($estimate);
        $this->sendResponse($data);
    }

    public function resetEstimate($proposalServiceId)
    {
        // Load the Proposal Service
        $proposalService = $this->em->findProposalService($proposalServiceId);
        // Load the estimate
        $estimate = $this->getEstimationRepository()->getProposalServiceEstimate($proposalService);
        // Reset the values
        $estimate->setTotalPrice(0.00);
        $estimate->setCompleted(0);
        $estimate->setCustomPrice(0);
        $this->em->persist($estimate);
        $this->em->flush();
        $this->em->refresh($estimate);

        // Clear the line items
        $this->getEstimationRepository()->clearEstimateLineItems($proposalServiceId);
        // Clear any calculation values
        $this->getEstimationRepository()->deleteEstimationCalculatorValues($proposalServiceId);

        // Send the response
        $this->sendResponse([
            'error' => 0,
            'message' => 'Estimate Reset',
            'estimate' => $this->getEstimationRepository()->getEstimateData($estimate),
        ]);
    }

    public function saveEstimate($proposalServiceId)
    {
        $proposalService = $this->em->findProposalService($proposalServiceId);

        $estimate = $this->getEstimationRepository()->getProposalServiceEstimate($proposalService);
        $estimate->setCompleted(0);
        $this->em->persist($estimate);
        $this->em->flush();

        // Send the response
        $this->sendResponse([
            'error' => 0,
            'message' => 'Estimate Saved',
            'estimate' => $this->getEstimationRepository()->getEstimateData($estimate),
        ]);

    }

    public function applyEstimateProposalPrice()
    {
        // Get the values
        $proposalServiceId = $this->input->post('proposalServiceId');
        $proposalPrice = $this->input->post('proposalPrice');

        $search = ['$', ','];
        $replace = ['', ''];

        $newPrice = str_replace($search, $replace, $proposalPrice);

        // Load the objects
        $service = $this->em->findProposalService($proposalServiceId);
        $estimate = $this->getEstimationRepository()->getProposalServiceEstimate($service);

        // Old price for logging
        $oldPrice = '$' . number_format($estimate->getTotalPrice(), 2);

        // Save the service value
        $service->setPrice($proposalPrice);
        $this->em->persist($service);

        // Save the estimate values
        $estimate->setCustomPrice(1);
        $estimate->setTotalPrice($newPrice);
        $estimate->setCompleted(1);
        $this->em->persist($estimate);
        $this->em->flush();

        // Log it
        $this->getEstimationRepository()->addLog(
            $this->account(),
            $service->getProposal(),
            'adjust_price',
            'Adjusted Price from ' . $oldPrice . ' to $' . number_format($proposalPrice, 2)
        );

        $proposal = $this->em->findProposal($service->getProposal());
        //start regular log
        $this->log_manager->add(\models\ActivityAction::PROPOSAL_ESTIMATE_ITEM_PRICE_ADJUST,
            'Estimate: Adjusted Price from ' . $oldPrice . ' to $' . number_format($proposalPrice, 2),
            $proposal->getClient(),
            $proposal,
            null,
            $this->account());
        //end regular log
        // Send response
        $response = [
            'error' => 0,
            'estimate' => $this->getEstimationRepository()->getEstimateData($estimate),
        ];

        $this->sendResponse($response);
    }

    public function getProposalServiceTypeTotal($proposalServiceId, $typeId)
    {
        $totalPrice = $this->getEstimationRepository()->getProposalServiceTypeTotal($proposalServiceId, $typeId);
        echo json_encode([
            'totalPrice' => $totalPrice,
        ]);
    }

    public function getEstimateLineItemDetails($lineItemId)
    {
        $lineItem = $this->em->findEstimationLineItem($lineItemId);
        $response = [];

        if ($lineItem) {
            $response = [
                'unitPrice' => $lineItem->getUnitPrice(),
                'qty' => $lineItem->getQuantity(),
                'totalPrice' => $lineItem->getTotalPrice(),
            ];
        }

        $this->sendResponse($response);
    }

    public function getProposalServiceCategoryTotal($proposalServiceId, $categoryId)
    {
        $totalPrice = $this->getEstimationRepository()->getProposalServiceCategoryTotal($proposalServiceId, $categoryId);
        echo json_encode([
            'totalPrice' => $totalPrice,
        ]);
    }

    public function removeAdjustedPrice($proposalServiceId)
    {
        $proposalService = $this->em->findProposalService($proposalServiceId);
        $estimate = $this->getEstimationRepository()->getProposalServiceEstimate($proposalService);

        // Get the old price for logging
        $oldPrice = '$' . number_format($estimate->getTotalPrice(), 2);

        $estimate->setCustomPrice(0);
        $this->em->persist($estimate);
        $this->em->flush();

        $price = $this->getEstimationRepository()->getProposalServiceLineItemTotal($proposalServiceId);
        $newPrice = '$' . number_format($price, 2);
        $proposalService->setPrice($newPrice);
        $this->em->persist($proposalService);
        $this->em->flush();

        // Log it
        $this->getEstimationRepository()->addLog(
            $this->account(),
            $proposalService->getProposal(),
            'revert_price',
            'Adjusted Price reverted from ' . $oldPrice . ' to ' . $newPrice
        );


        $proposal = $this->em->findProposal($proposalService->getProposal());
        //start regular log
        $this->log_manager->add(\models\ActivityAction::PROPOSAL_ESTIMATE_ITEM_REVERT_PRICE,
            'Estimate: Adjusted Price reverted from ' . $oldPrice . ' to ' . $newPrice,
            $proposal->getClient(),
            $proposal,
            null,
            $this->account());
        //end regular log
        $this->sendResponse($this->getEstimationRepository()->getEstimateData($estimate));
    }

    public function proposalServiceEstimateItems($proposalServiceId, $phaseId)
    {

        $proposalService = $this->em->findProposalService($proposalServiceId);

        $data = [
            'proposalService' => $proposalService,
            'sortedItems' => $this->getEstimationRepository()
                ->getProposalServiceSortedLineItemsPhase($this->account()->getCompany(), $proposalServiceId, $phaseId),
        ];

        // Render view
        $content = $this->load->view('proposals/estimate/summary-sheet', $data, true);

        echo $content;
    }

    public function updateEstimationTemplateOrder()
    {
        $i = 0;

        foreach ($this->input->post('templates') as $templateId) {
            $template = $this->em->findEstimationTemplate($templateId);

            if ($template) {
                $template->setOrd($i);
                $this->em->persist($template);
                $i++;
            }
        }
        $this->em->flush();
    }

    public function updateEstimationTemplateItemOrder()
    {
        $i = 0;
        $templateItemIds = $this->input->post('template_items');

        foreach ($templateItemIds as $templateItemId) {
            $eti = $this->em->findEstimateTemplateItem($templateItemId);
            $eti->setOrd($i);
            $this->em->persist($eti);
            $i++;
        }
        $this->em->flush();
    }

    /**
     *  Update the value of a field
     */
    public function updateFieldValue()
    {
        $field = $this->em->findProposalServiceField($this->input->post('fieldId'));

        // Permission check needed

        if ($field) {
            $field->setFieldValue($this->input->post('fieldValue'));
            $this->em->persist($field);
            $this->em->flush();
        }

        $response = [
            'error' => 0,
        ];

        $this->sendResponse($response);
    }

    /**
     *  Needs a posted array called fields with two indexes - fieldId and field Value
     */
    public function updateFieldValues()
    {
        $fields = $this->input->post('fields');

        if (is_array($fields)) {

            foreach ($fields as $field) {

                $theField = $this->em->findProposalServiceField($field['fieldId']);

                if ($theField) {
                    $theField->setFieldValue($field['fieldValue']);
                    $this->em->persist($theField);
                }
            }
            $this->em->flush();
        }

        $response = [
            'error' => 0,
        ];

        $this->sendResponse($response);
    }

    public function saveTemplateItemDefaults()
    {
        $etiId = $this->input->post('eti');

        $eti = $this->em->findEstimateTemplateItem($etiId);

        if ($eti) {
            $eti->setDefaultDays($this->input->post('days'));
            $eti->setDefaultQty($this->input->post('qty'));
            $eti->setDefaultHpd($this->input->post('hpd'));
            $this->em->persist($eti);
            $this->em->flush();

            $this->sendResponse([
                'error' => 0,
            ]);
        } else {
            $this->sendResponse([
                'error' => 1,
                'message' => 'Error saving defaults',
            ]);
        }
    }

    public function saveCrewItemDefaults()
    {
        $etiId = $this->input->post('eti');

        $eti = $this->em->findEstimateCrewItem($etiId);

        if ($eti) {
            $eti->setDefaultDays($this->input->post('days'));
            $eti->setDefaultQty($this->input->post('qty'));
            $eti->setDefaultHpd($this->input->post('hpd'));
            $this->em->persist($eti);
            $this->em->flush();

            $this->sendResponse([
                'error' => 0,
            ]);
        } else {
            $this->sendResponse([
                'error' => 1,
                'message' => 'Error saving defaults',
            ]);
        }
    }

    /**
     *  Update the order of company estimation plants
     */
    public function updateEstimationPlantsOrder()
    {
        $i = 0;
        $plantIds = $this->input->post('plants');

        if (is_array($plantIds)) {

            foreach ($plantIds as $plantId) {

                $plant = $this->em->findEstimationPlant($plantId);

                if ($plant) {
                    $plant->setOrd($i);
                    $this->em->persist($plant);
                    $i++;
                }
            }
            $this->em->flush();
        }
    }

    public function updateForemenOrder()
    {
        $i = 0;
        $foremenIds = $this->input->post('foremen');

        if (is_array($foremenIds)) {

            foreach ($foremenIds as $foremenId) {

                $foremen = $this->em->find('models\Foremen', $foremenId);
                if ($foremen) {
                    $foremen->setOrd($i);
                    $this->em->persist($foremen);
                    $i++;
                }
            }
            $this->em->flush();
            $this->getQueryCacheRepository()->deleteCompanyForemenCache($this->account()->getCompanyId());
            // $this->em->getConfiguration()->getResultCacheImpl()->delete( CACHE_COMPANY_FOREMEN . $this->account()->getCompanyId());
        }
    }

    /**
     *  Update the order of company estimation dumps
     */
    public function updateEstimationDumpsOrder()
    {
        $i = 0;
        $dumpIds = $this->input->post('dumps');

        if (is_array($dumpIds)) {

            foreach ($dumpIds as $dumpId) {

                $dump = $this->em->findEstimationPlant($dumpId);

                if ($dump) {
                    $dump->setOrd($i);
                    $this->em->persist($dump);
                    $i++;
                }
            }
            $this->em->flush();
        }
    }

    public function getProposalServiceCustomItems($proposalServiceId)
    {
        $customItems = $this->getEstimationRepository()->getProposalServiceLineItemArray($proposalServiceId, true);

        $this->sendResponse($customItems);
    }

    /**
     *  Retrieve all line items belonging to a phase
     */
    public function getPhaseLineCustomItems()
    {
        $phaseId = $this->input->post('phaseId');
        $proposal_service_id = $this->input->post('proposal_service_id');
        if ($phaseId) {
            $lineItems = $this->getEstimationRepository()->getPhaseLineItemArray($phaseId, $proposal_service_id, true);
            $feesLineItems = $this->getEstimationRepository()->getPhaseLineItemArray($phaseId, $proposal_service_id, false, true, false);
            $permitLineItems = $this->getEstimationRepository()->getPhaseLineItemArray($phaseId, $proposal_service_id, false, false, true);
            $phase = $this->em->findEstimationPhase($phaseId);
            $out = [
                'lineItems' => $lineItems,
                'feesLineItems' => $feesLineItems,
                'permitLineItems' => $permitLineItems,
                'phase_complete' => $phase->getComplete(),
            ];
        } else {
            $out = [];
        }

        $this->sendResponse($out);
    }

    /**
     *  Retrieve all line items belonging to a phase
     */
    public function getPhaseLineSubContractorsItems()
    {
        $phaseId = $this->input->post('phaseId');
        $proposal_service_id = $this->input->post('proposal_service_id');
        if ($phaseId) {
            $lineItems = $this->getEstimationRepository()->getPhaseSubContractorLineItemArray($phaseId, $proposal_service_id, true);
            $phase = $this->em->findEstimationPhase($phaseId);
            $out = [
                'lineItems' => $lineItems,
                'phase_complete' => $phase->getComplete(),
            ];
        } else {
            $out = [];
        }

        $this->sendResponse($out);
    }

    public function getCustomEstimateLineItemDetails($lineItemId)
    {
        $lineItem = $this->em->findEstimationLineItem($lineItemId);
        $response = [];

        if ($lineItem) {
            $response = [
                'unitPrice' => $lineItem->getUnitPrice(),
                'qty' => $lineItem->getQuantity(),
                'totalPrice' => $lineItem->getTotalPrice(),
                'basePrice' => $lineItem->getBasePrice(),
                'overhead_rate' => $lineItem->getOverheadRate(),
                'overhead_rate_price' => $lineItem->getOverheadPrice(),
                'profit_rate' => $lineItem->getProfitRate(),
                'profit_price' => $lineItem->getProfitPrice(),
                'tax_rate' => $lineItem->getTaxRate(),
                'tax_price' => $lineItem->getTaxPrice(),
                'custom_name' => $lineItem->getCustomName(),
                'sub_id' => $lineItem->getSubId(),
                'notes' => $lineItem->getNotes(),
                'fees' => $lineItem->getFees(),
                'permit' => $lineItem->getPermit(),
                'work_order' => $lineItem->getWorkOrder(),
                'is_custom_price' => $lineItem->getCustomTotalPrice(),
            ];
        }

        $this->sendResponse($response);
    }

    public function updateEstimateLineItems()
    {
        //echo $this->input->post('unitPrice');die;
        // Send this independently so total price can be returned
        $proposalServiceId = $this->input->post('proposalServiceId');

        // This is the array of line items. Each item should be an array of values
        $estimate_id = $this->input->post('id');

        $apply = 1;
        $eli = $this->em->findEstimationLineItem($estimate_id);

        // Unit Price
        $eli->setUnitPrice($this->input->post('unitPrice'));
        // Custom Unit Price - 0 or 1
        $eli->setCustomUnitPrice($this->input->post('customUnitPrice'));
        // Quantity
        $eli->setQuantity($this->input->post('quantity'));
        // Total Price
        $eli->setTotalPrice($this->input->post('totalPrice'));
        // Save it
        $this->em->persist($eli);

        // Flush to DB
        $this->em->flush();

        // Update the Estimate Object
        $proposalService = $this->em->findProposalService($proposalServiceId);
        $estimate = $this->getEstimationRepository()->getProposalServiceEstimate($proposalService);
        $estimate->setCompleted($apply);
        $price = $this->getEstimationRepository()->getProposalServiceLineItemTotal($proposalServiceId);
        $newPrice = '$' . number_format($price, 2);
        $estimate->setTotalPrice($newPrice);

        $estimate->setCustomPrice(0);
        $this->em->persist($estimate);

        // Apply to proposal Service
        if ($apply) {
            $proposalService->setPrice($newPrice);
            $proposalService->setTaxPrice($this->getEstimationRepository()->getProposalServiceLineItemTaxTotal($proposalServiceId));
        }
        $this->em->flush();
        updateProposalPrice($proposalService->getProposal());
        // Respond
        $response = [];
        $response['message'] = 'Items Saved';
        $response['total_price'] = $estimate->getTotalPrice();
        $response['estimate'] = $this->getEstimationRepository()->getEstimateData($estimate);
        $response['lineItemId'] = $eli->getId();
        $this->sendResponse($response);
    }

    public function upload_estimate_items()
    {
        $er = $this->getEstimationRepository();
        $company = $this->account()->getCompany();

        $alphabet = range('A', 'Z');
        $uploadedFile = $_FILES['uploadCsv'];
        $extension = strtolower(pathinfo($_FILES["uploadCsv"]["name"], PATHINFO_EXTENSION));

        // Check file type
        if ($extension !== 'csv') {
            $this->sendResponse([
                'error' => 1,
                'message' => 'Uploads may only be .csv format',
            ]);
            return;
        }

        // Good to go, start reading
        $csv = Reader::createFromPath($uploadedFile['tmp_name']);
        $results = $csv->fetchAll();

        // Check we have enough rows
        if (count($results) < 2) {
            $this->sendResponse([
                'error' => 1,
                'message' => 'No data was found in the upload',
            ]);
            return;
        }

        // Validation Array
        $rules = [
            // Category - value must be one of these
            0 => [
                'Material', 'Equipment', 'Labor', 'Services',
            ],
            // Unit
            3 => [
                'Square Yards',
                'Square Feet',
                'Inches',
                'Feet',
                'Yards',
                'Miles',
                'Inches',
                'Feet',
                'Gallons',
                'Cubic Yards',
                'Ounces',
                'Pounds',
                'Grams',
                'Kilograms',
                'Tons',
                'Minutes',
                'Hours',
                'Days',
                'Weeks',
                'Trips',
                'Quantity',
            ],
        ];

        $errors = [];

        // Loop through each row
        foreach ($results as $k => $row) {

            if (count($row) < 3) {
                continue;
            }
            $rowNum = $k + 1;

            if ($k > 0) {
                // Index 0 - Category
                if (!in_array($row[0], $rules[0])) {
                    $error = [
                        'column' => $alphabet[0],
                        'row' => $rowNum,
                        'message' => 'Category name must match the available categories',
                    ];

                    // Send the response
                    $this->sendResponse([
                        'error' => 1,
                        'errorDetails' => $error,
                    ]);
                    return;
                }

                // Index 1 - Type
                if (!$row[1]) {
                    $error = [
                        'column' => $alphabet[1],
                        'row' => $rowNum,
                        'message' => 'Type name must not be blank',
                    ];

                    // Send the response
                    $this->sendResponse([
                        'error' => 1,
                        'errorDetails' => $error,
                    ]);
                    return;
                }

                // Index 2- Name
                if (!$row[2]) {
                    $error = [
                        'column' => $alphabet[2],
                        'row' => $rowNum,
                        'message' => 'Item Must have a name',
                    ];

                    // Send the response
                    $this->sendResponse([
                        'error' => 1,
                        'errorDetails' => $error,
                    ]);
                    return;
                }

                // Index 3 - Unit
                if (!in_array($row[3], $rules[3])) {
                    $error = [
                        'column' => $alphabet[3],
                        'row' => $rowNum,
                        'message' => 'Unit name must match the available unit types',
                    ];

                    // Send the response
                    $this->sendResponse([
                        'error' => 1,
                        'errorDetails' => $error,
                    ]);
                    return;
                }

                // Index 4 - Base Price
                // Strip any dollar signs and spaces
                $basePriceVal = str_replace(['$', ' '], ['', ''], $row[4]);

                if ((!is_numeric($basePriceVal)) || (floatval($basePriceVal) <= 0)) {
                    $error = [
                        'column' => $alphabet[4],
                        'row' => $rowNum,
                        'message' => 'Base Price must be a valid number and above $0',
                        'input' => $basePriceVal,
                    ];

                    // Send the response
                    $this->sendResponse([
                        'error' => 1,
                        'errorDetails' => $error,
                    ]);
                    return;
                }

                // Index 5 - Overhead Rate Price
                // Strip any dollar signs, spaces and percent signs
                $overheadRate = str_replace(['$', ' ', '%'], ['', '', ''], $row[5]);
                if (!is_numeric($overheadRate)) {
                    $error = [
                        'column' => $alphabet[5],
                        'row' => $rowNum,
                        'message' => 'Overhead Rate must be a valid number',
                        'input' => $overheadRate,
                    ];

                    // Send the response
                    $this->sendResponse([
                        'error' => 1,
                        'errorDetails' => $error,
                    ]);
                    return;
                }

                // Index 6 - Profit Rate Price
                // Strip any dollar signs, spaces and percent signs
                $overheadRate = str_replace(['$', ' ', '%'], ['', '', ''], $row[6]);
                if (!is_numeric($overheadRate)) {
                    $error = [
                        'column' => $alphabet[6],
                        'row' => $rowNum,
                        'message' => 'Profit Rate must be a valid number',
                        'input' => $overheadRate,
                    ];

                    // Send the response
                    $this->sendResponse([
                        'error' => 1,
                        'errorDetails' => $error,
                    ]);
                    return;
                }

                // Index 7 - Tax Rate Price
                // Strip any dollar signs, spaces and percent signs
                $overheadRate = str_replace(['$', ' ', '%'], ['', '', ''], $row[7]);
                if (!is_numeric($overheadRate)) {
                    $error = [
                        'column' => $alphabet[7],
                        'row' => $rowNum,
                        'message' => 'Tax Rate must be a valid number',
                        'input' => $overheadRate,
                    ];

                    // Send the response
                    $this->sendResponse([
                        'error' => 1,
                        'errorDetails' => $error,
                    ]);
                    return;
                }

                // Index 10 - Tax Rate Price
                // Strip any dollar signs, spaces and percent signs
                $capacity = $row[10];
                if ($row[1] == 'Trucking') {

                    if (!is_numeric($capacity) || (floatval($capacity) <= 0)) {
                        $error = [
                            'column' => $alphabet[10],
                            'row' => $rowNum,
                            'message' => 'Capacity must be entered for trucking items',
                            'input' => $capacity,
                        ];

                        // Send the response
                        $this->sendResponse([
                            'error' => 1,
                            'errorDetails' => $error,
                        ]);
                        return;
                    }
                }

            }
        }

        // We're only here if there were no errors
        foreach ($results as $i => $row) {

            // Skip the heading row
            if ($i > 0) {

                $newItem = new \models\EstimationItem();
                $newItem->setCompanyId($this->account()->getCompanyId());

                // Check the category exists
                $itemCategory = $er->getCategoryByName($row[0]);

                if ($itemCategory) {

                    // Retrieve or create a type
                    $type = $er->getCategoryTypeByName($company, $itemCategory->getId(), $row[1]);
                    // Assign it to the object
                    $newItem->setTypeId($type->getId());

                    // Set the unit
                    $unit = $er->getUnitByName($row[3]);
                    $newItem->setUnit($unit->getId());

                    // Set the item name
                    $newItem->setName($row[2]);

                    // Set the base price
                    $newItem->setBasePrice(str_replace(['$', ' '], ['', ''], $row[4]));

                    // Set the overhead rate
                    $newItem->setOverheadRate(str_replace(['%', ' '], ['', ''], $row[5]));

                    // Set the overhead rate
                    $newItem->setProfitRate(str_replace(['%', ' '], ['', ''], $row[6]));

                    // Set the tax rate
                    $newItem->setTaxRate(str_replace(['%', ' '], ['', ''], $row[7]));

                    // Set the taxable
                    if ($newItem->getTaxRate() > 0) {
                        $newItem->setTaxable(1);
                    } else {
                        $newItem->setTaxable(0);
                    }

                    // Math for prices
                    $overheadMultiplier = ($newItem->getOverheadRate() / 100);
                    $profitMultiplier = ($newItem->getProfitRate() / 100);

                    $overheadPrice = $newItem->getBasePrice() * $overheadMultiplier;
                    $profitPrice = $newItem->getBasePrice() * $profitMultiplier;

                    // Set overhead and profit prices
                    $newItem->setOverheadPrice($overheadPrice);
                    $newItem->setProfitPrice($profitPrice);

                    // Set total uni price
                    $totalPrice = $newItem->getBasePrice() + $newItem->getOverheadPrice() + $newItem->getProfitPrice();
                    $newItem->setUnitPrice($totalPrice);

                    // Vendor
                    $newItem->setVendor($row[8]);

                    // SKU
                    $newItem->setSku($row[9]);

                    // Capacity
                    $newItem->setCapacity($row[10]);

                    // Notes
                    $newItem->setNotes($row[11]);

                    $this->em->persist($newItem);
                }
                $this->em->flush();
            }
        }

        // We do, so let's start checking data
        $response = [
            'error' => 0,
            'rows' => count($results),
        ];

        $this->sendResponse($response);
    }

    public function saveEstimatorValues()
    {
        // Update the fields
        $fields = $this->input->post('fields');
        $phase_id = $this->input->post('PhaseId');
        if (is_array($fields)) {

            foreach ($fields as $field) {
                $theField = $this->em->findProposalServiceField($field['fieldId']);
                if ($theField) {
                    $theField->setFieldValue($field['fieldValue']);
                    $this->em->persist($theField);
                }
            }
            $this->em->flush();
        }

        // Save Line items //
        // We need the proposal service ID
        $proposalServiceId = $this->input->post('proposalServiceId');
        // This is the array of line items. Each item should be an array of values
        $lineItems = $this->input->post('lineItems');
         // Apply price to proposal or not (1/0)
        //$apply = $this->input->post('apply');
        // Save every time
        $apply = 1;

        $day = '0';
        $quantity = '0';
        $hour_per_day = '0';
        $item_category = '';
        if ($this->input->post('values')) {
            $savedNewData = $this->input->post('values');

            foreach ($savedNewData as $data) {

                if ($data['name'] === 'time_type_input' || $data['name'] === 'labor_time_type_input' || $data['name'] === 'equipement_time_type_input' || $data['name'] === 'sep_trucking_day' || $data['name'] === 'trucking_day') {
                    $day = $data['value'];
                } else if ($data['name'] === 'number_of_person' || $data['name'] === 'labor_number_of_person' || $data['name'] === 'equipement_number_of_person' || $data['name'] === 'truck_per_day') {
                    $quantity = $data['value'];
                } else if ($data['name'] === 'hour_per_day' || $data['name'] === 'labor_hour_per_day' || $data['name'] === 'equipement_hour_per_day' || $data['name'] === 'sep_hours_per_trucks') {
                    $hour_per_day = str_replace(',', '', $data['value']);
                }
            }
        }

        foreach ($lineItems as $lineItem) {

            $updating = false;
            // Load or create new object
            if ($lineItem['id']) {
                $eli = $this->em->findEstimationLineItem($lineItem['id'] ?: null);
                $updating = true;
                $oldItem = clone $eli;
                $oldItemQunatity = $oldItem->getQuantity();
              
            } else {
                $eli = new EstimationLineItem();
                $oldItemQunatity = $lineItem['quantity'];
            }

            $expected_total = $lineItem['basePrice'] * $lineItem['quantity'];
            // Proposal ID
            $eli->setProposalId($lineItem['proposal_Id'] ?: null);
            // ProposalService ID
            $eli->setProposalServiceId($lineItem['proposalServiceId'] ?: null);
            // Item ID
            $eli->setItemId($lineItem['itemId']);
            // Phase ID
            $eli->setPhaseId($lineItem['PhaseId']);
            // Sub ID
            $eli->setSubId($lineItem['sub_id']);
            // Unit Price
            $eli->setUnitPrice($lineItem['unitPrice']);
            // Custom Unit Price - 0 or 1
            $eli->setCustomUnitPrice($lineItem['customUnitPrice']);
            // Quantity
            $eli->setQuantity($lineItem['quantity']);
            // Total Price
            $eli->setTotalPrice($lineItem['totalPrice']);
            // Base price
            $eli->setBasePrice($lineItem['basePrice']);
            // setOverheadRate
            $eli->setOverheadRate($lineItem['overHeadRate']);
            // set Profit Rate
            $eli->setProfitRate($lineItem['profitRate']);
            // set OverheadPrice
            $eli->setOverheadPrice($lineItem['overHeadPrice']);
            // set Profit Price
            $eli->setProfitPrice($lineItem['profitPrice']);
            // Set Tax Rate
            $eli->setTaxRate($lineItem['taxRate']?$lineItem['taxRate']:00.00);
            // Set Tax Price
            $eli->setTaxPrice($lineItem['taxPrice']?$lineItem['taxPrice']:00.00);
            // Set Plant ID
            $eli->setPlantId(@$lineItem['plantId'] ?: null);
            // Set Template ID
            $eli->setTemplateId(@$lineItem['template_type_id'] ?: null);
            // Set day
            $eli->setDay($day);
            // Set Num people
            $eli->setNumPeople($quantity);
            // Set hours_per_day
            $eli->setHoursPerDay($hour_per_day);
            $eli->setCustomTotalPrice(0);
            // Set Expected total
            $eli->setExpectedTotal($expected_total);
            // Set Edited Base Price
            $eli->setEditedBasePrice($lineItem['edited_base_price']);
            // Set Edited Unit Price
            $eli->setEditedUnitPrice($lineItem['edited_unit_price']);
            // Set Edited Total Price
            $eli->setEditedTotalPrice($lineItem['edited_total_price']);
            // Set Disposal check
            $eli->setDisposalLoadCheck(@$lineItem['disposal_load_check'] ?: 0);
            // Set Disposal loads
            $eli->setDisposalLoads(@$lineItem['disposal_loads'] ?: 0);
            // Set Disposal Total Price
            $eli->setDisposalUnitPrice(@$lineItem['disposal_unit_price'] ?: 0.00); 
            // Save it
            $this->em->persist($eli);


            // Update the phase status - pass by reference to update
            $this->getEstimationRepository()->updatePhaseStatus($eli->getPhase());

            if ($eli->getFixedTemplate() == 2) {
                $this->updateFixedTemplateTotalPrice($lineItem['template_type_id'], $lineItem['PhaseId']);
            }
 
            $logMessage = $eli->getItem()->getName() . " item added for Service: " . $eli->getProposalService()->getServiceName();
            //print_r($proposalServiceId);die;
            $logMessage2 = '';
            if ($updating) {
                $logMessage = $eli->getItem()->getName() . " item updated for Service: " . $eli->getProposalService()->getServiceName();
                $logMessage .= '<br />';
                $logMessage .= $this->getEstimationRepository()->getLineItemsDifferencesString($oldItem, $eli);


                if ($oldItem->getTemplateId()) {
                    if ($oldItem->getTemplateId() != $eli->getTemplateId()) {
                        if ($eli->getTemplateId()) {
                            $logMessage2 = $eli->getItem()->getName() . ' change from ' . $this->getTemplateName($oldItem->getTemplateId()) . ' Template';
                        } else {
                            $logMessage2 = $eli->getItem()->getName() . ' removed from ' . $this->getTemplateName($oldItem->getTemplateId()) . ' Template';
                        }

                    }
                }
            } else {
                if ($eli->getTemplateId()) {
                    $logMessage2 = $eli->getItem()->getName() . ' added To ' . $this->getTemplateName($eli->getTemplateId()) . ' Template';
                }
                if ($lineItem['edited_base_price']) {
                    $logMessage .= '<br />';
                    $logMessage .= '<strong>Unit Base Price:</strong> Adjusted to $' . number_format($lineItem['basePrice']);
                    $logMessage .= '<br />';
                    $logMessage .= '<strong>Total Price:</strong> $' . number_format($lineItem['totalPrice']);

                } else if ($lineItem['edited_unit_price']) {
                    $logMessage .= '<br />';
                    $logMessage .= '<strong>Unit Price:</strong> Adjusted to $' . number_format($lineItem['unitPrice']);
                    $logMessage .= '<br />';
                    $logMessage .= '<strong>Total Price:</strong> $' . number_format($lineItem['totalPrice']);

                } else if ($lineItem['edited_total_price']) {
                    $logMessage .= '<br />';
                    $logMessage .= '<strong>Total Price:</strong> Adjusted to $' . number_format($lineItem['totalPrice']);

                }
            }

            // Log it
            $this->getEstimationRepository()->addLog(
                $this->account(),
                $eli->getProposalService()->getProposal(),
                'save_item',
                $logMessage
            );

            $proposal = $this->em->findProposal($eli->getProposalService()->getProposal());
            //start regular log
            $this->log_manager->add(\models\ActivityAction::PROPOSAL_ESTIMATE_ADD_ITEM,
                'Estimate: ' . $logMessage,
                $proposal->getClient(),
                $proposal,
                null,
                $this->account());
            //end regular log
            if ($logMessage2 != '') {
                // Log it
                $this->getEstimationRepository()->addLog(
                    $this->account(),
                    $eli->getProposalService()->getProposal(),
                    'save_item',
                    $logMessage2
                );

                //start regular log
                $this->log_manager->add(\models\ActivityAction::PROPOSAL_ESTIMATE_ADD_ITEM,
                    'Estimate: ' . $logMessage2,
                    $proposal->getClient(),
                    $proposal,
                    null,
                    $this->account());
                //end regular log
            }
            $item_category = $eli->getItem()->getType()->getCategoryId();
            $item_type_id = $eli->getItem()->getTypeId();
        }
        // Flush to DB
        $this->em->flush();
        $phase = $this->em->findEstimationPhase($phase_id);
        $phase->setComplete(1);
        $this->em->persist($phase);
        $this->em->flush();
        try {

            $scv = $this->em->getRepository('models\EstimationCalculatorValue')->findOneBy(array(
                'line_item_id' => $eli->getId()
            ));

            if (!$scv) {
                $scv = new \models\EstimationCalculatorValue();
            }
            $valuesText = '{}';
            if (is_array($this->input->post('values'))) {
                $valuesText = json_encode($this->input->post('values'));
            }
            $scv->setProposalServiceId($this->input->post('proposalServiceId'));
            $scv->setItemId($this->input->post('itemId'));
            $scv->setSavedValues($valuesText);
            $scv->setCalculatorName($this->input->post('calculator_name'));
            $scv->setLineItemId($eli->getId());
            $this->em->persist($scv);
            $this->em->flush();

            $response = [
                'id' => $scv->getId(),
            ];
        } catch (\Exception $e) {

        }
        $numLineItems = $this->getEstimationRepository()->getProposalServiceUncompletedPhasesCount($proposalServiceId);

        // Update the Estimate Object
        $proposalService = $this->em->findProposalService($proposalServiceId);
        $proposal = $this->em->findProposal($proposalService->getProposal());
        $estimate = $this->getEstimationRepository()->getProposalServiceEstimate($proposalService);
        //echo "<pre>estimate";print_r($estimate); 
         //$estimate->setCompleted($apply);
        if ($numLineItems > 0) {
            $estimate->setCompleted(0);
        } else {
            $estimate->setCompleted(1);
        }
        $price = $this->getEstimationRepository()->getProposalServiceLineItemTotal($proposalServiceId);
        $newPrice = '$' . number_format($price, 2);        
        $estimate->setTotalPrice($newPrice);
      //  echo "newPrice".$newPrice;die;
        $estimate->setCustomPrice(0);
        $this->em->persist($estimate);
        $this->em->flush();
        // Apply to proposal Service
        if ($apply) {
            // echo "newPrice".$newPrice;die;
            $proposalService->setPrice($newPrice);
            $proposalService->setTaxPrice($this->getEstimationRepository()->getProposalServiceLineItemTaxTotal($proposalServiceId));
            $this->em->persist($proposalService);
        }
        $this->em->flush();
        updateProposalPrice($proposalService->getProposal());
        $uncom_estimate = $this->getEstimationRepository()->getUncompletedEstimate($proposal->getProposalId());
        $is_completed = false;
        if ($uncom_estimate == 0) {
            $is_completed = true;
            $proposal->setEstimateStatusId(\models\EstimateStatus::COMPLETE);
            $this->em->persist($proposal);
            $this->em->flush();
        } else if ($proposal->getEstimateStatusId() == \models\EstimateStatus::NOT_STARTED) {
            $is_completed = false;
            $proposal->setEstimateStatusId(\models\EstimateStatus::IN_PROGRESS);
            $this->em->persist($proposal);
            $this->em->flush();
        }
        $this->getEstimationRepository()->updateProposalEstimate($proposal, $is_completed);
        $this->getEstimationRepository()->updateEstimatePhase($phase);
        $this->getEstimationRepository()->UpdateChildItemAsPerentUpdated2($lineItem['id']);
        if ($lineItem['id']) {
            if ($oldItemQunatity != $lineItem['quantity']) {
                $childTruckingItems = $this->getEstimationRepository()->getChildTruckingItems($lineItem['id']);
                foreach ($childTruckingItems as $childTruckingItem) {
                    $calculator = $this->getEstimationRepository()->getEstimateCalculatorValue($childTruckingItem->id);
                    if ($calculator) {

                        $formdata = json_decode(json_encode(json_decode($calculator[0]['saved_values'])), true);
                        $this->recalculate_child_trucking_estimate($formdata, $childTruckingItem, $lineItem['quantity'], $calculator[0]['id']);
                    }

                }
            } else if ($item_type_id == 6) {
                $values = $this->input->post('values');
                $measurement = 0;
                $measurement_unit = 0;
                $excavator_depth = 0;
                //print_r($values);

                foreach ($values as $data) {
                    if ($data['name'] === 'excavator_measurement') {
                        $measurement = str_replace(',', '', $data['value']);
                    } else if ($data['name'] === 'excavator_measurement_unit') {
                        $measurement_unit = str_replace(',', '', $data['value']);
                    } else if ($data['name'] === 'excavator_depth') {
                        $excavator_depth = str_replace(',', '', $data['value']);
                    }

                }

                if ($measurement_unit == 'square feet') {
                    $measurement = round($measurement / 9);
                }
                $temp_quantity = ($measurement * (0.055 * $excavator_depth));

                $childTruckingItems = $this->getEstimationRepository()->getChildTruckingItems($lineItem['id']);

                foreach ($childTruckingItems as $childTruckingItem) {

                    $calculator = $this->getEstimationRepository()->getEstimateCalculatorValue($childTruckingItem->id);
                    if ($calculator) {

                        $formdata = json_decode(json_encode(json_decode($calculator[0]['saved_values'])), true);
                        $this->recalculate_child_trucking_estimate($formdata, $childTruckingItem, $temp_quantity, $calculator[0]['id']);
                    }

                }
            }
        }
        // Respond
        $response = [];
        $response['message'] = 'Items Saved';
        $response['total_price'] = $estimate->getTotalPrice();
        $response['estimate'] = $this->getEstimationRepository()->getEstimateData($estimate);
        $response['lineItemId'] = $eli->getId();
        $response['calId'] = $scv->getId();
        $response['breakdown'] = $this->getEstimationRepository()->getProposalServicePriceBreakdown($proposalServiceId);
        $this->sendResponse($response);

    }

    public function getChildItems($lineItemId)
    {
        $lineItems = $this->getEstimationRepository()->getChildLineItems($lineItemId);
        $items = [];

        foreach ($lineItems as $lineItem) {
            $savedValues = $this->em->getRepository('models\EstimationCalculatorValue')
                ->findOneBy([
                    'line_item_id' => $lineItem->getId(),
                ]);


            if ($savedValues) {
                $cal_id = $savedValues->getId();
            } else {
                $cal_id = '';
            }
            if ($lineItem->getItemId() == 0) {
                $item_name = $lineItem->getCustomName();
            } else {
                $item_name = $lineItem->getItem()->getName();
            }

            if ($lineItem->getDumpTruckingId() > 0) {
                $unit_single_abbr = 'T';
                $unit = '';
            } else {
                $unit_single_abbr = $lineItem->getItem()->getUnitModel()->getSingleAbbr();
                $unit = $lineItem->getItem()->getUnitModel()->getName();
            }
            $items[] = [
                'item_name' => $item_name,
                'item_type_id' => $lineItem->getItem()->getTypeId(),
                'item_type_name' => $lineItem->getItem()->getType()->getName(),
                'unit' => $unit,
                'unit_single_abbr' => $unit_single_abbr,
                'item_unit_price' => $lineItem->getUnitPrice(),
                'item_quantity' => $lineItem->getQuantity(),
                'item_total_price' => $lineItem->getTotalPrice(),
                'item_eli_id' => $lineItem->getId(),
                'item_id' => $lineItem->getItemId(),
                'tax_price' => $lineItem->getTaxPrice(),
                'item_category_id' => $lineItem->getItem()->getType()->getCategoryId(),
                'calculation_id' => $cal_id,
                'parent_updated' => $lineItem->getParentUpdated(),
                'fees' => $lineItem->getFees(),
                'permit' => $lineItem->getPermit(),
                'day' => $lineItem->getDay(),
                'quantity' => $lineItem->getNumPeople(),
                'hour_per_day' => $lineItem->getHoursPerDay(),
                'overhead_price' => $lineItem->getOverheadPrice(),
                'profit_price' => $lineItem->getProfitPrice(),
            ];
        }

        echo json_encode($items);
    }

    /**
     *  API function to create a phase
     */
    public function addEstimatingPhase()
    {
        $proposalServiceId = $this->input->post('proposalServiceId');
        $phaseName = $this->input->post('phaseName');
        $proposal_Id = $this->input->post('proposal_Id');

        if (!$proposalServiceId || !$phaseName) {
            $this->sendResponse([
                'error' => 1,
                'message' => 'Error creating phase',
            ]);
            return;
        }

        $phase = new \models\EstimationPhase();
        $phase->setComplete(0);
        $phase->setProposalServiceId($proposalServiceId);
        $phase->setProposalId($proposal_Id);
        $phase->setName($phaseName);
        $this->em->persist($phase);
        $this->em->flush();

        $numLineItems = $this->getEstimationRepository()->getProposalServiceUncompletedPhasesCount($proposalServiceId);
        // If no line items remaining, set estimate as incomplete
        // Update the Estimate Object
        $proposalService = $this->em->findProposalService($proposalServiceId);
        $estimate = $this->getEstimationRepository()->getProposalServiceEstimate($proposalService);
        //$estimate->setCompleted($apply);
        if ($numLineItems > 0) {
            $estimate->setCompleted(0);
            $completed = 0;
        } else {
            $estimate->setCompleted(1);
            $completed = 1;
        }
        $price = $this->getEstimationRepository()->getProposalServiceLineItemTotal($proposalServiceId);
        $newPrice = '$' . number_format($price, 2);
        $estimate->setTotalPrice($newPrice);
        $estimate->setCustomPrice(0);
        $this->em->persist($estimate);
        $this->em->flush();

        if ($phase->getId()) {
            // Log it
            $this->getEstimationRepository()->addLog(
                $this->account(),
                $phase->getProposalService()->getProposal(),
                'add_phase',
                'Phase "' . $phase->getName() . '" created for Service ' . $phase->getProposalService()->getServiceName()
            );

            $proposal = $this->em->findProposal($phase->getProposalService()->getProposal());
            //start regular log
            $this->log_manager->add(\models\ActivityAction::PROPOSAL_ESTIMATE_ADD_PHASE,
                'Estimate: Phase "' . $phase->getName() . '" created for Service ' . $phase->getProposalService()->getServiceName(),
                $proposal->getClient(),
                $proposal,
                null,
                $this->account());
            //end regular log
            $this->sendResponse([
                'error' => 0,
                'message' => 'Phase created',
                'estimate' => $completed,
            ]);
        } else {
            $this->sendResponse([
                'error' => 1,
                'message' => 'Error saving phase',
            ]);
        }
    }

    /**
     *  API function to edit a phase
     */
    public function editEstimatingPhase()
    {
        $phaseId = $this->input->post('phaseId');
        $phaseName = $this->input->post('phaseName');

        if (!$phaseId) {
            $this->sendResponse([
                'error' => 1,
                'message' => 'Error in request',
            ]);
            return;
        }

        $phase = $this->em->findEstimationPhase($phaseId);
        $oldPhaseName = $phase->getName();

        if (!$phase) {
            $this->sendResponse([
                'error' => 1,
                'message' => 'Error loading phase',
            ]);
            return;
        }

        $phase->setName($phaseName);
        $this->em->persist($phase);
        $this->em->flush();

        if ($phase->getId()) {
            // Log it
            $this->getEstimationRepository()->addLog(
                $this->account(),
                $phase->getProposalService()->getProposal(),
                'edit_phase',
                'Phase "' . $oldPhaseName . ' edited to "' . $phase->getName() . '"'
            );

            $proposal = $this->em->findProposal($phase->getProposalService()->getProposal());
            //start regular log
            $this->log_manager->add(\models\ActivityAction::PROPOSAL_ESTIMATE_EDIT_PHASE,
                'Estimate: Phase "' . $oldPhaseName . ' edited to "' . $phase->getName() . '"',
                $proposal->getClient(),
                $proposal,
                null,
                $this->account());
            //end regular log

            $this->sendResponse([
                'error' => 0,
                'message' => 'Phase updated',
            ]);
        } else {
            $this->sendResponse([
                'error' => 1,
                'message' => 'Error updating phase',
            ]);
        }
    }

    /**
     *  API function to delete a phase
     */
    public function deleteEstimatingPhase()
    {
        $phaseId = $this->input->post('phaseId');
        $proposalServiceId = $this->input->post('proposalServiceId');

        if (!$phaseId) {
            $this->sendResponse([
                'error' => 1,
                'message' => 'Error in request',
            ]);
            return;
        }

        $phase = $this->em->findEstimationPhase($phaseId);

        if (!$phase) {
            $this->sendResponse([
                'error' => 1,
                'message' => 'Error loading phase',
            ]);
            return;
        }

        // Log it
        $this->getEstimationRepository()->addLog(
            $this->account(),
            $phase->getProposalService()->getProposal(),
            'delete_phase',
            'Phase "' . $phase->getName() . '" deleted'
        );

        $proposal = $this->em->findProposal($phase->getProposalService()->getProposal());
        //start regular log
        $this->log_manager->add(\models\ActivityAction::PROPOSAL_ESTIMATE_DELETE_PHASE,
            'Estimate: Phase "' . $phase->getName() . '" deleted',
            $proposal->getClient(),
            $proposal,
            null,
            $this->account());
        //end regular log

        $this->em->remove($phase);
        $this->em->flush();
        $items = $this->getEstimationRepository()->getAllPhaseItems($phaseId);

        $this->getEstimationRepository()->clearEstimateLineItemsByPhaseId($phaseId);
        $this->getEstimationRepository()->clearJobCostItemsByEstimateItems($items);
        $numLineItems = $this->getEstimationRepository()->getProposalServiceUncompletedPhasesCount($proposalServiceId);
        // If no line items remaining, set estimate as incomplete
        // Update the Estimate Object
        $proposalService = $this->em->findProposalService($proposalServiceId);

        $estimate = $this->getEstimationRepository()->getProposalServiceEstimate($proposalService);
        //$estimate->setCompleted($apply);
        if ($numLineItems > 0) {
            $estimate->setCompleted(0);
            $completed = 0;
        } else {
            $estimate->setCompleted(1);
            $completed = 1;
        }
        $price = $this->getEstimationRepository()->getProposalServiceLineItemTotal($proposalServiceId);
        $newPrice = '$' . number_format($price, 2);
        $estimate->setTotalPrice($newPrice);
        $estimate->setCustomPrice(0);
        $this->em->persist($estimate);

        $proposalService->setPrice($newPrice);
        $proposalService->setTaxPrice($this->getEstimationRepository()->getProposalServiceLineItemTaxTotal($proposalServiceId));
        $this->em->persist($proposalService);

        $this->em->flush();
        updateProposalPrice($proposalService->getProposal());
        $this->sendResponse([
            'error' => 0,
            'message' => 'Phase deleted',
            'estimation' => $completed,
            'estimate' => $this->getEstimationRepository()->getEstimateData($estimate),
            'breakdown' => $this->getEstimationRepository()->getProposalServicePriceBreakdown($proposalServiceId),
            'total_price' => $this->getEstimationRepository()->getProposalServiceLineItemTotal($proposalServiceId),
            'child_has_updated_flag' => $this->getEstimationRepository()->getChildUpdatedFlagCount($proposalServiceId),
        ]);
    }

    /**
     *  API function to complete a phase
     */
    public function completeEstimatingPhase()
    {
        $phaseId = $this->input->post('phaseId');

        if (!$phaseId) {
            $this->sendResponse([
                'error' => 1,
                'message' => 'Error in request',
            ]);
            return;
        }

        $phase = $this->em->findEstimationPhase($phaseId);

        if (!$phase) {
            $this->sendResponse([
                'error' => 1,
                'message' => 'Error loading phase',
            ]);
            return;
        }

        $phase->setComplete(1);
        $this->em->persist($phase);
        $this->em->flush();

        if ($phase->getId()) {
            $this->sendResponse([
                'error' => 0,
                'message' => 'Phase updated',
            ]);
        } else {
            $this->sendResponse([
                'error' => 1,
                'message' => 'Error updating phase',
            ]);
        }
    }

    /**
     *  API function to uncomplete a phase
     */
    public function uncompleteEstimatingPhase()
    {
        $phaseId = $this->input->post('phaseId');

        if (!$phaseId) {
            $this->sendResponse([
                'error' => 1,
                'message' => 'Error in request',
            ]);
            return;
        }

        $phase = $this->em->findEstimationPhase($phaseId);

        if (!$phase) {
            $this->sendResponse([
                'error' => 1,
                'message' => 'Error loading phase',
            ]);
            return;
        }

        $phase->setComplete(0);
        $this->em->persist($phase);
        $this->em->flush();

        if ($phase->getId()) {
            $this->sendResponse([
                'error' => 0,
                'message' => 'Phase updated',
            ]);
        } else {
            $this->sendResponse([
                'error' => 1,
                'message' => 'Error updating phase',
            ]);
        }
    }

    /**
     *  API function to get proposal service phases
     */
    public function getProposalServicePhases($proposalServiceId, $proposalId)
    {

        // Load the proposal service
        $proposalService = $this->em->findProposalService($proposalServiceId);

        // Check the load
        if (!$proposalService) {
            $this->sendResponse([
                'error' => 1,
                'message' => 'Error loading service',
            ]);
            return;
        }

        $out = [];

        $phases = $this->getEstimationRepository()->getProposalServicePhases($proposalService, $proposalId);

        foreach ($phases as $phase) {
            $out[] = [
                'id' => $phase->getId(),
                'name' => $phase->getName(),
                'complete' => $phase->getComplete(),
            ];
        }

        $this->sendResponse([
            'error' => 0,
            'phases' => $out,
        ]);

    }

    /**
     *   API function to order phases
     */
    public function orderPhases()
    {
        $phaseIds = $this->input->post('ids');
        $i = 0;

        foreach ($phaseIds as $phaseId) {
            $phase = $this->em->findEstimationPhase($phaseId);

            if ($phase) {
                $phase->setOrd($i);
                $this->em->persist($phase);
            }
            $i++;
        }
        $this->em->flush();
    }

    public function estimateHistory($proposalId)
    {
        $sql = "SELECT estimate_log.added, estimate_log.user_name, estimate_log.ip_address, estimate_log.details
        FROM estimate_log
        WHERE estimate_log.proposal_id = " . $proposalId;

        // Searching
        $searchVal = $this->input->get('search')['value'];
        if ($searchVal) {
            $sql .= " AND (" .
                "(estimate_log.user_name LIKE '%" . $searchVal . "%')" .
                "OR (estimate_log.details LIKE '%" . $searchVal . "%')" .
                ")";
        }

        // Sorting
        $sort = $this->input->get('order')[0];
        $sortDir = $sort['dir'];

        switch ($this->input->get($sort['column'])) {
            case 0:
                $sortCol = 'estimate_log.added';
                break;
            case 2:
                $sortCol = 'estimate_log.user_name';
                break;
        }

        $sql .= " ORDER BY " . $sortCol . ' ' . $sortDir;
        $sql .= ' LIMIT ' . $this->input->get('length');
        $sql .= ' OFFSET ' . $this->input->get('start');

        $logData = $this->db->query($sql)->result();

        $tableData = [];

        foreach ($logData as $log) {

            $tableData[] = [
               // date('m/d/Y', $log->added) . '<br />' . date('g:i A', $log->added),
                date('m/d/Y g:i A', $log->added + TIMEZONE_OFFSET),
                $log->user_name,
                mapIP($log->ip_address),
                $log->details,
            ];
        }

        // We also need a count for total rows
        $countSql = "SELECT COUNT(*) as numRows
        FROM estimate_log
        WHERE estimate_log.proposal_id = " . $proposalId;

        $numRows = $this->db->query($countSql)->result();

        $data = [];
        $data['aaData'] = $tableData;
        $data['sEcho'] = $this->input->get('sEcho');
        $data["iTotalRecords"] = $numRows[0]->numRows;
        $data["iTotalDisplayRecords"] = $numRows[0]->numRows;
        echo json_encode($data);
    }

    /**
     * @param $proposalId
     * @description API function to retrieve the estimate notes for proposal
     */
    public function loadEstimateNotes($proposalId)
    {
        $response = [];
        $proposal = $this->em->findProposal($proposalId);

        if ($proposal) {
            $response['error'] = 0;
            $response['notes'] = $proposal->getEstimateNotes();
        } else {
            $response['error'] = 1;
            $response['message'] = 'Error loading proposal';
        }

        $this->sendResponse($response);
    }

    /**
     * @param $proposalId
     * @description API function to save the estimate notes for proposal
     */
    public function saveEstimateNotes($proposalId)
    {
        $response = [];
        $proposal = $this->em->findProposal($proposalId);

        try {
            // Update the notes
            $proposal->setEstimateNotes($this->input->post('estimateNotes'));
            $this->em->persist($proposal);
            $this->em->flush();

            // Log the change
            $this->getEstimationRepository()->addLog(
                $this->account(),
                $proposalId,
                'estimate_notes',
                'Updated estimate notes'
            );

            //start regular log
            $this->log_manager->add(\models\ActivityAction::PROPOSAL_ESTIMATE_NOTE_ADD,
                'Estimate: Updated estimate notes',
                $proposal->getClient(),
                $proposal,
                null,
                $this->account());
            //end regular log
            // Build the response
            $response['error'] = 0;
            $response['message'] = 'Estimate Notes Saved';

            // Send response
            $this->sendResponse($response);

        } catch (Exception $e) {

            // Build response
            $response['error'] = 1;
            $response['message'] = 'Error saving notes';

            // Send response
            $this->sendResponse();
        }

        $this->sendResponse($response);
    }

    /**
     * @param $lineItemId
     * @description API function to retrieve the notes of an estimate line item
     */
    public function loadEstimateLineItemNotes($lineItemId)
    {
        $response = [];
        $lineItem = $this->em->findEstimationLineItem($lineItemId);

        if ($lineItem) {
            $response['error'] = 0;
            $response['notes'] = $lineItem->getNotes();
        } else {
            $response['error'] = 1;
            $response['message'] = 'Error loading item notes';
        }

        $this->sendResponse($response);
    }

    /**
     * @param $lineItemId
     * @description API function to save the notes of an estimate line item
     */
    public function saveEstimateLineItemNotes($lineItemId)
    {
        $response = [];
        $lineItem = $this->em->findEstimationLineItem($lineItemId);

        try {
            // Save the notes against the item
            $lineItem->setNotes($this->input->post('estimateNotes'));
            $this->em->persist($lineItem);
            $this->em->flush();

            // Log the change
            $this->getEstimationRepository()->addLog(
                $this->account(),
                $lineItem->getProposalId(),
                'estimate_notes',
                'Item notes updated for item ' . $lineItem->getItem()->getName()
                . ' in service ' . $lineItem->getProposalService()->getServiceName()
            );

            $proposal = $this->em->findProposal($lineItem->getProposalService()->getProposal());
            //start regular log
            $this->log_manager->add(\models\ActivityAction::PROPOSAL_ESTIMATE_NOTE_ADD,
                'Estimate: Item notes updated for item ' . $lineItem->getItem()->getName()
                . ' in service ' . $lineItem->getProposalService()->getServiceName(),
                $proposal->getClient(),
                $proposal,
                null,
                $this->account());
            //end regular log
            // Build response
            $response['error'] = 0;
            $response['message'] = 'Estimate Notes Saved';

            // Send response
            $this->sendResponse($response);

        } catch (Exception $e) {

            // Build Response
            $response['error'] = 1;
            $response['message'] = 'Error saving notes';

            // Send response
            $this->sendResponse();
        }

        $this->sendResponse($response);
    }

    public function check_api()
    {
        echo $estimate_note_text = $this->input->post('estimate_note_text');
        echo $proposal_Id = $this->input->post('proposal_Id');
    }

    public function check_api2()
    {
        echo $estimate_note_text = $this->input->post('item_note_text');
        echo $est_item_id_for_notes = $this->input->post('est_item_id_for_notes');
    }

    public function check_api3()
    {
        $proposal_Id = $this->input->post('proposal_Id');
        $data["text"] = 'This the test data of proposal id-' . $proposal_Id;
        echo json_encode($data);

    }

    public function addEstimateItemNote()
    {
        $data = array(
            'success' => 0,
        );
        $note = new \models\Notes();
        $note->setNoteText($this->input->post('noteText'));
        $note->setType($this->input->post('noteType'));
        $note->setRelationId($this->input->post('eatimateItemId'));
        $note->setUser($this->account()->getAccountId());
        $note->setParentRelationId($this->input->post('estimateId'));
        $note->setWorkOrder(@$this->input->post('inline_work_order_note') ?: 0);
        $this->em->persist($note);
        $this->em->flush();
        $data['success'] = 1;

        switch ($this->input->post('noteType')) {

            case 'proposal':
                $this->getLogRepository()->add([
                    'action' => 'proposal_add_note',
                    'details' => "Note Added: " . $this->input->post('noteText'),
                    'proposal' => $this->input->post('estimateId'),
                    'account' => $this->account()->getAccountId(),
                    'company' => $this->account()->getCompanyId(),
                ]);
                break;
        }

        echo json_encode($data);
    }

    /**
     *
     */
    public function getEstimatingProposalServiceFields()
    {
        $company = $this->account()->getCompany();
        $ProposalServiceId = $this->input->post('ProposalServiceId');

        $proposalService = $this->em->findProposalService($ProposalServiceId);
        $response = [];

        $fields = $company->getServiceFields($proposalService->getInitialService());

        foreach ($fields as $field) {
            $cesf = $this->getEstimationRepository()->getEstimateServiceField($company, $field);
            // echo '<pre>';
            // print_r($cesf);die;
            $response[] = [
                'id' => $field->getFieldId(),
                'name' => $field->getFieldName(),
                'cesf' => [
                    'id' => $cesf->getId(),
                    'measurement' => $cesf->getMeasurement(),
                    'unit' => $cesf->getUnit(),
                    'depth' => $cesf->getDepth(),
                    'area' => $cesf->getArea(),
                    'length' => $cesf->getLength(),
                    'qty' => $cesf->getQty(),
                    'gravel_depth' => $cesf->getGravelDepth(),
                    'base_depth' => $cesf->getBaseDepth(),
                    'exc_depth' => $cesf->getExcavationDepth(),
                ],
            ];
        }
        $service = $this->em->getRepository('models\Services')->findOneBy(array(
            'serviceId' => $proposalService->getInitialService()
        ));
        echo json_encode([
            'error' => 0,
            'fields' => $response,
            'service_id' => $proposalService->getInitialService(),
            'category_id' => $service->getParent(),
        ]);
        // echo json_encode($response);
    }

    /**
     *
     */
    public function getEstimatingServiceFields()
    {
        $company = $this->account()->getCompany();
        $serviceId = $this->input->post('serviceId');

        $response = [];

        $fields = $company->getServiceFields($serviceId);

        foreach ($fields as $field) {
            $cesf = $this->getEstimationRepository()->getEstimateServiceField($company, $field);
            // echo '<pre>';
            // print_r($cesf);die;
            $response[] = [
                'id' => $field->getFieldId(),
                'name' => $field->getFieldName(),
                'cesf' => [
                    'id' => $cesf->getId(),
                    'measurement' => $cesf->getMeasurement(),
                    'unit' => $cesf->getUnit(),
                    'depth' => $cesf->getDepth(),
                    'area' => $cesf->getArea(),
                    'length' => $cesf->getLength(),
                    'qty' => $cesf->getQty(),
                    'gravel_depth' => $cesf->getGravelDepth(),
                    'base_depth' => $cesf->getBaseDepth(),
                    'exc_depth' => $cesf->getExcavationDepth(),
                ],
            ];
        }

        echo json_encode($response);
    }

    /**
     *
     */
    public function saveCompanyEstimatingServiceFields()
    {
        // Input var
        $serviceId = $this->input->post('serviceId');

        // We need the company for clearing old records and saving new
        $company = $this->account()->getCompany();

        // Clear defaults for this service
        $this->getEstimationRepository()->clearCompanyCesf($company, $serviceId);

        // We need to know all the fields so we can zero them, or defaults will override them
        $allFieldIds = [];
        $usedFieldIds = [];
        $fields = $company->getServiceFields($serviceId);

        // Get all the IDs so we can check them after
        foreach ($fields as $field) {
            $allFieldIds[] = $field->getFieldId();
        }

        try {

            // Measurement
            if ($this->input->post('measurement')) {
                $cesf = new \models\CompanyEstimateServiceField();
                $cesf->setServiceId($this->input->post('serviceId'));
                $cesf->setCompanyId($company->getCompanyId());
                $cesf->setFieldId($this->input->post('measurement'));
                $cesf->setMeasurement(1);
                $this->em->persist($cesf);

                $usedFieldIds[] = $this->input->post('measurement');
            }

            // Unit
            if ($this->input->post('unit')) {
                $cesf = new \models\CompanyEstimateServiceField();
                $cesf->setServiceId($this->input->post('serviceId'));
                $cesf->setCompanyId($company->getCompanyId());
                $cesf->setFieldId($this->input->post('unit'));
                $cesf->setUnit(1);
                $this->em->persist($cesf);

                $usedFieldIds[] = $this->input->post('unit');
            }

            // Depth
            if ($this->input->post('depth')) {
                $cesf = new \models\CompanyEstimateServiceField();
                $cesf->setServiceId($this->input->post('serviceId'));
                $cesf->setCompanyId($company->getCompanyId());
                $cesf->setFieldId($this->input->post('depth'));
                $cesf->setDepth(1);
                $this->em->persist($cesf);

                $usedFieldIds[] = $this->input->post('depth');
            }

            // Depth
            if ($this->input->post('excDepth')) {
                $cesf = new \models\CompanyEstimateServiceField();
                $cesf->setServiceId($this->input->post('serviceId'));
                $cesf->setCompanyId($company->getCompanyId());
                $cesf->setFieldId($this->input->post('excDepth'));
                $cesf->setExcavationDepth(1);
                $this->em->persist($cesf);

                $usedFieldIds[] = $this->input->post('excDepth');
            }

            // Base Depth
            if ($this->input->post('baseDepth')) {
                $cesf = new \models\CompanyEstimateServiceField();
                $cesf->setServiceId($this->input->post('serviceId'));
                $cesf->setCompanyId($company->getCompanyId());
                $cesf->setFieldId($this->input->post('baseDepth'));
                $cesf->setBaseDepth(1);
                $this->em->persist($cesf);

                $usedFieldIds[] = $this->input->post('baseDepth');
            }

            // GravelDepth
            if ($this->input->post('gravelDepth')) {
                $cesf = new \models\CompanyEstimateServiceField();
                $cesf->setServiceId($this->input->post('serviceId'));
                $cesf->setCompanyId($company->getCompanyId());
                $cesf->setFieldId($this->input->post('gravelDepth'));
                $cesf->setGravelDepth(1);
                $this->em->persist($cesf);

                $usedFieldIds[] = $this->input->post('gravelDepth');
            }

            // Area
            if ($this->input->post('area')) {
                $cesf = new \models\CompanyEstimateServiceField();
                $cesf->setServiceId($this->input->post('serviceId'));
                $cesf->setCompanyId($company->getCompanyId());
                $cesf->setFieldId($this->input->post('area'));
                $cesf->setArea(1);
                $this->em->persist($cesf);

                $usedFieldIds[] = $this->input->post('area');
            }

            // Qty
            if ($this->input->post('qty')) {
                $cesf = new \models\CompanyEstimateServiceField();
                $cesf->setServiceId($this->input->post('serviceId'));
                $cesf->setCompanyId($company->getCompanyId());
                $cesf->setFieldId($this->input->post('qty'));
                $cesf->setQty(1);
                $this->em->persist($cesf);

                $usedFieldIds[] = $this->input->post('qty');
            }

            $this->em->flush();

            // Use array_diff to find out the fields that were not used
            $unusedFields = array_diff($allFieldIds, $usedFieldIds);

            if (count($unusedFields)) {

                // Create a blank record for this field
                foreach ($unusedFields as $unusedFieldId) {
                    $cesf = new \models\CompanyEstimateServiceField();
                    $cesf->setCompanyId($company->getCompanyId());
                    $cesf->setServiceId($serviceId);
                    $cesf->setFieldId($unusedFieldId);
                    $this->em->persist($cesf);
                }
                $this->em->flush();
            }

            //start regular log
            $this->log_manager->add(\models\ActivityAction::PROPOSAL_ESTIMATE_ADD_SERVICE_FIELD,
                'Estimate service fields are saved',
                null,
                null,
                null,
                $this->account());

            // Send response
            echo json_encode([
                'error' => 0,
                'message' => 'Fields Saved',
            ]);

        } catch (\Exception $e) {
            echo json_encode([
                'error' => 1,
                'message' => 'Error Saving Fields',
                'exception' => $e->getMessage(),
            ]);
        }
    }


    /**
     *
     */
    public function saveCompanyEstimatingServiceFieldsFromEstimate()
    {
        // Input var
        $serviceId = $this->input->post('serviceId');
        $proposalServiceId = $this->input->post('proposalServiceId');

        // We need the company for clearing old records and saving new
        $company = $this->account()->getCompany();

        // Clear defaults for this service
        $this->getEstimationRepository()->clearCompanyCesf($company, $serviceId);

        // We need to know all the fields so we can zero them, or defaults will override them
        $allFieldIds = [];
        $usedFieldIds = [];
        $fields = $company->getServiceFields($serviceId);


        // Get all the IDs so we can check them after
        foreach ($fields as $field) {
            $allFieldIds[] = $field->getFieldId();
        }

        //try {

        // Measurement
        if ($this->input->post('measurement')) {
            $cesf = new \models\CompanyEstimateServiceField();
            $cesf->setServiceId($this->input->post('serviceId'));
            $cesf->setCompanyId($company->getCompanyId());
            $cesf->setFieldId($this->input->post('measurement'));
            $cesf->setMeasurement(1);
            $this->em->persist($cesf);

            $usedFieldIds[] = $this->input->post('measurement');
        }

        // Unit
        if ($this->input->post('unit')) {
            $cesf = new \models\CompanyEstimateServiceField();
            $cesf->setServiceId($this->input->post('serviceId'));
            $cesf->setCompanyId($company->getCompanyId());
            $cesf->setFieldId($this->input->post('unit'));
            $cesf->setUnit(1);
            $this->em->persist($cesf);

            $usedFieldIds[] = $this->input->post('unit');
        }

        // Depth
        if ($this->input->post('depth')) {
            $cesf = new \models\CompanyEstimateServiceField();
            $cesf->setServiceId($this->input->post('serviceId'));
            $cesf->setCompanyId($company->getCompanyId());
            $cesf->setFieldId($this->input->post('depth'));
            $cesf->setDepth(1);
            $this->em->persist($cesf);

            $usedFieldIds[] = $this->input->post('depth');
        }

        // Depth
        if ($this->input->post('excDepth')) {
            $cesf = new \models\CompanyEstimateServiceField();
            $cesf->setServiceId($this->input->post('serviceId'));
            $cesf->setCompanyId($company->getCompanyId());
            $cesf->setFieldId($this->input->post('excDepth'));
            $cesf->setExcavationDepth(1);
            $this->em->persist($cesf);

            $usedFieldIds[] = $this->input->post('excDepth');
        }

        // Base Depth
        if ($this->input->post('baseDepth')) {
            $cesf = new \models\CompanyEstimateServiceField();
            $cesf->setServiceId($this->input->post('serviceId'));
            $cesf->setCompanyId($company->getCompanyId());
            $cesf->setFieldId($this->input->post('baseDepth'));
            $cesf->setBaseDepth(1);
            $this->em->persist($cesf);

            $usedFieldIds[] = $this->input->post('baseDepth');
        }

        // GravelDepth
        if ($this->input->post('gravelDepth')) {
            $cesf = new \models\CompanyEstimateServiceField();
            $cesf->setServiceId($this->input->post('serviceId'));
            $cesf->setCompanyId($company->getCompanyId());
            $cesf->setFieldId($this->input->post('gravelDepth'));
            $cesf->setGravelDepth(1);
            $this->em->persist($cesf);

            $usedFieldIds[] = $this->input->post('gravelDepth');
        }

        // Area
        if ($this->input->post('area')) {
            $cesf = new \models\CompanyEstimateServiceField();
            $cesf->setServiceId($this->input->post('serviceId'));
            $cesf->setCompanyId($company->getCompanyId());
            $cesf->setFieldId($this->input->post('area'));
            $cesf->setArea(1);
            $this->em->persist($cesf);

            $usedFieldIds[] = $this->input->post('area');
        }

        // Qty
        if ($this->input->post('qty')) {
            $cesf = new \models\CompanyEstimateServiceField();
            $cesf->setServiceId($this->input->post('serviceId'));
            $cesf->setCompanyId($company->getCompanyId());
            $cesf->setFieldId($this->input->post('qty'));
            $cesf->setQty(1);
            $this->em->persist($cesf);

            $usedFieldIds[] = $this->input->post('qty');
        }

        $this->em->flush();

        // Use array_diff to find out the fields that were not used
        $unusedFields = array_diff($allFieldIds, $usedFieldIds);

        if (count($unusedFields)) {

            // Create a blank record for this field
            foreach ($unusedFields as $unusedFieldId) {
                $cesf = new \models\CompanyEstimateServiceField();
                $cesf->setCompanyId($company->getCompanyId());
                $cesf->setServiceId($serviceId);
                $cesf->setFieldId($unusedFieldId);
                $this->em->persist($cesf);
            }
            $this->em->flush();
        }
        $proposalService = $this->em->findProposalService($proposalServiceId);
        $fieldValues = $this->getProposalRepository()->getPopulatedServiceFields($company, $proposalService);

        $html_return = '';

        foreach ($fieldValues as $fieldValue) {

            $field_values = ($fieldValue['values']) ? $fieldValue['values']->getFieldValue() : '';
            $field_id = ($fieldValue['values']) ? $fieldValue['values']->getFieldId() : '';

            $html_return .= '<li class="service_specifications"  data-field-code="' . $fieldValue['field']->getFieldCode() . '" data-field-id="' . $fieldValue['field']->getFieldId() . '" data-data-type="' . $fieldValue['field']->getFieldType() . '" data-data-value="' . join(',', explode("\n", $fieldValue['field']->getFieldValue())) . '"  data-measurement-field="' . $fieldValue['cesf']->getMeasurement() . '" data-depth-field="' . $fieldValue['cesf']->getDepth() . '" data-area="' . $fieldValue['cesf']->getArea() . '" data-length="' . $fieldValue['field']->getLength() . '" data-qty="' . $fieldValue['cesf']->getQty() . '" data-unit-field="' . $fieldValue['cesf']->getUnit() . '"  data-gravel-depth-field="' . $fieldValue['cesf']->getGravelDepth() . '" data-excavation-depth-field="' . $fieldValue['cesf']->getExcavationDepth() . '" data-base-depth-field="' . $fieldValue['cesf']->getBaseDepth() . '"><strong>' . $fieldValue['field']->getFieldName() . ':</strong>
                     <span class="show_input_span" style="float: right;cursor:pointer"> ' . $field_values . '</span><div>
                     <a href="javascript:void(0);" style="display:none; float:left" class="btn cancel_field_save tiptip"  title="Cancel"  >
                         <i class="fa fa-fw fa-1x fa-close " ></i></a>
                         <input type="button" style="display:none;padding: 0.22em 0.3em; float:left" value="Save" class="field_btn btn mb-5px blue-button " id="btn_' . $field_id . '" >';

            if ($fieldValue['cesf']->getMeasurement() == 1) {
                $html_return .= '<i class="fa fa-info-circle fa-2x info_tip2 tiptip2"  title="Measurement field" ></i>';

            } else if ($fieldValue['cesf']->getGravelDepth() == 1) {
                $html_return .= '<i class="fa fa-info-circle fa-2x info_tip2 tiptip2 gravel_depth_field_tiptip"  title="Depth field"  ></i>';

            } else if ($fieldValue['cesf']->getBaseDepth() == 1) {
                $html_return .= '<i class="fa fa-info-circle fa-2x info_tip2 tiptip2 base_depth_field_tiptip"  title="Depth field"  ></i>';

            } else if ($fieldValue['cesf']->getExcavationDepth() == 1) {
                $html_return .= '<i class="fa fa-info-circle fa-2x info_tip2 tiptip2 excavation_depth_field_tiptip"  title="Depth field"  ></i>';

            } else if ($fieldValue['cesf']->getDepth() == 1) {
                $html_return .= '<i class="fa fa-info-circle fa-2x info_tip2 tiptip2 depth_field_tiptip"  title="Depth field"  ></i>';

            } else if ($fieldValue['cesf']->getUnit() == 1) {
                $html_return .= '<i class="fa fa-info-circle fa-2x info_tip2 tiptip2"  title="Unit field"  ></i>';
            } else if ($fieldValue['cesf']->getLength() == 1) {
                $html_return .= '<i class="fa fa-info-circle fa-2x info_tip2 tiptip2"  title="Length field"  ></i>';
            }

            if ($fieldValue['field']->getFieldType() == 'text') {
                $html_return .= '<input type="text" style="display:none; float:right;" value="' . $field_values . '" class="field_input text number_field input45" id="input_' . $field_id . '" >';


            } else {
                $select_values = explode("\n", $fieldValue['field']->getFieldValue());

                $html_return .= '<select style="display:none; float:right; border-radius: 3px;padding: 0.1em;width: 110px;" value="' . $field_values . '" class="field_input dont-uniform" id="input_' . $field_id . '">';
                foreach ($select_values as $select_value) {
                    $selected = '';
                    if ($fieldValue['values']) {
                        if ($fieldValue['values']->getFieldValue() == $select_value) {
                            $selected = 'selected';
                        }
                    }

                    $html_return .= "<option value='" . $select_value . "' " . $selected . " >" . $select_value . "</option>";
                }
                $html_return .= "</select>";
            }
            $html_return .= '</div></li>';


        }


        $this->getEstimationRepository()->addLog(
            $this->account(),
            $proposalService->getProposal(),
            'save_estimate_service_fields',
            'Estimate service fields are saved'
        );

        $proposal = $this->em->findProposal($proposalService->getProposal());
        //start regular log
        $this->log_manager->add(\models\ActivityAction::PROPOSAL_ESTIMATE_ADD_SERVICE_FIELD,
            'Estimate service fields are saved',
            $proposal->getClient(),
            $proposal,
            null,
            $this->account());


        // Send response
        echo json_encode([
            'error' => 0,
            'message' => 'Fields Saved',
            'service_field' => $html_return,
        ]);

        // } catch (\Exception $e) {
        //     echo json_encode([
        //         'error' => 1,
        //         'message' => 'Error Saving Fields',
        //         'exception' => $e->getMessage(),
        //     ]);
        // }
    }

    public function phaseEstimateItems($proposalServiceId, $phaseId)
    {
        $proposalService = $this->em->findProposalService($proposalServiceId);
        $phase = $this->em->findEstimationPhase($phaseId);
        $proposal = $this->em->findProposal($proposalService->getProposal());

        $templateGroup = ($proposal->getGroupTemplateItem() == 1) ? true : false;
        //$templateGroup =false;
        if ($templateGroup) {
            $sortedItems = $this->getEstimationRepository()->getProposalServiceSortedLineItemsPhaseNonTemplate($proposal->getClient()->getCompany(), $proposalServiceId, $phaseId);
            $templateItems = $this->getEstimationRepository()->getTemplatePhaseSortedLineItems($phaseId);
        } else {
            $sortedItems = $this->getEstimationRepository()->getProposalServiceSortedLineItemsPhase($proposal->getClient()->getCompany(), $proposalServiceId, $phaseId);
            $templateItems = [];
        }
        $data = [
            'proposalService' => $proposalService,
            'phase' => $phase,
            'subContractorItems' => $this->getEstimationRepository()->getSubContractorPhaseSortedLineItems($phaseId),
            'sortedItems' => $sortedItems,
            'templateItems' => $templateItems,
            'estimationRepository' => $this->getEstimationRepository(),
            'feesTypeItems' => $this->getEstimationRepository()->getFeesPhaseSortedLineItems($phaseId),
            'permitTypeItems' => $this->getEstimationRepository()->getPermitPhaseSortedLineItems($phaseId)
        ];

        // Render view
        $content = $this->load->view('proposals/estimate/summary-sheet', $data, true);

        echo $content;
    }

    /*
     * Sealcote stuff
     */

    public function sealcoatCalculators()
    {
        $response = array();

        //calculate amounts
        $area = str_replace(',', '', $_POST['area']);
        $sealer = $area * $_POST['applicationRate'];
        $response['sealer'] = $sealer;
        $water = $sealer * $_POST['water'] / 100;
        $response['water'] = $water;
        $additive = $sealer * $_POST['additive'] / 100;
        $response['additive'] = $additive;
        $sealerConcentrate = $sealer - $water - $additive;
        $sand = $sealer * $_POST['sand'];
        $response['sand'] = $sand;
        $sandInGall = $sand / 22.3;
        $response['sandInGall'] = $sandInGall;
        $totalGallons = $sealer + $water + $additive + $sandInGall;
        $response['totalGallons'] = $totalGallons;
        //calculate material costs
        $sealerPrice = str_replace(',', '', $_POST['sealerPrice']);
        $sealerCost = $sealerPrice * $sealer;
        $sealerCostPerUnit = ($area != 0) ? $sealerCost / $area : 0;
        $response['sealerCost'] = $sealerCost;
        $response['sealerCostPerUnit'] = $sealerCostPerUnit;
        $sandPrice = str_replace(',', '', $_POST['sandPrice']);
        $sandCost = $sandPrice * $sand / 100;
        $response['sandCost'] = $sandCost;
        $sandCostPerUnit = ($area != 0) ? $sandCost / $area : 0;
        $response['sandCostPerUnit'] = $sandCostPerUnit;
        $additivePrice = str_replace(',', '', $_POST['additivePrice']);
        $additiveCost = $additive * $additivePrice;
        $response['additiveCost'] = $additiveCost;
        $additiveCostPerUnit = ($area != 0) ? $additiveCost / $area : 0;
        $response['additiveCostPerUnit'] = $additiveCostPerUnit;
        $materialCost = $sealerCost + $sandCost + $additiveCost;
        $response['materialCost'] = $materialCost;
        $materialCostPerUnit = ($area != 0) ? $materialCost / $area : 0;
        $response['materialCostPerUnit'] = $materialCostPerUnit;
        //calculate labor
        $tripCount = $_POST['tripCount'];
        $tripHours = $_POST['tripHours'];
        $tripMen = $_POST['tripMen'];
        $tripHourlyCost = str_replace(',', '', $_POST['tripHourlyCost']);
        $laborCost = $tripCount * $tripHours * $tripMen * $tripHourlyCost;
        $response['laborCost'] = $laborCost;
        $laborCostPerUnit = ($area != 0) ? $laborCost / $area : 0;
        $response['laborCostPerUnit'] = $laborCostPerUnit;
        $proffit = str_replace(',', '', $_POST['proffit']);
        $overhead = str_replace(',', '', $_POST['overhead']);
        $overheadAndProffit = $tripCount * ($proffit + $overhead);
        $response['overheadAndProffit'] = $overheadAndProffit;
        $overheadAndProffitPerUnit = ($area != 0) ? $overheadAndProffit / $area : 0;
        $response['overheadAndProffitPerUnit'] = $overheadAndProffitPerUnit;
        $totalCost = $materialCost + $laborCost + $overheadAndProffit;
        $response['totalCost'] = $totalCost;
        $totalCostPerUnit = ($area != 0) ? $totalCost / $area : 0;
        $response['totalCostPerUnit'] = $totalCostPerUnit;
        $response['requestAuth'] = $_POST['requestAuth'];
        $response['success'] = true;

        echo json_encode($response);
    }

    public function get_base_proposal_service_total($proposal_service_id)
    {
        $response = array();
        $response['totalCost'] = $this->getEstimationRepository()->get_base_proposal_service_total($proposal_service_id);
        echo json_encode($response);
    }

    /**
     * Company level, function to save new default phases
     */
    public function saveEstimateDefaultPhase()
    {
        $serviceId = $this->input->post('serviceId');
        $phaseId = $this->input->post('phaseId');
        $phaseName = $this->input->post('phaseName');

        if ($phaseId) {
            $phase = $this->em->findEstimateStage($phaseId);
        } else {
            $phase = new \models\EstimateDefaultStage();
            $phase->setOrd(999);
        }

        $phase->setCompanyId($this->account()->getCompanyId());
        $phase->setServiceId($serviceId);
        $phase->setName($phaseName);

        $this->em->persist($phase);
        $this->em->flush();

        if ($phase->getId()) {
            echo json_encode([
                'error' => 0,
                'phase' => [
                    'id' => $phase->getId(),
                    'name' => $phase->getName(),
                ],
            ]);
        } else {
            echo json_encode([
                'error' => 1,
            ]);
        }
    }

    /**
     * Company Level - ordering phases
     * @param $serviceId
     */
    public function updateCompanyEstimationDefaultPhasesOrder($serviceId)
    {
        $company = $this->account()->getCompany();

        $this->getEstimationRepository()->clearCompanyPhaseOrder($company, $serviceId);

        $i = 0;
        $phaseIds = $this->input->post('phases');

        if (is_array($phaseIds)) {
            foreach ($phaseIds as $phaseId):
                $phaseOrder = new \models\EstimationCompanyPhaseOrder();
                $phaseOrder->setDefaultStageId($phaseId);
                $phaseOrder->setCompanyId($company->getCompanyId());
                $phaseOrder->setServiceId($serviceId);
                $phaseOrder->setOrd($i);
                $this->em->persist($phaseOrder);
                $i++;
            endforeach;

            $this->em->flush();
        }
    }

    /**
     * Company Level - Delete a default phase
     * @param $phaseId
     */
    public function deleteDefaultEstimationPhase($phaseId)
    {

        $phase = $this->em->findEstimateStage($phaseId);

        if ($phase) {

            try {


                if ($phase->getCompanyId() == $this->account()->getCompanyId()) {
                    $this->em->remove($phase);
                } else {
                    // Add a deleted record if a default
                    $ecpd = new \models\EstimateCompanyPhaseDeleted();
                    $ecpd->setCompanyId($this->account()->getCompanyId());
                    $ecpd->setDefaultStageId($phaseId);
                    $this->em->persist($ecpd);
                }

                $this->em->flush();

                echo json_encode([
                    'error' => 0,
                    'message' => 'Default Phase Deleted',
                ]);

            } catch (\Exception $e) {
                echo json_encode([
                    'error' => 1,
                    'message' => 'Error Deleting Phase',
                ]);
            }

        } else {
            echo json_encode([
                'error' => 1,
                'message' => 'Error Loading Phase',
            ]);
        }

    }

    public function estimateBreakdown($proposalId)
    {
        $proposal = $this->em->findProposal($proposalId);

        $price = $proposal->getPrice();
        $breakdownData = $this->getEstimationRepository()->getProposalPriceBreakdown($proposalId);
        $itemCount = $this->getEstimationRepository()->getProposalLineItemsCount($proposalId);

        // Time for some math
        $basePrice = $breakdownData['basePrice'];
        $profitPrice = $breakdownData['profitPrice'];
        $profitMargin = 0;
        if ($basePrice > 0) {
            $profitMargin = ($profitPrice / $basePrice) * 100;
        }
        $overheadPrice = $breakdownData['overheadPrice'];
        $overheadMargin = 0;
        if ($basePrice > 0) {
            $overheadMargin = ($overheadPrice / $basePrice) * 100;
        }
        $taxPrice = $breakdownData['taxPrice'];

        // Assemble the data
        $breakdown = [
            'totalPrice' => '$' . number_format($breakdownData['totalPrice'], 2),
            'basePrice' => '$' . number_format($basePrice, 2),
            'profitPrice' => '$' . number_format($profitPrice, 2),
            'profitMargin' => number_format($profitMargin, 2) . '%',
            'overheadPrice' => '$' . number_format($overheadPrice, 2),
            'overheadMargin' => number_format($overheadMargin, 2) . '%',
            'taxPrice' => '$' . number_format($taxPrice, 2),
            'item_count' => $itemCount,
        ];

        echo json_encode($breakdown);
    }

    /**
     * @param $proposalServiceId
     * Use this function to query what the new price would be with the given tax, OH and PM
     */
    public function updatePriceInfo($proposalServiceId)
    {

        $ohRate = $this->input->post('ohRate'); // Send this value, grab with $this->input->post('ohRate') or something similar
        $pmRate = $this->input->post('pmRate');
        //$taxRate = 7; // We may need to join this in the query to get the item tax rate
        $lineItems = $this->getEstimationRepository()->getAllProposalServiceLineItems($proposalServiceId);
        $proposalService = $this->em->findProposalService($proposalServiceId);
        $proposal = $this->em->findProposal($proposalService->getProposal());

        $basePrice = 0;
        $ohPrice = 0;
        $pmPrice = 0;
        $taxPrice = 0;

        foreach ($lineItems as $lineItem) {
            /* @var $lineItem \models\EstimationLineItem */
            if ($lineItem->getSubId() > 0) {
                $basePrice = $basePrice + $lineItem->getBasePrice();
                $ohPrice = $ohPrice + $lineItem->getOverheadPrice();
                $pmPrice = $pmPrice + $lineItem->getProfitPrice();
                $taxPrice = $taxPrice + $lineItem->getTaxPrice();

            } else {
                if ($proposal->getEstimateCalculationType() == 2) {
                    $ohRate = $lineItem->getOverheadRate();
                    $pmRate = $lineItem->getProfitRate();
                }

                // Item unit price before PM/OH
                $itemBaseUnitPrice = $lineItem->getBasePrice();

                // Get OH unit rate
                $itemUnitOhRate = $itemBaseUnitPrice * ($ohRate / 100);
                // Get PM unit rate
                $itemUnitPmRate = $itemBaseUnitPrice * ($pmRate / 100);

                // Add together and then round
                $totalUnitPrice = ($itemBaseUnitPrice + $itemUnitOhRate + $itemUnitPmRate);

                // Base Price is the new unit price * qty
                $itemBasePrice = ($itemBaseUnitPrice * $lineItem->getQuantity());

                // Increment the total
                $basePrice += $itemBasePrice;

                // Calculate the OH price
                $itemOhPrice = $itemBasePrice * $itemUnitOhRate;

                $itemOhPrice = $itemUnitOhRate * $lineItem->getQuantity();
                // Calculate the OH price
                $ohPrice = $ohPrice + $itemOhPrice;

                // Calculate the PM price
                $itemPmPrice = $itemBasePrice * $itemUnitPmRate;
                $itemPmPrice = $itemUnitPmRate * $lineItem->getQuantity();
                $pmPrice = $pmPrice + $itemPmPrice;

                $preTaxTotal = $itemBasePrice + $itemOhPrice + $itemPmPrice;

                // Calculate the tax
                $itemTaxPrice = $preTaxTotal * ($lineItem->getTaxRate() / 100);
                // Increment the tax total
                $taxPrice = $taxPrice + $itemTaxPrice;

            }

        }

        $totalAmount = $basePrice + $ohPrice + $pmPrice + $taxPrice;

        // Now we do the math
        $out = [
            'basePrice' => number_format($basePrice, 2),
            'ohAmount' => number_format($ohPrice, 2),
            'pmAmount' => number_format($pmPrice, 2),
            'taxAmount' => number_format($taxPrice, 2),
            'totalPrice' => number_format($totalAmount, 2),
        ];

        echo json_encode($out);
    }

    public function saveUpdatedPrice($proposalServiceId)
    {
        $ohRate = $this->input->post('ohRate'); // Send this value, grab with $this->input->post('ohRate') or something similar
        $pmRate = $this->input->post('pmRate');
        $newPrice = $this->input->post('NewPrice'); // As above
        $proposalId = $this->input->post('proposal_id');
        //$taxRate = 20; // As above
  
        try {
            $lineItems = $this->getEstimationRepository()->getAllProposalServiceLineItems($proposalServiceId);
            $proposalService = $this->em->findProposalService($proposalServiceId);
            
         
            $estimate = $this->getEstimationRepository()->getProposalServiceEstimate($proposalService);
            $oldohRate = $estimate->getOverheadRate();
            $oldpmRate = $estimate->getProfitRate();
            // Update the estimate object
            $estimate->setOverheadRate($ohRate);
            $estimate->setProfitRate($pmRate);
            $this->em->persist($estimate);

            // Log it
            if ($oldohRate != $ohRate) {
                $this->getEstimationRepository()->addLog(
                    $this->account(),
                    $proposalService->getProposal(),
                    'adjust_oh_rate',
                    'Adjusted OH rate from ' . number_format($oldohRate, 2) . '% to ' . number_format($ohRate, 2) . '%'
                );

                $proposal = $this->em->findProposal($proposalService->getProposal());
                //start regular log
                $this->log_manager->add(\models\ActivityAction::PROPOSAL_ESTIMATE_ADJUST_OH_RATE,
                    'Estimate: Adjusted OH rate from ' . number_format($oldohRate, 2) . '% to ' . number_format($ohRate, 2) . '%',
                    $proposal->getClient(),
                    $proposal,
                    null,
                    $this->account());
                //end regular log
            }

            if ($oldpmRate != $pmRate) {
                $this->getEstimationRepository()->addLog(
                    $this->account(),
                    $proposalService->getProposal(),
                    'adjust_pm_rate',
                    'Adjusted PM rate from ' . number_format($oldpmRate, 2) . '% to ' . number_format($pmRate, 2) . '%'
                );

                $proposal = $this->em->findProposal($proposalService->getProposal());
                //start regular log
                $this->log_manager->add(\models\ActivityAction::PROPOSAL_ESTIMATE_ADJUST_PM_RATE,
                    'Estimate: Adjusted PM rate from ' . number_format($oldpmRate, 2) . '% to ' . number_format($pmRate, 2) . '%',
                    $proposal->getClient(),
                    $proposal,
                    null,
                    $this->account());
                //end regular log
            }

            foreach ($lineItems as $lineItem) {
                /* @var $lineItem \models\EstimationLineItem */
                if ($lineItem->getSubId() > 0) {

                } else {

                    // Item unit price before PM/OH
                    $itemBaseUnitPrice = $lineItem->getBasePrice();
                    // Base Price is the new unit price * qty
                    $itemBasePrice = ($itemBaseUnitPrice * $lineItem->getQuantity());
                    // Get OH unit rate
                    $itemUnitOhRate = $itemBaseUnitPrice * ($ohRate / 100);
                    // Calculate the OH price
                    $itemOhPrice = $itemBasePrice * ($ohRate / 100);
                    // Get PM unit rate
                    $itemUnitPmRate = $itemBaseUnitPrice * ($pmRate / 100);
                    // Calculate the PM price
                    $itemPmPrice = $itemBasePrice * ($pmRate / 100);
                    // Add together and then round
                    $totalUnitPrice = ($itemBaseUnitPrice + $itemUnitOhRate + $itemUnitPmRate);
                    // Calculate pre tax price
                    $itemPreTaxPrice = ($totalUnitPrice * $lineItem->getQuantity());
                    // Calculate the tax
                    $itemTaxPrice = $itemPreTaxPrice * ($lineItem->getTaxRate() / 100);

                    // Total Price
                    $itemTotalPrice = $itemBasePrice + $itemOhPrice + $itemPmPrice + $itemTaxPrice;

                    // Update the line item
                    $lineItem->setOverheadRate(round($ohRate, 2));
                    $lineItem->setOverheadPrice(round($itemOhPrice, 2));
                    $lineItem->setProfitRate(round($pmRate, 2));
                    $lineItem->setProfitPrice(round($itemPmPrice, 2));
                    $lineItem->setUnitPrice(round($totalUnitPrice, 2));
                    $lineItem->setTaxPrice(round($itemTaxPrice, 2));
                    $lineItem->setTotalPrice(round($itemTotalPrice, 2));
                    $this->em->persist($lineItem);

                    $calculator = $this->getEstimationRepository()->getEstimateCalculatorValue($lineItem->getId());
                    if ($calculator) {

                        $newdata = json_decode(json_encode(json_decode($calculator[0]['saved_values'])), true);

                        $tempdata = array();
                        foreach ($newdata as $data) {
                            if ($data['name'] == 'cal_overhead') {
                                $data['value'] = round($ohRate, 2) . '%';
                            }
                            if ($data['name'] == 'cal_profit') {
                                $data['value'] = round($pmRate, 2) . '%';
                            }


                            $tempdata[] = $data;
                        }
                        $scv = $this->em->find('models\EstimationCalculatorValue', $calculator[0]['id']);

                        $valuesText = json_encode($tempdata);

                        $scv->setSavedValues($valuesText);
                        $this->em->persist($scv);
                        $this->em->flush();

                    }


                }
            }
                   //Update Proposal service table price start 
                    $proposal_service = $this->em->find('models\Proposal_services', $proposalServiceId);
                    if($proposal_service){
                        $proposal_service->setPrice($newPrice);
                        $proposal_service->setTaxPrice($this->getEstimationRepository()->getProposalServiceLineItemTaxTotal($proposalServiceId));
                        $this->em->persist($proposal_service);
                    }
                   //Update Proposal service table price  clsoe

                    //Update Proposal table price showing on dashboard start
                    $proposal = $this->em->find('models\proposals', $proposalId);            
                    if ($proposal) {
                        $getTotalValue = $this->getEstimationRepository()->getProposalPriceBreakdown($proposalId);
                        $proposal_total_price = $getTotalValue['totalPrice'];
                        $proposal_total_price = str_replace(['$', ','], '', $proposal_total_price);
                        $proposal->setPrice($proposal_total_price);
                        $this->em->persist($proposal);                
                    }
                    $this->em->flush();
                   //Update Proposal table price showing on dashbaord close 

            echo json_encode([
                'error' => 0,
            ]);

        } catch (\Exception $e) {
            echo json_encode([
                'error' => 1,
            ]);
        }
    }

    public function deletePhaseAllItems()
    {
        $proposalServiceId = $this->input->post('proposalServiceId');
        $phaseId = $this->input->post('phase_id'); // As above
        $items = $this->getEstimationRepository()->getAllPhaseItems($phaseId);

        $this->getEstimationRepository()->clearEstimateLineItemsByPhaseId($phaseId);
        $this->getEstimationRepository()->clearJobCostItemsByEstimateItems($items);
        $phase = $this->em->findEstimationPhase($phaseId);
        $phase->setComplete(0);
        $this->em->persist($phase);
        $this->em->flush();
        $numLineItems = $this->getEstimationRepository()->getProposalServiceUncompletedPhasesCount($proposalServiceId);
        // If no line items remaining, set estimate as incomplete
        // Update the Estimate Object
        $proposalService = $this->em->findProposalService($proposalServiceId);

        $estimate = $this->getEstimationRepository()->getProposalServiceEstimate($proposalService);
        //$estimate->setCompleted($apply);
        if ($numLineItems > 0) {
            $estimate->setCompleted(0);
            $completed = 0;
        } else {
            $estimate->setCompleted(1);
            $completed = 1;
        }
        $price = $this->getEstimationRepository()->getProposalServiceLineItemTotal($proposalServiceId);
        $newPrice = '$' . number_format($price, 2);
        $estimate->setTotalPrice($newPrice);
        $estimate->setCustomPrice(0);
        $this->em->persist($estimate);

        $proposalService->setPrice($newPrice);
        $proposalService->setTaxPrice($this->getEstimationRepository()->getProposalServiceLineItemTaxTotal($proposalServiceId));
        $this->em->persist($proposalService);

        $this->em->flush();
        updateProposalPrice($proposalService->getProposal());
        $this->sendResponse([
            'error' => 0,
            'message' => 'Phase deleted',
            'estimation' => $completed,
            'estimate' => $this->getEstimationRepository()->getEstimateData($estimate),
            'breakdown' => $this->getEstimationRepository()->getProposalServicePriceBreakdown($proposalServiceId),
            'items' => $items,
            'total_price' => $this->getEstimationRepository()->getProposalServiceLineItemTotal($proposalServiceId),
        ]);
    }

    public function clearsealcoatdefualtchild($parent_line_item_id)
    {
        $this->getEstimationRepository()
            ->clearsealcoatdefualtchild($parent_line_item_id);
        return true;
    }

    /**
     *  Update the order of company sub contractors
     */
    public function updateEstimationSubsOrder()
    {
        $i = 0;
        $subIds = $this->input->post('subs');

        if (is_array($subIds)) {

            foreach ($subIds as $subId) {

                $sub = $this->em->findEstimateSubContractor($subId);

                if ($sub) {
                    $sub->setOrd($i);
                    $this->em->persist($sub);
                    $i++;
                }
            }
            $this->em->flush();
        }
    }

    public function complete_estimation($proposalId)
    {
        $proposal = $this->em->findProposal($proposalId);

        $response = new JsonResponse();
        if (!$proposal) {
            $response->error = 1;
            $response->send();
            return;
        }
        $is_completed = true;
        $proposal->setEstimateStatusId(\models\EstimateStatus::COMPLETE);
        $this->em->persist($proposal);
        $this->em->flush();

        $this->getEstimationRepository()->updateProposalEstimate($proposal, $is_completed);
        // Log it
        $this->getEstimationRepository()->addLog(
            $this->account(),
            $proposalId,
            'update_status',
            'Estimate status set to Completed'
        );

        //Event Log
        $this->getProposalEventRepository()->completeEstimation($proposal, $this->account());

        //start regular log
        $this->log_manager->add(\models\ActivityAction::PROPOSAL_ESTIMATE_STATUS_CHANGE,
            'Estimate: status set to Completed',
            $proposal->getClient(),
            $proposal,
            null,
            $this->account());

        if ($this->account()->getAccountId() != $proposal->getOwner()->getAccountId()) {
            // Email the owner of th client if different from the proposal owner
            $emailData = [
                'clientOwnerFirstName' => $proposal->getClient()->getAccount()->getFirstName(),
                'proposalProjectTitle' => $proposal->getProjectName(),
                'userFullName' => $this->account()->getFullName(),
                'clientName' => $proposal->getClient()->getFullName(),
                'accountName' => $proposal->getClient()->getClientAccount() ? $proposal->getClient()->getClientAccount()->getName() : 'Unspecified Account',
            ];
            $this->load->model('system_email');

            $this->system_email->sendEmail(27, $proposal->getOwner()->getEmail(), $emailData);
        }

        //end regular log
        $this->session->set_flashdata('success', 'Estimate Completed');
        redirect('/proposals');

    }

    public function lock_estimation($proposalId)
    {
        $proposal = $this->em->findProposal($proposalId);

        $response = new JsonResponse();
        if (!$proposal) {
            $response->error = 1;
            $response->send();
            return;
        }

        $proposal->setEstimateStatusId(\models\EstimateStatus::LOCKED);
        $this->em->persist($proposal);
        $this->em->flush();

        $this->getEstimationRepository()->updateProposalEstimate($proposal, false);

        // Log it
        $this->getEstimationRepository()->addLog(
            $this->account(),
            $proposalId,
            'update_status',
            'Estimate status set to Locked'
        );
        //start regular log
        $this->log_manager->add(\models\ActivityAction::PROPOSAL_ESTIMATE_STATUS_CHANGE,
            'Estimate: status set to Locked',
            $proposal->getClient(),
            $proposal,
            null,
            $this->account());
        //end regular log
        $this->session->set_flashdata('success', 'Estimate Locked');
        redirect('/proposals');
    }

    public function unlock_estimation($proposalId)
    {
        $proposal = $this->em->findProposal($proposalId);

        $response = new JsonResponse();
        if (!$proposal) {
            $response->error = 1;
            $response->send();
            return;
        }

        $proposal->setEstimateStatusId(\models\EstimateStatus::IN_PROGRESS);
        $this->em->persist($proposal);
        $this->em->flush();

        $this->getEstimationRepository()->updateProposalEstimate($proposal, false);
        // Log it
        $this->getEstimationRepository()->addLog(
            $this->account(),
            $proposalId,
            'update_status',
            'Estimate status set to Unlocked'
        );

        //start regular log
        $this->log_manager->add(\models\ActivityAction::PROPOSAL_ESTIMATE_STATUS_CHANGE,
            'Estimate: status set to Unlocked',
            $proposal->getClient(),
            $proposal,
            null,
            $this->account());
        //end regular log
        $this->session->set_flashdata('success', 'Estimate Unlocked');
        redirect('/proposals/estimate/' . $proposalId);
    }


    public function reset_estimation($proposalId, $fromEstimates = 0)
    {
        $proposal = $this->em->findProposal($proposalId);

        $response = new JsonResponse();
        if (!$proposal) {
            $response->error = 1;
            $response->send();
            return;
        }

        $this->getEstimationRepository()->resetEstimation($proposal);

        $proposal->setEstimateStatusId(\models\EstimateStatus::NOT_STARTED);
        $proposal->setPrice(0);
        $this->em->persist($proposal);
        $this->em->flush();

        $this->getEstimationRepository()->updateProposalEstimate($proposal, false);

        // Log it
        $this->getEstimationRepository()->addLog(
            $this->account(),
            $proposalId,
            'update_status',
            'Estimate Reset'
        );

        //start regular log
        $this->log_manager->add(\models\ActivityAction::PROPOSAL_ESTIMATE_STATUS_CHANGE,
            'Estimate: Reset',
            $proposal->getClient(),
            $proposal,
            null,
            $this->account());
        //end regular log

        $this->log_manager->add(\models\ActivityAction::CHANGE_PROPOSAL_STATUS,
            'Proposal Estimate Reset',
            $proposal->getClient(),
            $proposal,
            null, null, null, null
        );

        $this->session->set_flashdata('success', 'Estimate Reset');
        if ($fromEstimates) {
            redirect('/proposals/estimates/');
        } else {
            redirect('/proposals/estimate/' . $proposalId);
        }

    }

    public function recalculate_estimate($formdata, $lineItem, $form)
    {
        $result = array();
        if ($form == 'asphalt_form') {
            $calculator = new Pms\Calculators\Material\Asphalt();

            foreach ($formdata as $data) {
                if ($data['name'] === 'measurement') {
                    $calculator->setMeasurement(str_replace(',', '', $data['value']));
                } else if ($data['name'] === 'measurement_unit') {
                    $calculator->setUnit($data['value']);
                } else if ($data['name'] === 'depth') {
                    $calculator->setDepth(str_replace(',', '', $data['value']));
                }
            }
            $calculator->setItemBasePrice($lineItem->getBasePrice());
            $calculator->setOhRate($lineItem->getOverheadRate());
            $calculator->setPmRate($lineItem->getProfitRate());
            $calculator->setTaxRate($lineItem->getTaxRate());
            $result = $calculator->run();

        } else if ($form == 'crack_sealer_form') {
            $calculator = new Pms\Calculators\Material\CrackSealing();

            foreach ($formdata as $data) {
                if ($data['name'] === 'crackseakLength') {
                    $calculator->setLength(str_replace(',', '', $data['value']));
                } else if ($data['name'] === 'cwidth') {
                    $calculator->setWidth($data['value']);
                } else if ($data['name'] === 'cdepth') {
                    $calculator->setDepth(str_replace(',', '', $data['value']));
                }
            }
            $calculator->setItemBasePrice($lineItem->getBasePrice());
            $calculator->setOhRate($lineItem->getOverheadRate());
            $calculator->setPmRate($lineItem->getProfitRate());
            $calculator->setTaxRate($lineItem->getTaxRate());
            $result = $calculator->run();
        } else if ($form == 'concrete_form') {

            $calculator = new Pms\Calculators\Material\ConcreteCalculator();

            foreach ($formdata as $data) {
                if ($data['name'] === 'concrete_measurement') {
                    $calculator->setMeasurement(str_replace(',', '', $data['value']));
                } else if ($data['name'] === 'concrete_depth') {
                    $calculator->setDepth(str_replace(',', '', $data['value']));
                }
            }

            $calculator->setItemBasePrice($lineItem->getBasePrice());
            $calculator->setOhRate($lineItem->getOverheadRate());
            $calculator->setPmRate($lineItem->getProfitRate());
            $calculator->setTaxRate($lineItem->getTaxRate());
            $result = $calculator->run();
        } else if ($form == 'striping_form') {

            $calculator = new Pms\Calculators\Material\LineStripingCalculator();

            foreach ($formdata as $data) {
                if ($data['name'] === 'stripingFeet') {
                    $calculator->setLength(str_replace(',', '', $data['value']));
                } else if ($data['name'] === 'stripingPailSize') {
                    $calculator->setPailSize(str_replace(',', '', $data['value']));
                } else if ($data['name'] === 'stripingPailColor') {
                    $calculator->setColor(str_replace(',', '', $data['value']));
                }
            }

            $calculator->setItemBasePrice($lineItem->getBasePrice());
            $calculator->setOhRate($lineItem->getOverheadRate());
            $calculator->setPmRate($lineItem->getProfitRate());
            $calculator->setTaxRate($lineItem->getTaxRate());
            $result = $calculator->run();
        } else if ($form == 'sealcoating_form') {

            $calculator = new Pms\Calculators\Material\SealCoatCalculator();

            foreach ($formdata as $data) {
                if ($data['name'] === 'sealcoatArea') {
                    $calculator->setArea(str_replace(',', '', $data['value']));
                } else if ($data['name'] === 'sealcoatApplicationRate') {
                    $calculator->setApplicationRate(str_replace(',', '', $data['value']));
                }
            }

            $calculator->setItemBasePrice($lineItem->getBasePrice());
            $calculator->setOhRate($lineItem->getOverheadRate());
            $calculator->setPmRate($lineItem->getProfitRate());
            $calculator->setTaxRate($lineItem->getTaxRate());
            $result = $calculator->run();

        }
        if ($result) {
            $eli = $this->em->findEstimationLineItem($lineItem->getId());
            $oldItem = clone $eli;
            // Unit Price
            $eli->setOverheadPrice($result->overheadPrice);
            $eli->setProfitPrice($result->profitPrice);
            $eli->setTaxPrice($result->taxPrice);
            // Custom Unit Price - 0 or 1

            // Quantity
            $eli->setQuantity($result->quantity);
            // Total Price
            $eli->setTotalPrice($result->totalPrice);
            // Save it
            $this->em->persist($eli);

            $logMessage = $eli->getItem()->getName() . " item updated for Service: " . $eli->getProposalService()->getServiceName();
            $logMessage .= '<br />';
            $logMessage .= $this->getEstimationRepository()->getLineItemsDifferencesString($oldItem, $eli);

            // Log it
            $this->getEstimationRepository()->addLog(
                $this->account(),
                $eli->getProposalService()->getProposal(),
                'save_item',
                $logMessage
            );

            $proposal = $this->em->findProposal($eli->getProposalService()->getProposal());
            //start regular log
            $this->log_manager->add(\models\ActivityAction::PROPOSAL_ESTIMATE_ADD_ITEM,
                'Estimate: ' . $logMessage,
                $proposal->getClient(),
                $proposal,
                null,
                $this->account());
            //end regular log
            // Flush to DB
            $this->em->flush();

            $this->getEstimationRepository()->UpdateChildItemAsPerentUpdated($lineItem->getId());

        }

    }

    public function recalculate_child_trucking_estimate($formdata, $truckinglineItem, $tons, $calculatorLineId)
    {

        $isDumpItem = false;
        $dump_rate = 0;
        $company = $this->account()->getCompany();
        $settings = $this->getEstimationRepository()->getCompanySettings($company);

        $calculator = new Pms\Calculators\Material\TruckingCalculator();
        $calculator->setTons($tons);
        $calculator->SetMaxProductionRate($settings->getProductionRate());
        foreach ($formdata as $data) {
            if ($data['name'] === 'truck_capacity') {
                $calculator->setCapacity(str_replace(',', '', $data['value']));
            } else if ($data['name'] === 'trip_time') {
                $calculator->setTripTime($data['value']);
            } else if ($data['name'] === 'plant_turnaround') {
                $calculator->setPlantTime(str_replace(',', '', $data['value']));
            } else if ($data['name'] === 'site_turnaround' || $data['name'] === 'site_turnaround2') {
                if ($data['value']) {
                    $calculator->setSiteTime($data['value']);
                }
            } else if ($data['name'] === 'trucking_day') {
                $calculator->setDays(str_replace(',', '', $data['value']));
            } else if ($data['name'] === 'hours_per_day') {
                $calculator->setHoursPerDay($data['value']);
            } else if ($data['name'] === 'truck_per_day') {
                $calculator->setTrucksPerDay($data['value']);
            } else if ($data['name'] === 'daily_production_rate') {
                $calculator->setOldProductionRate($data['value']);
                $testd = $data['value'];
            } else if ($data['name'] === 'dump_fee_apply') {
                $isDumpItem = true;
            } else if ($data['name'] === 'dump_rate') {
                $dump_rate = str_replace(['$', ','], ['', ''], $data['value']);
            }


        }

        $oldProductionRate = $calculator->getOldProductionRate();
        $calculator->setItemBasePrice($truckinglineItem->base_price);
        $calculator->setOhRate($truckinglineItem->overhead_rate);
        $calculator->setPmRate($truckinglineItem->profit_rate);
        $calculator->setTaxRate($truckinglineItem->tax_rate);
        //echo '<pre>';
        //print_r($calculator);die;
        $result = $calculator->run();
        //print_r($result);
        //die;

        $eli = $this->em->findEstimationLineItem($truckinglineItem->id);
        $oldItem = clone $eli;
        // Unit Price
        $eli->setOverheadPrice($result->overheadPrice);
        $eli->setProfitPrice($result->profitPrice);
        $eli->setTaxPrice($result->taxPrice);
        // Custom Unit Price - 0 or 1

        // Quantity
        $eli->setQuantity($result->quantity);
        // Total Price
        $eli->setTotalPrice($result->totalPrice);
        $eli->setHoursPerDay($result->hoursPerTruck);
        $eli->setNumPeople($result->trucksPerDay);
        $eli->setDay($result->newDays);
        // perent updated
        $eli->setParentUpdated('0');
        ////////////////////////////

        //$newdata = json_decode(json_encode(json_decode($calculator[0]['saved_values'])), true);

        if ($oldProductionRate != $result->newProductionRate) {


            $tempdata = array();

            foreach ($formdata as $data) {
                if ($data['name'] === 'daily_production_rate') {
                    $data['value'] = $result->newProductionRate;

                } else if ($data['name'] === 'truck_per_day') {
                    $data['value'] = $result->trucksPerDay;
                } else if ($data['name'] === 'trucking_day') {
                    $data['value'] = $result->newDays;
                }
                $tempdata[] = $data;
            }
            //print_r($tempdata);die;

            $scv = $this->em->find('models\EstimationCalculatorValue', $calculatorLineId);

            $valuesText = json_encode($tempdata);

            $scv->setSavedValues($valuesText);
            $this->em->persist($scv);
            $this->em->flush();


        }
        //print_r($result);die;

        //////////////////////////////
        // Save it
        $this->em->persist($eli);

        if ($isDumpItem) {

            $this->getEstimationRepository()->deleteDumpLineItem($eli->getId());
            $this->addtruckingDump($dump_rate, $tons, $eli);
        }
        $logMessage = $eli->getItem()->getName() . " item updated for Service: " . $eli->getProposalService()->getServiceName();
        $logMessage .= '<br />';
        $logMessage .= $this->getEstimationRepository()->getLineItemsDifferencesString($oldItem, $eli);

        // Log it
        $this->getEstimationRepository()->addLog(
            $this->account(),
            $eli->getProposalService()->getProposal(),
            'save_item',
            $logMessage
        );
        $proposal = $this->em->findProposal($eli->getProposalService()->getProposal());
        //start regular log
        $this->log_manager->add(\models\ActivityAction::PROPOSAL_ESTIMATE_ADD_ITEM,
            'Estimate: ' . $logMessage,
            $proposal->getClient(),
            $proposal,
            null,
            $this->account());
        //end regular log
        // Flush to DB
        $this->em->flush();

    }

    public function sealcote_default_child_save($formdata, $lineItem)
    {
        //$lineItem = $this->em->findEstimationLineItem($lineItem->getId());

        foreach ($formdata as $data) {
            if ($data['name'] === 'additive_sealer_item') {
                $additive_sealer_item_id = $data['value'];
            } else if ($data['name'] === 'sand_sealer_item') {
                $sand_sealer_item_id = $data['value'];
            } else if ($data['name'] === 'sealcoatArea') {
                $sealcoatArea = str_replace(',', '', $data['value']);
            } else if ($data['name'] === 'sealcoatApplicationRate') {
                $sealcoatApplicationRate = str_replace(',', '', $data['value']);
            } else if ($data['name'] === 'sealcoatAdditive') {
                $sealcoatAdditive = str_replace(',', '', $data['value']);
            } else if ($data['name'] === 'sealcoatSand') {
                $sealcoatSand = str_replace(',', '', $data['value']);
            }
        }
        $proposal = $this->em->findProposal($lineItem->getProposalId());
        $oh_pm_type = $proposal->getEstimateCalculationType();
        $sealer = $sealcoatArea * $sealcoatApplicationRate;
        $sealcoatSandTotalInput = $sealer * $sealcoatSand;
        $sealcoatAdditiveTotalInput = $sealer * $sealcoatAdditive / 100;
        $sand_sealer_item = $this->em->findEstimateItem($sand_sealer_item_id);

        $sand_sealer_item_base_price = $sand_sealer_item->getBasePrice();
        if ($oh_pm_type) {

            $tempoverheadPrice = (($sand_sealer_item_base_price * $lineItem->getOverheadRate()) / 100);
            $tempprofitPrice = (($sand_sealer_item_base_price * $lineItem->getProfitRate()) / 100);
            $sand_sealer_item_unit_price = $sand_sealer_item_base_price + $tempoverheadPrice + $tempprofitPrice;

        } else {
            $sand_sealer_item_unit_price = $sand_sealer_item->getUnitPrice();
        }

        //print_r($tempprofitPrice);
        // $tempoverheadPrice = $tempoverheadPrice * $sealcoatSandTotalInput;
        // $tempprofitPrice = $tempprofitPrice * $sealcoatSandTotalInput;

        $sealcoat_child_total = $sand_sealer_item_unit_price * $sealcoatSandTotalInput;

        //print_r($sealcoatSandTotalInput);
        //die();
        //$totalPrice1 = $sealcoat_child_total + $tempoverheadPrice + $tempprofitPrice;
        $totalPrice1 = $sealcoat_child_total;

        ///////////////////
        $eli = new EstimationLineItem();

        $expected_total = $sand_sealer_item_base_price * $sealcoatSandTotalInput;
        // Proposal ID
        $eli->setProposalId($lineItem->getProposalId());
        // ProposalService ID
        $eli->setProposalServiceId($lineItem->getProposalServiceId());
        // Item ID
        $eli->setItemId($sand_sealer_item_id);
        // Phase ID
        $eli->setPhaseId($lineItem->getPhaseId());
        // Phase ID
        $eli->setSubId(0);
        // Child material - 0 or 1
        $eli->setChildMaterial(1);
        // Unit Price
        $eli->setUnitPrice($sand_sealer_item_unit_price);
        // Custom Unit Price - 0 or 1
        $eli->setCustomUnitPrice(0);
        // Quantity
        $eli->setQuantity($sealcoatSandTotalInput);
        // Total Price
        $eli->setTotalPrice($totalPrice1);
        // Base price
        $eli->setBasePrice($sand_sealer_item_base_price);
        // setOverheadRate
        $eli->setOverheadRate($lineItem->getOverheadRate());
        // set Profit Rate
        $eli->setProfitRate($lineItem->getProfitRate());
        // set OverheadPrice
        $eli->setOverheadPrice($tempoverheadPrice);
        // set Profit Price
        $eli->setProfitPrice($tempprofitPrice);
        // Set Tax Rate
        $eli->setTaxRate(0);
        // Set Tax Price
        $eli->setTaxPrice(0);

        // setOverheadRate
        $eli->setTruckingOverheadRate(0);
        // set Profit Rate
        $eli->setTruckingProfitRate(0);
        // set OverheadPrice
        $eli->setTruckingOverheadPrice(0);
        // set Profit Price
        $eli->setTruckingProfitPrice(0);
        // Set Tax Rate
        $eli->setTruckingTotalPrice(0);
        // Set Name
        $eli->setCustomName('');
        // Set parent
        $eli->setParentLineItemId($lineItem->getId());
        // Set Notes
        $eli->setNotes('');
        ///////////
        // Set Expected total
        $eli->setExpectedTotal($expected_total);
        // Save it
        $this->em->persist($eli);

        // Flush to DB
        $this->em->flush();

        $additive_sealer_item = $this->em->findEstimateItem($additive_sealer_item_id);

        $additive_sealer_item_base_price = $additive_sealer_item->getBasePrice();
        if ($oh_pm_type) {

            $tempoverheadPrice = (($additive_sealer_item_base_price * $lineItem->getOverheadRate()) / 100);
            $tempprofitPrice = (($additive_sealer_item_base_price * $lineItem->getProfitRate()) / 100);
            $additive_sealer_item_unit_price = $additive_sealer_item_base_price + $tempoverheadPrice + $tempprofitPrice;

        } else {
            $additive_sealer_item_unit_price = $additive_sealer_item->getUnitPrice();
        }

        $tempoverheadPrice = $tempoverheadPrice * $sealcoatAdditiveTotalInput;
        $tempprofitPrice = $tempprofitPrice * $sealcoatAdditiveTotalInput;
        $sealcoat_child_total = $additive_sealer_item_unit_price * $sealcoatAdditiveTotalInput;

        //$totalPrice = $sealcoat_child_total + $tempoverheadPrice + $tempprofitPrice;
        $totalPrice = $sealcoat_child_total;
        ///////////////////
        $eli = new EstimationLineItem();

        $expected_total = $additive_sealer_item_base_price * $sealcoatAdditiveTotalInput;
        // Proposal ID
        $eli->setProposalId($lineItem->getProposalId());
        // ProposalService ID
        $eli->setProposalServiceId($lineItem->getProposalServiceId());
        // Item ID
        $eli->setItemId($additive_sealer_item_id);
        // Phase ID
        $eli->setPhaseId($lineItem->getPhaseId());
        // Phase ID
        $eli->setSubId(0);
        // Child material - 0 or 1
        $eli->setChildMaterial(1);
        // Unit Price
        $eli->setUnitPrice($additive_sealer_item_unit_price);
        // Custom Unit Price - 0 or 1
        $eli->setCustomUnitPrice(0);
        // Quantity
        $eli->setQuantity($sealcoatAdditiveTotalInput);
        // Total Price
        $eli->setTotalPrice($totalPrice);
        // Base price
        $eli->setBasePrice($additive_sealer_item_base_price);
        // setOverheadRate
        $eli->setOverheadRate($lineItem->getOverheadRate());
        // set Profit Rate
        $eli->setProfitRate($lineItem->getProfitRate());
        // set OverheadPrice
        $eli->setOverheadPrice($tempoverheadPrice);
        // set Profit Price
        $eli->setProfitPrice($tempprofitPrice);
        // Set Tax Rate
        $eli->setTaxRate(0);
        // Set Tax Price
        $eli->setTaxPrice(0);

        // setOverheadRate
        $eli->setTruckingOverheadRate(0);
        // set Profit Rate
        $eli->setTruckingProfitRate(0);
        // set OverheadPrice
        $eli->setTruckingOverheadPrice(0);
        // set Profit Price
        $eli->setTruckingProfitPrice(0);
        // Set Tax Rate
        $eli->setTruckingTotalPrice(0);
        // Set Name
        $eli->setCustomName('');
        // Set parent
        $eli->setParentLineItemId($lineItem->getId());
        // Set Notes
        $eli->setNotes('');
        ///////////
        // Set Expected total
        $eli->setExpectedTotal($expected_total);
        // Save it
        $this->em->persist($eli);

        // Flush to DB
        $this->em->flush();

    }

    public function check_logout_session()
    {
        if ($this->session->userdata('logged')) {
            echo '1';
        } else {
            echo '0';
        }
    }

    public function update_show_work_order()
    {
        $work_order = $this->input->post('work_order');
        $noteId = $this->input->post('note_id');

        $dql = "UPDATE models\Notes n
        SET n.work_order = :work_order
        WHERE n.noteId = :noteId";

        $query = $this->em->createQuery($dql);
        $query->setParameter(':work_order', $work_order);
        $query->setParameter(':noteId', $noteId);
        $query->execute();

        $note = $this->em->find('models\Notes', $noteId);
        $proposal = $this->em->findProposal($note->getRelationId());
        if ($note) {
            if ($proposal) {
                $proposal->setRebuildFlag(1);
                $this->em->persist($proposal);
                $this->em->flush();
            }
        }
        //add a histroy log for add notes start
        $NotesIE = ($work_order==1) ? "include": "exclude";
        $this->getLogRepository()->add([
            'action' => \models\ActivityAction::UPDATE_PROPOSAL_SETTING,
            'details' => "Notes $NotesIE from proposal",
            'proposal' => $proposal->getProposalId(),
            'account' => $this->account()->getAccountId(),
            'company' => $this->account()->getCompanyId(),
        ]);
        //add a histroy log for add notes end
        $this->sendResponse([
            'error' => 0,
            'message' => 'Note Updated',
        ]);
    }

    public function remove_item_from_template_estimate($line_item_id)
    {
        if ($line_item_id) {
            $eli = $this->em->findEstimationLineItem($line_item_id ?: null);
        } else {
            $this->sendResponse([
                'error' => 1,
                'message' => 'Item Not found',

            ]);
        }

        // ProposalService ID

        // Set template
        $eli->setTemplateId(null);

        // Save it
        $this->em->persist($eli);
        // Flush to DB
        $this->em->flush();
        $this->sendResponse([
            'error' => 0,
            'message' => 'Item Updated',

        ]);
    }

    public function test_price_change()
    {

        $item_id = 17;
        $this->getEstimationRepository()->findTemplates($item_id);
        die;
        $eli = new EstimationItemPriceChange();

        // Proposal ID
        $eli->setItemId(12);
        // ProposalService ID
        $eli->setOldBasePrice(25);
        // Item ID
        $eli->setOldOverheadRate(12);
        // Phase ID
        $eli->setOldProfitRate(12);
        // Phase ID
        $eli->setOldUnitPrice(12);
        // Child material - 0 or 1
        $eli->setOldTaxRate(12);
        // Unit Price
        $eli->setNewBasePrice(25);
        // Custom Unit Price - 0 or 1
        $eli->setNewOverheadRate(25);
        // Quantity
        $eli->setNewProfitRate(25);
        // Total Price
        $eli->setNewUnitPrice(25);
        // Base price
        $eli->setNewTaxRate(25);
        // setOverheadRate
        $eli->setCreatedAt(Carbon::now());
        // set Profit Rate
        $eli->setAccountId(25);
        // set OverheadPrice
        $eli->setUserName('dfgdfg');
        // set Profit Price
        $eli->setOldOverheadPrice(23);
        // Set Tax Rate
        $eli->setOldProfitPrice(23);
        // Set Tax Price
        $eli->setNewOverheadPrice(23);

        // setOverheadRate
        $eli->setNewProfitPrice(23);
        // set Profit Rate
        $eli->setOldTaxPrice(23);
        // set OverheadPrice
        $eli->setNewTaxPrice(23);

        // Save it
        $this->em->persist($eli);
        $this->em->flush();
    }

    public function getItemPriceHistory($item_id)
    {
        $sql = "SELECT eipc.created_at, eipc.user_name, eipc.ip, eipc.details
        FROM estimation_item_price_changes as eipc
        WHERE eipc.item_id = " . $item_id;

        // Searching
        $searchVal = $this->input->get('search')['value'];
        if ($searchVal) {
            $sql .= " AND (" .
                "(eipc.user_name LIKE '%" . $searchVal . "%')" .
                "OR (eipc.details LIKE '%" . $searchVal . "%')" .
                ")";
        }

        // Sorting
        $sort = $this->input->get('order')[0];
        $sortDir = $sort['dir'];

        switch ($this->input->get($sort['column'])) {
            case 0:
                $sortCol = 'eipc.created_at';
                break;
            case 2:
                $sortCol = 'eipc.user_name';
                break;
        }

        $sql .= " ORDER BY " . $sortCol . ' ' . $sortDir;
        $sql .= ' LIMIT ' . $this->input->get('length');
        $sql .= ' OFFSET ' . $this->input->get('start');

        $logData = $this->db->query($sql)->result();

        $tableData = [];

        foreach ($logData as $log) {

            $tableData[] = [
                Carbon::parse($log->created_at)->format('m/d/Y g:i A'),
                mapIP($log->ip),
                $log->user_name,
                $log->details,
            ];
        }

        // We also need a count for total rows
        $countSql = "SELECT COUNT(*) as numRows
        FROM estimation_item_price_changes
        WHERE estimation_item_price_changes.item_id = " . $item_id;

        $numRows = $this->db->query($countSql)->result();

        $data = [];
        $data['aaData'] = $tableData;
        $data['sEcho'] = $this->input->get('sEcho');
        $data["iTotalRecords"] = $numRows[0]->numRows;
        $data["iTotalDisplayRecords"] = $numRows[0]->numRows;
        echo json_encode($data);
    }

    /**
     * @return \models\EstimationTemplate
     */
    public function getTemplateName($templateId)
    {
        $template = $this->doctrine->em->findTemplate($templateId);

        return $template->getName();
    }

    /**
     * @return \models\EstimationItem
     */
    public function getEstimationItemTemplates($itemId)
    {
        $item = $this->doctrine->em->findEstimationItem($itemId);

        echo $item->getTemplates(3);
    }

    public function companyTemplateItemAssign()
    {
        $itemId = $this->input->post('itemId');
        $templateIds = $this->input->post('templateIds');

        $company = $this->account()->getCompany();

        try {

            // Clear Previous
            $this->getEstimationRepository()->clearCompanyTemplateItemAssignments($itemId);

            foreach ($templateIds as $templateId) {
                // Save New
                $eti = new \models\EstimateTemplateItem();
                $eti->setTemplateId($templateId);
                $eti->setItemId($itemId);
                $this->em->persist($eti);
                //$this->em->flush();
            }
            $this->em->flush();

            echo json_encode([
                'error' => 0,
            ]);

        } catch (\Exception $e) {
            echo json_encode([
                'error' => 1,
                'message' => 'There was a problem saving the assignment',
                'debug' => $e->getMessage(),
            ]);
        }
    }

    public function getCompanyBranchPlants()
    {
        $plantId = $this->input->post('plantId');
        $company = $this->account()->getCompany();
        try {
            if ($plantId) {
                $branchesIds = $this->getEstimationRepository()->getCompanyBranchPlants($company, $plantId);
            }

            echo json_encode([
                'error' => 0,
                'branches' => $branchesIds,
            ]);

        } catch (\Exception $e) {
            echo json_encode([
                'error' => 1,
                'message' => 'There was a problem loading your assignments',
                'debug' => $e->getMessage(),
            ]);
        }
    }

    public function getCompanyTemplateServices()
    {
        $templateId = $this->input->post('templateId');
        $company = $this->account()->getCompany();
        try {
            if ($templateId) {
                $serviceIds = $this->getEstimationRepository()->getCompanyTemplateServices($company, $templateId);
            }

            echo json_encode([
                'error' => 0,
                'services' => $serviceIds,
            ]);

        } catch (\Exception $e) {
            echo json_encode([
                'error' => 1,
                'message' => 'There was a problem loading your assignments',
                'debug' => $e->getMessage(),
            ]);
        }
    }

    public function getAdminCompanyTemplateServices()
    {
        $templateId = $this->input->post('templateId');

        try {
            if ($templateId) {
                $serviceIds = $this->getEstimationRepository()->getAdminCompanyTemplateServices($templateId);
            }

            echo json_encode([
                'error' => 0,
                'services' => $serviceIds,
            ]);

        } catch (\Exception $e) {
            echo json_encode([
                'error' => 1,
                'message' => 'There was a problem loading your assignments',
                'debug' => $e->getMessage(),
            ]);
        }
    }


    public function companyTemplateServiceAssign()
    {
        $templateId = $this->input->post('templateId');
        $serviceIds = $this->input->post('serviceIds');
//print_r($serviceIds);die();
        $company = $this->account()->getCompany();

        try {

            // Clear Previous
            $this->getEstimationRepository()->clearCompanyTemplateServiceAssignments($templateId);

            foreach ($serviceIds as $serviceId) {
                // Save New
                $eti = new \models\EstimationServiceTemplate();
                $eti->setServiceId($serviceId);
                $eti->setTemplateId($templateId);
                $eti->setCompanyId($company->getCompanyId());
                $this->em->persist($eti);
                //$this->em->flush();
            }
            $this->em->flush();

            echo json_encode([
                'error' => 0,
            ]);

        } catch (\Exception $e) {
            echo json_encode([
                'error' => 1,
                'message' => 'There was a problem saving the assignment',
                'debug' => $e->getMessage(),
            ]);
        }
    }


    public function companyPlantBranchAssign()
    {
        $plantId = $this->input->post('plantId');
        $branchIds = $this->input->post('branchIds');
//print_r($serviceIds);die();
        $company = $this->account()->getCompany();

        try {

            // Clear Previous
            $this->getEstimationRepository()->clearCompanyPlantBranchAssignments($plantId);
            if ($branchIds) {
                foreach ($branchIds as $branchId) {
                    // Save New
                    $eti = new \models\EstimationBranchPlant();
                    $eti->setBranchId($branchId);
                    $eti->setPlantId($plantId);
                    $eti->setCompanyId($company->getCompanyId());
                    $this->em->persist($eti);
                    //$this->em->flush();
                }
                $this->em->flush();
            }

            echo json_encode([
                'error' => 0,
            ]);

        } catch (\Exception $e) {
            echo json_encode([
                'error' => 1,
                'message' => 'There was a problem saving the assignment',
                'debug' => $e->getMessage(),
            ]);
        }
    }


    public function adminCompanyTemplateServiceAssign()
    {
        $templateId = $this->input->post('templateId');
        $serviceIds = $this->input->post('serviceIds');


        try {

            // Clear Previous
            $this->getEstimationRepository()->clearCompanyTemplateServiceAssignments($templateId);

            foreach ($serviceIds as $serviceId) {
                // Save New
                $eti = new \models\EstimationServiceTemplate();
                $eti->setServiceId($serviceId);
                $eti->setTemplateId($templateId);
                $eti->setCompanyId(0);
                $this->em->persist($eti);
                //$this->em->flush();
            }
            $this->em->flush();

            echo json_encode([
                'error' => 0,
            ]);

        } catch (\Exception $e) {
            echo json_encode([
                'error' => 1,
                'message' => 'There was a problem saving the assignment',
                'debug' => $e->getMessage(),
            ]);
        }
    }

    /** Group Items action to delete  */
    public function itemsGroupDelete()
    {

        // Get the list of IDs
        $ids = $this->input->post('ids');
        // Counter
        $numDeleted = 0;

        // Loop if we have them
        if (count($ids)) {
            foreach ($ids as $id) {

                $item = $this->em->find('models\EstimationItem', $id);
                // if($item->setTypeId()==11 || $item->setTypeId()==12){
                //     $total_count =1;
                //     if(count($ids) >= $total_count){

                //     }
                // }
                $item->setDeleted('1');
                $this->em->persist($item);
                $numDeleted++;

                $templateItem = $this->em->getRepository('models\EstimateTemplateItem')->findOneBy(array('item_id' => $id));
                if ($templateItem) {
                    $this->em->remove($templateItem);
                }

                $this->em->flush();

                // Log each delete
                $this->log_manager->add(\models\ActivityAction::GROUP_DELETE_PROPOSAL_ESTIMATE_LINE_ITEM,
                    "[Group Action] - Estimation Item '" . $item->getName() . "' deleted",
                    null,
                    null,
                    null,
                    $this->account()
                );

            }
            $this->em->flush();
        }
        // Respond
        $this->jsonresponse->success = 1;
        $this->jsonresponse->count = $numDeleted;
        $this->jsonresponse->send();
    }


    /** Group Users action to change User class  */
    public function userGroupUserClass()
    {

        // Get the list of IDs
        $ids = $this->input->post('ids');
        // Counter
        $numUsers = 0;

        // Loop if we have them
        if (count($ids)) {
            foreach ($ids as $id) {

                $account = $this->em->findAccount($id);
                $oldAccount = clone $account;
                $account->setUserClass($this->input->post('user_class'));
                $this->em->persist($account);
                $numUsers++;
                if ($oldAccount->getUserClass() != $account->getUserClass()) {
                    $permissions = array(
                        '0' => 'User',
                        '1' => 'Branch Manager',
                        '2' => 'Full Access',
                        '3' => 'Adminstrator',
                    );
                    // Log each delete
                    $this->log_manager->add(\models\ActivityAction::COMPANY_EDIT_USER,
                        "[Group Action] - User '" . $account->getFullName() . "' User Class changed from " . $permissions[$oldAccount->getUserClass()] . " to " . $permissions[$account->getUserClass()],
                        null,
                        null,
                        null,
                        $this->account()
                    );
                }

            }
            $this->em->flush();
        }
        // Respond
        $this->jsonresponse->success = 1;
        $this->jsonresponse->count = $numUsers;
        $this->jsonresponse->send();
    }

    /** Group Users action to change User class  */
    public function userGroupUserBranch()
    {

        // Get the list of IDs
        $ids = $this->input->post('ids');
        // Counter
        $numUsers = 0;

        // Loop if we have them
        if (count($ids)) {
            foreach ($ids as $id) {

                $account = $this->em->findAccount($id);
                $oldAccount = clone $account;
                $account->setBranch($this->input->post('user_branch'));
                $this->em->persist($account);
                $numUsers++;
                if ($oldAccount->getBranch() != $account->getBranch()) {
                    if ($account->getBranch() != 0) {
                        $newBranch = $this->em->find('models\Branches', $account->getBranch());
                        $newBranchName = $newBranch->getBranchName();
                    } else {
                        $newBranchName = 'Main';
                    }

                    if ($oldAccount->getBranch() != 0) {
                        $oldBranch = $this->em->find('models\Branches', $oldAccount->getBranch());
                        $oldBranchName = $oldBranch->getBranchName();
                    } else {
                        $oldBranchName = 'Main';
                    }


                    // Log each delete
                    $this->log_manager->add(\models\ActivityAction::COMPANY_EDIT_USER,
                        "[Group Action] - User '" . $account->getFullName() . "' Branch changed from " . $oldBranchName . " to " . $newBranchName,
                        null,
                        null,
                        null,
                        $this->account()
                    );
                }

            }
            $this->em->flush();
        }

        // Respond
        $this->jsonresponse->success = 1;
        $this->jsonresponse->count = $numUsers;
        $this->jsonresponse->send();
    }

    /** Group Users action to change WIO  */
    public function userGroupUserWio()
    {

        // Get the list of IDs
        $ids = $this->input->post('ids');
        // Counter
        $numUsers = 0;

        // Loop if we have them
        if (count($ids)) {
            foreach ($ids as $id) {

                $account = $this->em->findAccount($id);
                $oldAccount = clone $account;
                $account->setWio($this->input->post('user_wio'));
                $this->em->persist($account);
                $numUsers++;
                if ($oldAccount->getWio() != $account->getWio()) {
                    $status = $account->getWio() ? 'Enable' : 'Disable';
                    $oldStatus = $oldAccount->getWio() ? 'Enable' : 'Disable';
                    // Log each delete
                    $this->log_manager->add(\models\ActivityAction::COMPANY_EDIT_USER,
                        "[Group Action] - User '" . $account->getFullName() . "' Wheel it Off status changed from " . $oldStatus . " to " . $status,
                        null,
                        null,
                        null,
                        $this->account()
                    );
                }

            }
            $this->em->flush();
        }
        // Respond
        $this->jsonresponse->success = 1;
        $this->jsonresponse->count = $numUsers;
        $this->jsonresponse->send();
    }

    /** Group Users action to change disable  */
    public function userGroupUserDisable()
    {
        // Get the list of IDs
        $ids = $this->input->post('ids');
        // Counter
        $numUsers = 0;

        // Loop if we have them
        if (count($ids)) {
            foreach ($ids as $id) {

                $account = $this->em->findAccount($id);
                $oldAccount = clone $account;
                $account->setDisabled($this->input->post('user_disable'));
                $this->em->persist($account);
                $numUsers++;
                if ($oldAccount->getDisabled() != $account->getDisabled()) {
                    $status = $account->getDisabled() ? 'Enable' : 'Disable';
                    $oldStatus = $oldAccount->getDisabled() ? 'Enable' : 'Disable';

                    // Log each delete
                    $this->log_manager->add(\models\ActivityAction::COMPANY_EDIT_USER,
                        "[Group Action] - User '" . $account->getFullName() . "' Status changed from " . $oldStatus . " to " . $status,
                        null,
                        null,
                        null,
                        $this->account()
                    );
                }

            }
            $this->em->flush();
        }
        // Respond
        $this->jsonresponse->success = 1;
        $this->jsonresponse->count = $numUsers;
        $this->jsonresponse->send();
    }

    /** Group Users action to Estimate  */
    public function userGroupEstimate()
    {

        // Get the list of IDs
        $ids = $this->input->post('ids');
        // Counter
        $numUsers = 0;

        // Loop if we have them
        if (count($ids)) {
            foreach ($ids as $id) {

                $account = $this->em->findAccount($id);
                $oldAccount = clone $account;
                $account->setEstimating($this->input->post('estimating'));
                $this->em->persist($account);
                $numUsers++;
                if ($oldAccount->getEstimating() != $account->getEstimating()) {
                    $status = $account->getEstimating() ? 'Enable' : 'Disable';
                    $oldStatus = $oldAccount->getEstimating() ? 'Enable' : 'Disable';

                    // Log each delete
                    $this->log_manager->add('group_action_user_estimating',
                        "[Group Action] - User '" . $account->getFullName() . "' Estimate status changed from " . $oldStatus . " to " . $status,
                        null,
                        null,
                        null,
                        $this->account()
                    );
                }


            }
            $this->em->flush();
        }
        // Respond
        $this->jsonresponse->success = 1;
        $this->jsonresponse->count = $numUsers;
        $this->jsonresponse->send();
    }

    /** Group Users action to Sales  */
    public function userGroupSales()
    {

        // Get the list of IDs
        $ids = $this->input->post('ids');
        // Counter
        $numUsers = 0;

        // Loop if we have them
        if (count($ids)) {
            foreach ($ids as $id) {

                $account = $this->em->findAccount($id);
                $oldAccount = clone $account;
                $account->setSales($this->input->post('sales'));
                $this->em->persist($account);
                $numUsers++;
                if ($oldAccount->getSales() != $account->getSales()) {
                    $status = $account->getSales() ? 'Enable' : 'Disable';
                    $oldStatus = $oldAccount->getSales() ? 'Enable' : 'Disable';

                    // Log each delete
                    $this->log_manager->add(\models\ActivityAction::COMPANY_EDIT_USER,
                        "[Group Action] - User '" . $account->getFullName() . "' Sales status changed from " . $oldStatus . " to " . $status,
                        null,
                        null,
                        null,
                        $this->account()
                    );
                }


            }
            $this->em->flush();
        }
        // Respond
        $this->jsonresponse->success = 1;
        $this->jsonresponse->count = $numUsers;
        $this->jsonresponse->send();
    }

    /** Admin Group Items action to delete  */
    public function userGroupDelete()
    {
        $ids = $this->input->post('ids');
        // Counter
        $numUsers = 0;

        // Loop if we have them
        if (count($ids)) {
            foreach ($ids as $id) {

                $account = $this->em->findAccount($id);
                $newOwner = $this->em->findAccount($this->input->post('new_owner'));
                if (!$newOwner) {
                    $this->session->set_flashdata('error', 'Invalid user set for new owner!');
                    redirect('account/company_users');
                }


                // Reassign Contacts
                $this->db->query("UPDATE clients SET account = " . $newOwner->getAccountId() . " WHERE account = " . $account->getAccountId());
                // Reassign Leads
                $this->db->query("UPDATE leads SET account = " . $newOwner->getAccountId() . " WHERE account = " . $account->getAccountId());
                // Reassign Proposals
                $this->db->query("UPDATE proposals SET owner = " . $newOwner->getAccountId() . " WHERE owner = " . $account->getAccountId());
                // Reassign Accounts
                $this->db->query("UPDATE client_companies SET owner_user = " . $newOwner->getAccountId() . " WHERE owner_user = " . $account->getAccountId());
                // Reassign saved reports
                $this->db->query("UPDATE saved_reports SET account = " . $newOwner->getAccountId() . " WHERE account = " . $account->getAccountId());


                // Switch lead notifications if needed
                $notificationRepo = $this->getLeadNotificationsRepository();
                $notificationSettings = $notificationRepo->getLeadNotificationSettings($this->account()->getCompany()->getCompanyId());
                $notificationAccount = @$notificationSettings->account;

                if ($notificationAccount) {

                    // Check to see if this use is the assigned recipient
                    if ($account->getAccountId() == $notificationAccount) {
                        // Switch it over to the company admin if so
                        $notificationData = [
                            'enabled' => $notificationSettings->enabled,
                            'instant' => $notificationSettings->instant,
                            'account' => $this->account()->getCompany()->getAdministrator()->getAccountId(),
                            'company' => $notificationSettings->company,
                            'notificationIntervals' => $notificationSettings->notificationIntervals,
                        ];
                        $this->db->delete('lead_notification_settings',
                            array('company' => $this->account()->getCompany()->getCompanyId()));
                        $this->db->insert('lead_notification_settings', $notificationData);
                        $logMessage = 'Updated Lead Notification Settings Automatically Updated: Recipient changed to ' . $this->account()->getCompany()->getAdministrator()->getEmail();
                        $this->getLogRepository()->add([
                            'action' => 'updated_lead_notification_settings',
                            'details' => $logMessage,
                            'account' => $this->account()->getAccountId()
                        ]);
                    }
                }

                $this->em->flush();
                $this->em->clear();

                $this->log_manager->add(\models\ActivityAction::DELETE_ACCOUNT,
                    '[Group Action] - User #' . $account->getAccountId() . ' - ' . $account->getFirstName() . ' ' . $account->getLastName() . ' deleted!');
                $account = $this->em->merge($account);
                $this->em->remove($account);
                $this->em->flush();
                // Update the company subscription
                if (($this->account()->getCompany()->isActive()) && $this->account()->getCompanyId() != 8) {
                    $cr = $this->getCompanyRepository();
                    $cr->updateSubscriptions($this->account()->getCompany());
                }
            }
            $this->em->flush();
        }
    }

    /** Admin Group Items action to delete  */
    public function adminItemsGroupDelete()
    {

        // Get the list of IDs
        $ids = $this->input->post('ids');
        // Counter
        $numDeleted = 0;

        // Loop if we have them
        if (count($ids)) {
            foreach ($ids as $id) {

                $item = $this->em->find('models\EstimationItem', $id);

                $item->setDeleted('1');
                $this->em->persist($item);
                $numDeleted++;

                $templateItem = $this->em->getRepository('models\EstimateTemplateItem')->findOneBy(array('item_id' => $id));
                if ($templateItem) {
                    $this->em->remove($templateItem);
                }

                $this->em->flush();

                // Log each delete
                $this->log_manager->add(\models\ActivityAction::GROUP_DELETE_PROPOSAL_ESTIMATE_LINE_ITEM,
                    "[Group Action] - Estimation Item '" . $item->getName() . "' deleted",
                    null,
                    null,
                    null,
                    $this->account()
                );

            }
            $this->em->flush();
        }
        // Respond
        $this->jsonresponse->success = 1;
        $this->jsonresponse->count = $numDeleted;
        $this->jsonresponse->send();
    }

    /** Group Items action to delete  */
    public function childitemsGroupDelete()
    {

        // Get the list of IDs
        $ids = $this->input->post('ids');
        // Counter
        $numDeleted = 0;
        $perent_id = '';
        // Loop if we have them
        if (count($ids)) {
            foreach ($ids as $id) {

                $lineitem = $this->em->find('models\EstimationLineItem', $id);

                $parent_id = $lineitem->getParentLineItemId();
                $parentLineItem = $this->em->find('models\EstimationLineItem', $parent_id);
                $this->em->remove($lineitem);
                $numDeleted++;

                $proposal = $this->em->findProposal($lineitem->getProposalService()->getProposal());
                // Log each delete
                $this->log_manager->add(\models\ActivityAction::GROUP_DELETE_PROPOSAL_ESTIMATE_LINE_ITEM,
                    "Estimate: [Group Action] - Child Item '" . $lineitem->getItem()->getName() . "' deleted",
                    $proposal->getClient(),
                    $proposal,
                    null,
                    $this->account()
                );

                $logMessage = "[Group Action] - Child Item '" . $lineitem->getItem()->getName() . "' deleted from " . $parentLineItem->getItem()->getName();
                $logMessage .= '<br />';

                // Log it
                $this->getEstimationRepository()->addLog(
                    $this->account(),
                    $lineitem->getProposalService()->getProposal(),
                    'delete_item',
                    $logMessage
                );

            }
            $this->em->flush();
        }
        // Respond
        $this->jsonresponse->success = 1;
        $this->jsonresponse->count = $numDeleted;
        $this->jsonresponse->parent_id = $parent_id;
        $this->jsonresponse->send();
    }

    /** Group Items action to delete  */
    public function typesGroupDelete()
    {

        // Get the list of IDs
        $ids = $this->input->post('ids');
        // Counter
        $numDeleted = 0;

        // Loop if we have them
        if (count($ids)) {
            foreach ($ids as $id) {

                $type = $this->em->find('models\EstimationType', $id);
                $type->setDeleted('1');
                $this->em->persist($type);
                $numDeleted++;
                $this->getEstimationRepository()->clearCompanyServiceTypeAssignments($this->account()->getCompany(), $id);
                // Log each delete
                $this->log_manager->add(\models\ActivityAction::GROUP_DELETE_PROPOSAL_ESTIMATE_TYPE,
                    "[Group Action] - Estimation Type '" . $type->getName() . "' deleted",
                    null,
                    null,
                    null,
                    $this->account()
                );

            }
            $this->em->flush();
        }
        // Respond
        $this->jsonresponse->success = 1;
        $this->jsonresponse->count = $numDeleted;
        $this->jsonresponse->send();
    }

    /** Group Template action to delete  */
    public function templatesGroupDelete()
    {

        // Get the list of IDs
        $ids = $this->input->post('ids');
        // Counter
        $numDeleted = 0;

        // Loop if we have them
        if (count($ids)) {
            foreach ($ids as $id) {

                $template = $this->em->find('models\EstimationTemplate', $id);
                $template->setDeleted('1');
                $this->em->persist($template);

                $numDeleted++;

                // Log each delete
                $this->log_manager->add(\models\ActivityAction::COMPANY_PROPOSAL_ASSEMBLY_DELETE,
                    "[Group Action] - Estimation Template '" . $template->getName() . "' deleted",
                    null,
                    null,
                    null,
                    $this->account()
                );

            }
            $this->em->flush();
        }
        // Respond
        $this->jsonresponse->success = 1;
        $this->jsonresponse->count = $numDeleted;
        $this->jsonresponse->send();
    }

    /** Group Plants action to delete  */
    public function plantsGroupDelete()
    {

        // Get the list of IDs
        $ids = $this->input->post('ids');
        // Counter
        $numDeleted = 0;

        // Loop if we have them
        if (count($ids)) {
            foreach ($ids as $id) {

                $template = $this->em->find('models\EstimationPlant', $id);

                //models\EstimationItem::delete($item);
                $this->em->remove($template);
                $numDeleted++;

                // Log each delete
                $this->log_manager->add(\models\ActivityAction::COMPANY_PLANT_GROUP_DELETE,
                    "[Group Action] - Estimation Plant '" . $template->getName() . "' deleted",
                    null,
                    null,
                    null,
                    $this->account()
                );

            }
            $this->em->flush();
        }
        // Respond
        $this->jsonresponse->success = 1;
        $this->jsonresponse->count = $numDeleted;
        $this->jsonresponse->send();
    }

    /** Group Plants action to delete  */
    public function dumpsGroupDelete()
    {

        // Get the list of IDs
        $ids = $this->input->post('ids');

        // Counter
        $numDeleted = 0;

        // Loop if we have them
        if (count($ids)) {
            foreach ($ids as $dumpId) {

                $dump = $this->em->findEstimationPlant($dumpId);

                // Check it loaded
                if (!$dump) {
                    continue;
                }


                // Good to go
                $dump->setDeleted(1);
                $this->em->persist($dump);

                $numDeleted++;

                // Log each delete
                $this->log_manager->add(\models\ActivityAction::COMPANY_PLANT_GROUP_DELETE,
                    "[Group Action] - Estimation Dump  deleted",
                    null,
                    null,
                    null,
                    $this->account()
                );

            }
            $this->em->flush();
        }
        // Respond
        $this->jsonresponse->success = 1;
        $this->jsonresponse->count = $numDeleted;
        $this->jsonresponse->send();
    }

    /** Group Plants action to delete  */
    public function subsGroupDelete()
    {

        // Get the list of IDs
        $ids = $this->input->post('ids');
        // Counter
        $numDeleted = 0;

        // Loop if we have them
        if (count($ids)) {
            foreach ($ids as $id) {
                $sub = $this->em->find('models\EstimateSubContractor', $id);

                $this->em->remove($sub);

                $numDeleted++;

                // Log each delete
                $this->log_manager->add(\models\ActivityAction::COMPANY_PLANT_GROUP_DELETE,
                    "[Group Action] - Estimation Dump '" . $sub->getCompanyName() . "' deleted",
                    null,
                    null,
                    null,
                    $this->account()
                );

            }
            $this->em->flush();
        }
        // Respond
        $this->jsonresponse->success = 1;
        $this->jsonresponse->count = $numDeleted;
        $this->jsonresponse->send();
    }

    /** Phases Plants action to delete  */
    public function phasesGroupDelete()
    {

        // Get the list of IDs
        $ids = $this->input->post('ids');
        // Counter
        $numDeleted = 0;

        // Loop if we have them
        if (count($ids)) {
            foreach ($ids as $id) {
                $phase = $this->em->find('models\EstimateDefaultStage', $id);

                $this->em->remove($phase);

                $numDeleted++;

                // Log each delete
                $this->log_manager->add(\models\ActivityAction::COMPANY_PLANT_GROUP_DELETE,
                    "[Group Action] - Estimation Dump '" . $phase->getName() . "' deleted",
                    null,
                    null,
                    null,
                    $this->account()
                );

            }
            $this->em->flush();
        }
        // Respond
        $this->jsonresponse->success = 1;
        $this->jsonresponse->count = $numDeleted;
        $this->jsonresponse->send();
    }

    /**
     *  Update the order of company estimation Crew
     */
    public function updateEstimationCrewOrder()
    {
        $i = 0;
        $crewIds = $this->input->post('crew');

        if (is_array($crewIds)) {

            foreach ($crewIds as $crewId) {

                $crew = $this->em->findEstimationCrew($crewId);

                if ($crew) {
                    $crew->setOrd($i);
                    $this->em->persist($crew);
                    $i++;
                }
            }
            $this->em->flush();
        }
    }

    /** Group Crew action to delete  */
    public function crewGroupDelete()
    {

        // Get the list of IDs
        $ids = $this->input->post('ids');
        // Counter
        $numDeleted = 0;

        // Loop if we have them
        if (count($ids)) {
            foreach ($ids as $id) {

                $crew = $this->em->find('models\EstimationCrew', $id);
                $crew->setDeleted('1');
                $this->em->persist($crew);

                $numDeleted++;

                // Log each delete
                $this->log_manager->add(\models\ActivityAction::COMPANY_CREW_GROUP_DELETE,
                    "[Group Action] - Estimation Crew '" . $crew->getName() . "' deleted",
                    null,
                    null,
                    null,
                    $this->account()
                );

            }
            $this->em->flush();
        }
        // Respond
        $this->jsonresponse->success = 1;
        $this->jsonresponse->count = $numDeleted;
        $this->jsonresponse->send();
    }

    public function estimateCrewItems($crewId)
    {
        $company = $this->account()->getCompany();

        $allItems = $this->getEstimationRepository()->getEstimateCrewItemsData($crewId);
        $items = [];
        $i = 1;

        foreach ($allItems as $item) {
            $items[] = [
                0 => '<a class="handle"><i class="fa fa-fw fa-sort"></i></a>',
                1 => $item->categoryName,
                2 => $item->typeName,
                3 => $item->name,
                4 => $this->load->view('account/my_account/estimating/crew-item-table-actions', [
                    'item' => $item,
                    'itemId' => $item->id,
                    'inTemplate' => $item->etiId,
                ], true),
                'DT_RowId' => 'template_items_' . $item->etiId,
            ];
            $i++;
        }

        $json["iTotalRecords"] = $this->getEstimationRepository()->getEstimateCrewItemsCount($crewId);
        $json["iTotalDisplayRecords"] = $this->getEstimationRepository()->getEstimateCrewItemsCount($crewId);
        $json['aaData'] = $items;
        $json['sEcho'] = $this->input->get('sEcho');
        echo json_encode($json);
    }

    public function estimateCrewItemsLookup($crewId)
    {
        $company = $this->account()->getCompany();

        $allItems = $this->getEstimationRepository()->getEstimateLineItemsTableDataCrew($company, $crewId);
        $items = [];

        foreach ($allItems as $item) {
            $items[] = [
                0 => $item->etiId ? '<i class="fa fa-fw fa-check-circle"></i>' : '',
                1 => $item->categoryName,
                2 => $item->typeName,
                3 => $item->name,
                4 => $this->load->view('account/my_account/estimating/item-crew-table-actions', [
                    'itemId' => $item->id,
                    'inTemplate' => $item->etiId,
                ], true),
                'DT_RowClass' => ($item->etiId) ? 'inTemplate' : '',
            ];
        }

        $json["iTotalRecords"] = $this->getEstimationRepository()->getEstimateItemsCount($company);
        $json["iTotalDisplayRecords"] = $this->getEstimationRepository()->getEstimateLineItemsTableDataCrew($company, $crewId, true);
        $json['aaData'] = $items;
        $json['sEcho'] = $this->input->get('sEcho');
        echo json_encode($json);
    }

    public function save_template_items()
    {
        $proposalId = $this->input->post('proposalId');
        $proposalServiceId = $this->input->post('proposalServiceId');
        $PhaseId = $this->input->post('PhaseId');
        $template_id = $this->input->post('templateId');

        $template = $this->em->findTemplate($template_id);
        if (!$template) {
            return 'not template';
            die;
        }
        $proposalService = $this->em->findProposalService($proposalServiceId);
        $proposal = $this->em->findProposal($proposalId);
        $calculation_type = $proposal->getEstimateCalculationType();
        if ($calculation_type == 1) {
            $company = $this->account()->getCompany();

            //$settings = $this->getEstimationRepository()->getCompanySettings($company);
            $estimate = $this->getEstimationRepository()->getProposalServiceEstimate($proposalService);
            // $oldohRate = $estimate->getOverheadRate();
            // $oldpmRate = $estimate->getProfitRate();

            $DefaultProfit = $estimate->getProfitRate();
            $DefaultOverhead = $estimate->getOverheadRate();

        }

        $template_items = $this->getEstimationRepository()->getTemplateItems($template, $proposalId);
        $save_item_count = 0;
        foreach ($template_items as $lineItem) {
            $defaults = $lineItem->$template_id;
            $default_qty = $defaults['default_qty'];
            $default_days = $defaults['default_days'];
            $default_hpd = $defaults['default_hpd'];
            if ($default_qty && $default_qty > 0
                && $default_days && $default_days > 0
                && $default_hpd && $default_hpd > 0) {

                $calculator = new Pms\Calculators\Material\TimeCalculator();

                $calculator->setItemBasePrice($lineItem->getBasePrice());
                $calculator->setQuantity($default_qty);
                $calculator->setDays($default_days);
                $calculator->setHoursPerDay($default_hpd);
                $calculator->setUnitType($lineItem->single_name);
                if ($calculation_type == 1) {
                    $calculator->setOhRate($DefaultOverhead);
                    $calculator->setPmRate($DefaultProfit);

                } else {
                    $calculator->setOhRate($lineItem->getOverheadRate());
                    $calculator->setPmRate($lineItem->getProfitRate());

                }
                $calculator->setTaxRate($lineItem->getTaxRate());
                $result = $calculator->run();

                if ($result) {
                    $eli = new EstimationLineItem();

                    $expected_total = $lineItem->getBasePrice() * $result->quantity;
                    // Proposal ID
                    $eli->setProposalId($proposalId);
                    // ProposalService ID
                    $eli->setProposalServiceId($proposalServiceId);
                    // Item ID
                    $eli->setItemId($lineItem->getId());
                    // Phase ID
                    $eli->setPhaseId($PhaseId);
                    // Sub ID
                    $eli->setSubId(0);
                    // Unit Price
                    $eli->setUnitPrice($result->itemPrice);
                    // Custom Unit Price - 0 or 1
                    $eli->setCustomUnitPrice(0);
                    // Quantity
                    $eli->setQuantity($result->quantity);
                    // Total Price
                    $eli->setTotalPrice($result->totalPrice);
                    // Base price
                    $eli->setBasePrice($lineItem->getBasePrice());
                    // setOverheadRate
                    $eli->setOverheadRate($result->overheadUnitPrice);
                    // set Profit Rate
                    $eli->setProfitRate($result->profitUnitPrice);
                    // set OverheadPrice
                    $eli->setOverheadPrice($result->overheadPrice);
                    // set Profit Price
                    $eli->setProfitPrice($result->profitPrice);
                    // Set Tax Rate
                    $eli->setTaxRate($lineItem->getTaxRate());
                    // Set Tax Price
                    $eli->setTaxPrice($result->taxPrice);
                    // Set Plant ID
                    $eli->setPlantId(null);
                    // Set Template ID
                    $eli->setTemplateId($template_id);
                    // Set day
                    $eli->setDay($default_days);
                    // Set Num people
                    $eli->setNumPeople($default_qty);
                    // Set hours_per_day
                    $eli->setHoursPerDay($default_hpd);
                    // Set Expected total
                    $eli->setExpectedTotal($expected_total);
                    // Save it
                    $this->em->persist($eli);
                    $this->getEstimationRepository()->updatePhaseStatus($eli->getPhase());
                    $logMessage = $eli->getItem()->getName() . " item added for Service: " . $eli->getProposalService()->getServiceName();
                    $logMessage .= '<br />';

                    // Log it
                    $this->getEstimationRepository()->addLog(
                        $this->account(),
                        $eli->getProposalService()->getProposal(),
                        'save_item',
                        $logMessage
                    );

                    $proposal = $this->em->findProposal($eli->getProposalService()->getProposal());
                    //start regular log
                    $this->log_manager->add(\models\ActivityAction::PROPOSAL_ESTIMATE_ADD_ITEM,
                        'Estimate: ' . $logMessage,
                        $proposal->getClient(),
                        $proposal,
                        null,
                        $this->account());
                    //end regular log
                    $save_item_count++;
                }

            }

        }

        $numLineItems = $this->getEstimationRepository()->getProposalServiceUncompletedPhasesCount($proposalServiceId);

        // Update the Estimate Object
        $proposalService = $this->em->findProposalService($proposalServiceId);

        $estimate = $this->getEstimationRepository()->getProposalServiceEstimate($proposalService);
        //$estimate->setCompleted($apply);
        if ($numLineItems > 0) {
            $estimate->setCompleted(0);
        } else {
            $estimate->setCompleted(1);
        }
        $price = $this->getEstimationRepository()->getProposalServiceLineItemTotal($proposalServiceId);
        $newPrice = '$' . number_format($price, 2);

        $estimate->setTotalPrice($newPrice);
        $estimate->setCustomPrice(0);
        $this->em->persist($estimate);


        // Update the proposal service price
        $proposalService->setPrice($newPrice);
        $this->em->persist($proposalService);
        $this->em->flush();

        // Update the proposal price
        updateProposalPrice($proposal->getProposalId());

        //Update Phase category flag
        $phase = $this->em->findEstimationPhase($PhaseId);
        $this->getEstimationRepository()->updateEstimatePhase($phase);

        // Flush to DB
        $this->em->flush();
        $this->jsonresponse->success = 1;
        $this->jsonresponse->item_count = $save_item_count;
        $this->jsonresponse->estimate = $this->getEstimationRepository()->getEstimateData($estimate);
        $this->jsonresponse->breakdown = $this->getEstimationRepository()->getProposalServicePriceBreakdown($proposalServiceId);
        $this->jsonresponse->send();


    }


    function updateFixedTemplatesGroupItems()
    {
        $lineItemIds = $this->input->post('lineItemIds');
        $template_id = $this->input->post('template_id');
        $phase_id = $this->input->post('phase_id');
        $edit_template_value_number_of_person = $this->input->post('edit_template_value_number_of_person');
        $edit_template_value_time_type_input = $this->input->post('edit_template_value_time_type_input');
        $edit_template_value_hour_per_day = $this->input->post('edit_template_value_hour_per_day');
        // Load the ProposalService

        $check_edit_tamplate_days_value = $this->input->post('check_edit_tamplate_days_value');
        $check_edit_tamplate_quantity_value = $this->input->post('check_edit_tamplate_quantity_value');
        $check_edit_tamplate_hpd_value = $this->input->post('check_edit_tamplate_hpd_value');

        $template = $this->em->findTemplate($template_id);
        $priceRate = $template->getBasePrice();
        $proposalServiceId = $this->input->post('proposalServiceId');
        // Load the ProposalService
        $proposalService = $this->em->findProposalService($proposalServiceId);
        $proposal = $this->em->findProposal($proposalService->getProposal());
        $calculation_type = $proposal->getEstimateCalculationType();
        if ($calculation_type == 1) {
            $company = $this->account()->getCompany();

            $settings = $this->getEstimationRepository()->getCompanySettings($company);

            $DefaultProfit = $settings->getDefaultProfit();
            $DefaultOverhead = $settings->getDefaultOverhead();
        }
        $estimate = $this->getEstimationRepository()->getProposalServiceEstimate($proposalService);
        // Loops though Line Item Ids
        $total_default_qty = 0;
        $temp_total_quantity = 0;
        $default_days = 0;
        if (is_array($lineItemIds)) {

            foreach ($lineItemIds as $lineItemId) {

                $lineItem = $this->em->findEstimationLineItem($lineItemId);
                $oldLineItem = clone $lineItem;
                if ($lineItem) {
                    //  $default_qty = $lineItem->getNumPeople();
                    $total_default_qty = $total_default_qty + $edit_template_value_number_of_person;
                    $default_days = $lineItem->getDay();
                    $calculator = new Pms\Calculators\Material\TimeCalculator();

                    $calculator->setItemBasePrice($lineItem->getBasePrice());


                    if ($check_edit_tamplate_days_value) {
                        $calculator->setDays($edit_template_value_time_type_input);
                    } else {
                        $calculator->setDays($lineItem->getDay());
                    }
                    if ($check_edit_tamplate_quantity_value) {
                        $calculator->setQuantity($edit_template_value_number_of_person);
                    } else {
                        $calculator->setQuantity($lineItem->getNumPeople());
                    }
                    if ($check_edit_tamplate_hpd_value) {
                        $calculator->setHoursPerDay($edit_template_value_hour_per_day);
                    } else {
                        $calculator->setHoursPerDay($lineItem->getHoursPerDay());
                    }

                    $calculator->setUnitType($lineItem->getItem()->getUnitModel()->getSingleName());
                    // if($calculation_type==1){
                    //     $calculator->setOhRate($DefaultOverhead);
                    //     $calculator->setPmRate($DefaultProfit);

                    // }else{
                    $calculator->setOhRate($lineItem->getOverheadRate());
                    $calculator->setPmRate($lineItem->getProfitRate());

                    //}

                    $calculator->setTaxRate($lineItem->getTaxRate());
                    $result = $calculator->run();

                    if (count($result) > 0) {
                        //$eli = new EstimationLineItem();
                        $temp_total_quantity = $temp_total_quantity + $result->quantity;

                        $expected_total = $lineItem->getBasePrice() * $result->quantity;
                        // Quantity
                        $lineItem->setQuantity($result->quantity);
                        // Total Price
                        $lineItem->setTotalPrice($result->totalPrice);

                        // set OverheadPrice
                        $lineItem->setOverheadPrice($result->overheadPrice);
                        // set Profit Price
                        $lineItem->setProfitPrice($result->profitPrice);

                        // Set Tax Price
                        $lineItem->setTaxPrice($result->taxPrice);


                        if ($check_edit_tamplate_days_value) {
                            $lineItem->setDay($edit_template_value_time_type_input);
                        } else {
                            $lineItem->setDay($lineItem->getDay());
                        }
                        if ($check_edit_tamplate_quantity_value) {
                            $lineItem->setNumPeople($edit_template_value_number_of_person);
                        } else {
                            $lineItem->setNumPeople($lineItem->getNumPeople());
                        }
                        if ($check_edit_tamplate_hpd_value) {
                            $lineItem->setHoursPerDay($edit_template_value_hour_per_day);
                        } else {
                            $lineItem->setHoursPerDay($lineItem->getHoursPerDay());
                        }
                        // Set Expected total
                        $lineItem->setExpectedTotal($expected_total);
                        // Set day
                        //$lineItem->setDay($edit_template_value_time_type_input);
                        // Set Num people
                        //$lineItem->setNumPeople($edit_template_value_number_of_person);
                        // Set hours_per_day
                        //$lineItem->setHoursPerDay($edit_template_value_hour_per_day);
                        // Save it
                        $this->em->persist($lineItem);


                        $differenceString = $this->getEstimationRepository()->getLineItemsDifferencesString($oldLineItem, $lineItem);

                        if ($differenceString) {
                            $logMessage = $lineItem->getItem()->getType()->getName() . ': ' . $lineItem->getItem()->getName() . " item edit for Service: " . $lineItem->getProposalService()->getServiceName();
                            $logMessage .= '<br />';
                            $logMessage .= $differenceString;

                            // Log it
                            $this->getEstimationRepository()->addLog(
                                $this->account(),
                                $lineItem->getProposalService()->getProposal(),
                                'save_item',
                                $logMessage
                            );

                            $proposal = $this->em->findProposal($lineItem->getProposalService()->getProposal());
                            //start regular log
                            $this->log_manager->add(\models\ActivityAction::PROPOSAL_ESTIMATE_EDIT_ITEM,
                                'Estimate: ' . $logMessage,
                                $proposal->getClient(),
                                $proposal,
                                null,
                                $this->account());
                            //end regular log

                        }


                    }

                }

            }

        }


        $numLineItems = $this->getEstimationRepository()->getProposalServiceUncompletedPhasesCount($proposalServiceId);

        // Update the Estimate Object
        $proposalService = $this->em->findProposalService($proposalServiceId);

        $estimate = $this->getEstimationRepository()->getProposalServiceEstimate($proposalService);
        //$estimate->setCompleted($apply);
        if ($numLineItems > 0) {
            $estimate->setCompleted(0);
        } else {
            $estimate->setCompleted(1);
        }
        $price = $this->getEstimationRepository()->getProposalServiceLineItemTotal($proposalServiceId);
        $newPrice = '$' . number_format($price, 2);
        $estimate->setTotalPrice($newPrice);
        $estimate->setCustomPrice(0);
        $this->em->persist($estimate);

        // Update the proposal service price
        $proposalService->setPrice($newPrice);
        $this->em->persist($proposalService);
        $this->em->flush();

        // Flush to DB
        $this->em->flush();

        $this->sendResponse([
            'error' => 0,
            'message' => 'Line item(s) Updated',
            'total_price' => $this->getEstimationRepository()->getProposalServiceLineItemTotal($proposalServiceId),
            'estimate' => $this->getEstimationRepository()->getEstimateData($estimate),
            'breakdown' => $this->getEstimationRepository()->getProposalServicePriceBreakdown($proposalServiceId),
        ]);
    }

    public function saveFixedTemplatesGroupItems()
    {

        $proposalId = $this->input->post('proposal_Id');
        $proposalServiceId = $this->input->post('proposalServiceId');
        $PhaseId = $this->input->post('phase_id');
        $template_id = $this->input->post('template_id');
        $default_days = $this->input->post('fixed_template_value_time_type_input');
        $default_hpd = $this->input->post('fixed_template_value_hour_per_day');

        $template = $this->em->findTemplate($template_id);

        if (!$template) {
            return 'not template';
            die;
        }
        $old_parent_items = $this->getEstimationRepository()->getFixedParentTemplateItem($template_id, $PhaseId);
        $old_items = $this->getEstimationRepository()->deleteFixedTemplateItem($template_id, $PhaseId);
        $priceRate = $template->getBasePrice();
        $proposal = $this->em->findProposal($proposalId);

        $proposalService = $this->em->findProposalService($proposalServiceId);
        $calculation_type = $proposal->getEstimateCalculationType();
        if ($calculation_type == 1) {
            $company = $this->account()->getCompany();

            //$settings = $this->getEstimationRepository()->getCompanySettings($company);
            $estimate = $this->getEstimationRepository()->getProposalServiceEstimate($proposalService);
            $oldohRate = $estimate->getOverheadRate();
            $oldpmRate = $estimate->getProfitRate();
            $DefaultProfit = $estimate->getProfitRate();
            $DefaultOverhead = $estimate->getOverheadRate();
        }
        $template_items = $this->getEstimationRepository()->getTemplateItems($template, $proposalId);

        $save_item_count = 0;
        $total_default_qty = 0;
        $temp_total_quantity = 0;

        foreach ($template_items as $lineItem) {
            $defaults = $lineItem->$template_id;
            $default_qty = $defaults['default_qty'];
            $total_default_qty = $total_default_qty + $default_qty;
            // $default_days = $defaults['default_days'];
            // $default_hpd = $defaults['default_hpd'];
            if ($default_qty && $default_qty > 0
                && $default_days && $default_days > 0) {

                $calculator = new Pms\Calculators\Material\TimeCalculator();

                $calculator->setItemBasePrice($priceRate);
                $calculator->setQuantity($default_qty);
                $calculator->setDays($default_days);

                $unit_type = 'Hour';

                $calculator->setHoursPerDay($default_hpd);

                $calculator->setUnitType($unit_type);
                //  if($calculation_type==1){
                //      $calculator->setOhRate($DefaultOverhead);
                //      $calculator->setPmRate($DefaultProfit);

                //  }else{
                $calculator->setOhRate(0);
                $calculator->setPmRate(0);

                // }
                $calculator->setTaxRate(0);
                $result = $calculator->run();

                //get item unit price
                // $lineItem->getUnitPrice();
                //get item type

                //calculate total as per type

              ///  echo "<pre>";print_r((array)$result);die;

                if (count((array)$result) > 0) {

                    $temp_total_quantity = $temp_total_quantity + $result->quantity;
                    $eli = new EstimationLineItem();

                    $expected_total = '0.00';
                    // Proposal ID
                    $eli->setProposalId($proposalId);
                    // ProposalService ID
                    $eli->setProposalServiceId($proposalServiceId);
                    // Item ID
                    $eli->setItemId($lineItem->getId());
                    // Phase ID
                    $eli->setPhaseId($PhaseId);
                    // Sub ID
                    $eli->setSubId(0);
                    // Unit Price
                    $eli->setUnitPrice('0.00');
                    // Custom Unit Price - 0 or 1
                    $eli->setCustomUnitPrice(0);
                    // Quantity
                    $eli->setQuantity($result->quantity);
                    // Total Price
                    $eli->setTotalPrice('0.00');
                    // Base price
                    $eli->setBasePrice('0.00');
                    // setOverheadRate
                    $eli->setOverheadRate('0.00');
                    // set Profit Rate
                    $eli->setProfitRate('0.00');
                    // set OverheadPrice
                    $eli->setOverheadPrice('0.00');
                    // set Profit Price
                    $eli->setProfitPrice('0.00');
                    // Set Tax Rate
                    $eli->setTaxRate('0.00');
                    // Set Tax Price
                    $eli->setTaxPrice('0.00');
                    // Set Plant ID
                    $eli->setPlantId(null);
                    // Set Template ID
                    $eli->setTemplateId($template_id);
                    // Set day
                    $eli->setDay($default_days);
                    // Set Num people
                    $eli->setNumPeople($default_qty);
                    // Set hours_per_day
                    $eli->setHoursPerDay($default_hpd);
                    //fixed template
                    $eli->setFixedTemplate(2);
                    // Set Expected total
                    $eli->setExpectedTotal($expected_total);
                    // Save it
                    $this->em->persist($eli);
                    $this->getEstimationRepository()->updatePhaseStatus($eli->getPhase());
                    if ($old_items) {
                        $logMessage = $eli->getItem()->getName() . " item Edit for Service: " . $eli->getProposalService()->getServiceName();
                        $logMessage .= '<br />';

                    } else {
                        $logMessage = $eli->getItem()->getName() . " item added for Service: " . $eli->getProposalService()->getServiceName();
                        $logMessage .= '<br />';
                    }

                    // Log it
                    $this->getEstimationRepository()->addLog(
                        $this->account(),
                        $eli->getProposalService()->getProposal(),
                        'save_item',
                        $logMessage
                    );

                    $proposal = $this->em->findProposal($eli->getProposalService()->getProposal());
                    //start regular log
                    $this->log_manager->add(\models\ActivityAction::PROPOSAL_ESTIMATE_ADD_ITEM,
                        'Estimate: ' . $logMessage,
                        $proposal->getClient(),
                        $proposal,
                        null,
                        $this->account());
                    //end regular log
                    $save_item_count++;
                }

            }

        }


        if ($calculation_type != 1) {

            $DefaultOverhead = $template->getOverheadRate();
            $DefaultProfit = $template->getProfitRate();

        }
        if ($old_parent_items) {
            $defaultPriceRate = $old_parent_items->getUnitPrice();
        } else {
            $defaultPriceRate = $template->getPriceRate();
        }


        //$unitPrice = $priceRate+$overheadUnitRate+$profitUnitRate;
        $rate = (($DefaultOverhead + $DefaultProfit) / 100) + 1;
        $basePrice = $defaultPriceRate / $rate;
        $overheadUnitRate = (($basePrice * $DefaultOverhead) / 100);

        $profitUnitRate = (($basePrice * $DefaultProfit) / 100);

        //     if($unitPrice != $defaultPriceRate){

        //         $unitPrice = $defaultPriceRate;
        //         $profitUnitRate = $profitUnitRate + 0.01;
        //    }

        if ($template->getCalculationType() == 1) {
            $temp_parent_total = $defaultPriceRate * $default_days;
            $temp_overhead_total = $overheadUnitRate * $default_days;
            $temp_profit_total = $profitUnitRate * $default_days;
            $expected_total = $defaultPriceRate * $default_days;
            $temp_total_quantity = $default_days;
        } else {
            $temp_parent_total = $defaultPriceRate * $default_days * $default_hpd;
            $temp_overhead_total = $overheadUnitRate * $default_days * $default_hpd;
            $temp_profit_total = $profitUnitRate * $default_days * $default_hpd;
            $expected_total = $defaultPriceRate * $default_days * $default_hpd;
            $temp_total_quantity = $default_days * $default_hpd;
        }

        if ($temp_parent_total != $expected_total) {

            $diff = $expected_total - $temp_parent_total;
            $temp_parent_total = $expected_total;
            $temp_profit_total = $temp_profit_total + $diff;
        }


        ///main template item
        $eli = new EstimationLineItem();

        $expected_total = $basePrice * $temp_total_quantity;
        // Proposal ID
        $eli->setProposalId($proposalId);
        // ProposalService ID
        $eli->setProposalServiceId($proposalServiceId);
        // Item ID
        $eli->setItemId(0);
        // Phase ID
        $eli->setPhaseId($PhaseId);
        // Sub ID
        $eli->setSubId(0);
        // Unit Price
        $eli->setUnitPrice($defaultPriceRate);
        // Custom Unit Price - 0 or 1
        $eli->setCustomUnitPrice(0);
        // Quantity
        $eli->setQuantity($temp_total_quantity);
        // Total Price
        $eli->setTotalPrice($temp_parent_total);
        // Base price
        $eli->setBasePrice($basePrice);
        // setOverheadRate
        $eli->setOverheadRate($overheadUnitRate);
        // set Profit Rate
        $eli->setProfitRate($profitUnitRate);
        // set OverheadPrice
        $eli->setOverheadPrice($temp_overhead_total);
        // set Profit Price
        $eli->setProfitPrice($temp_profit_total);
        // Set Tax Rate
        $eli->setTaxRate('0.00');
        // Set Tax Price
        $eli->setTaxPrice('0.00');
        // Set Plant ID
        $eli->setPlantId(null);
        // Set Template ID
        $eli->setTemplateId($template_id);
        //set custom name
        $eli->setCustomName($template->getName());

        // Set day
        $eli->setDay($default_days);
        // Set Num people
        $eli->setNumPeople($total_default_qty);
        // Set hours_per_day
        $eli->setHoursPerDay($default_hpd);
        //fixed template
        $eli->setFixedTemplate(1);
        // Set Expected total
        $eli->setExpectedTotal($expected_total);
        // Save it
        $this->em->persist($eli);
        $this->getEstimationRepository()->updatePhaseStatus($eli->getPhase());

        $this->updateFixedTemplateTotalPrice($template_id, $PhaseId);
        //update log
        if ($old_items) {

            $logMessage = $template->getName() . " Template Edit for Service: " . $eli->getProposalService()->getServiceName();
            $logMessage .= '<br />';
        } else {
            $logMessage = $template->getName() . " Template Added for Service: " . $eli->getProposalService()->getServiceName();
            $logMessage .= '<br />';

        }
        // Log it
        $this->getEstimationRepository()->addLog(
            $this->account(),
            $eli->getProposalService()->getProposal(),
            'save_item',
            $logMessage
        );

        $proposal = $this->em->findProposal($eli->getProposalService()->getProposal());
        //start regular log
        $this->log_manager->add(\models\ActivityAction::PROPOSAL_ESTIMATE_ADD_ITEM,
            'Estimate: ' . $logMessage,
            $proposal->getClient(),
            $proposal,
            null,
            $this->account());

        $numLineItems = $this->getEstimationRepository()->getProposalServiceUncompletedPhasesCount($proposalServiceId);

        // Update the Estimate Object
        $proposalService = $this->em->findProposalService($proposalServiceId);

        $estimate = $this->getEstimationRepository()->getProposalServiceEstimate($proposalService);
        //$estimate->setCompleted($apply);
        if ($numLineItems > 0) {
            $estimate->setCompleted(0);
        } else {
            $estimate->setCompleted(1);
        }
        $price = $this->getEstimationRepository()->getProposalServiceLineItemTotal($proposalServiceId);
        $newPrice = '$' . number_format($price, 2);
        $estimate->setTotalPrice($newPrice);
        $estimate->setCustomPrice(0);
        $this->em->persist($estimate);

        // Update the proposal service price
        $proposalService->setPrice($newPrice);
        $this->em->persist($proposalService);
        $this->em->flush();

        // Update the proposal price
        updateProposalPrice($proposal->getProposalId());

        //Update Phase category flag
        $phase = $this->em->findEstimationPhase($PhaseId);
        $this->getEstimationRepository()->updateEstimatePhase($phase);
        // Flush to DB
        $this->em->flush();
        $this->jsonresponse->success = 1;
        $this->jsonresponse->item_count = $save_item_count;
        $this->jsonresponse->estimate = $this->getEstimationRepository()->getEstimateData($estimate);
        $this->jsonresponse->breakdown = $this->getEstimationRepository()->getProposalServicePriceBreakdown($proposalServiceId);
        $this->jsonresponse->send();


    }

    function getEstimateSummaryTable($proposalId)
    {

        $proposal = $this->em->findProposal($proposalId);
        $data = [
            'proposal' => $proposal,
            'subContractorItems' => $this->getEstimationRepository()->getSubContractorProposalSortedLineItems($proposalId),
            'sortedItems' => $this->getEstimationRepository()
                ->getProposalSortedLineItemsTotal($this->account()->getCompany(), $proposalId)
        ];

        // Render view
        $this->load->view('proposals/estimate/summary-table', $data);

    }

    public function check_child_parent_days_quantity()
    {

        $estimate_line_id = $this->input->post('estimate_line_id');
        $days = $this->input->post('days');
        $child_line_id = $this->input->post('child_line_id');

        if ($child_line_id) {

            $result = $this->getEstimationRepository()->checkChildParentLineItemsDays($child_line_id, $estimate_line_id, $days);
        } else {

            $result = $this->getEstimationRepository()->checkChildLineItemsDays($estimate_line_id, $days);
        }

        if (count($result) > 0) {
            // Respond
            $this->jsonresponse->success = 0;
            $this->jsonresponse->send();
        } else {
            // Respond
            $this->jsonresponse->success = 1;
            $this->jsonresponse->send();
        }

    }

    public function getPieChartData($proposalId)
    {
        $return_array = array();
        $i = 0;
        $proposal = $this->em->findProposal($proposalId);
        $subContractorItems = $this->getEstimationRepository()->getSubContractorProposalSortedLineItems($proposalId);
        $sortedItems = $this->getEstimationRepository()->getProposalSortedLineItemsTotal($this->account()->getCompany(), $proposalId);
        foreach ($sortedItems as $tsortedItem) {
            $return_array[$i]['name'] = $tsortedItem['category']->getName();
            $return_array[$i]['value'] = $tsortedItem['aggregateTotalRate'];
            $i++;
        }
        foreach ($subContractorItems as $tsortedItem) {
            $return_array[$i]['name'] = 'Sub Contractors';
            $return_array[$i]['value'] = $tsortedItem['aggregateTotalRate'];
            $i++;
        }

        //return $return_array;
        echo json_encode($return_array);
    }

    public function getJobCostReportPieChartData($proposalId)
    {
        $return_array = array();
        $i = 0;
        $proposal = $this->em->findProposal($proposalId);
        // $subContractorItems = $this->getEstimationRepository()->getSubContractorProposalSortedLineItems($proposalId);
        $sortedItems = $this->getEstimationRepository()->getProposalJobCostCategoryTotal($this->account()->getCompany(), $proposalId);
        foreach ($sortedItems as $tsortedItem) {
            $return_array[$i]['name'] = $tsortedItem['category_name'];
            $return_array[$i]['value'] = $tsortedItem['actual_total'];
            $i++;
        }
        // foreach ($subContractorItems as $tsortedItem){
        //     $return_array[$i]['name'] ='Sub Contractors';
        //     $return_array[$i]['value'] = $tsortedItem['aggregateTotalRate'] ;
        //     $i++;
        // }

        //return $return_array;
        echo json_encode($return_array);
    }

    public function itemSearch()
    {

        $item_list = $this->getEstimationRepository()->searchEstimationItemByName($this->input->post('term'), $this->account()->getCompany());
        echo json_encode($item_list);
    }

    public function enableGroupEstimating()
    {
        $ids = $this->input->post('ids');
        // Counter
        $numDeleted = 0;

        // Loop if we have them
        if (count($ids)) {
            foreach ($ids as $companyId) {
                $company = $this->em->findCompany($companyId);
                $company->setEstimating(1);
                $this->em->persist($company);
                $this->em->flush();


                $items = $this->getEstimationRepository()->getAllCompanyItems($company);

                if (!$items) {

                    $this->getEstimationRepository()->migrateDefaultEstimatingItems($company);
                }
                //$this->getEstimationRepository()->assignAllEstimateCompanyServiceTypes($company);

                // checking company address

                $addrString = $company->getCompanyAddress();

                if ($company->getCompanyCity()) {
                    $addrString .= ' ' . $company->getCompanyCity();
                }

                if ($company->getCompanyState()) {
                    $addrString .= ' ' . $company->getCompanyState();
                }

                if ($company->getCompanyState()) {
                    $addrString .= ' ' . $company->getCompanyZip();
                }


                $curl = new \Ivory\HttpAdapter\CurlHttpAdapter();
                $geocoder = new \Geocoder\Provider\GoogleMaps($curl, null, null, true, $_ENV['GOOGLE_API_SERVER_KEY']);


                try {
                    $geocoder->geocode($addrString);

                    $this->getEstimationRepository()->createDefualtPlantDump($company);
                    $this->getEstimationRepository()->createDefaultTemplates($company);
                } catch (Exception $e) {


                }


                $setting = $this->getEstimationRepository()->getCompanySettings($company);


                $this->log_manager->add(\models\ActivityAction::PROPOSAL_ESTIMATE_ACTIVATE, "Estimating activated for " . $company->getCompanyName());

            }

            $this->session->set_flashdata('success', "Estimating activated for " . count($ids) . " companies");
        }
        return true;
    }
 
    public function disableGroupEstimating()
    {
        $ids = $this->input->post('ids');
        // Loop if we have them
        if (count($ids)) {
            foreach ($ids as $companyId) {
                $company = $this->em->findCompany($companyId);
                $company->setSalesManager(0);
                $this->em->persist($company);
                $this->em->flush();
              //  $this->log_manager->add(\models\ActivityAction::PROPOSAL_ESTIMATE_INACTIVE, "Estimating deactivated for " . $company->getCompanyName());
            }
            $this->session->set_flashdata('success', "Estimating deactivated for " . count($ids) . " companies");
        }
        return true;
    }

       // enable Group Sales Manager
       public function enableGroupSalesManager()
       {
          $this->load->database();

           $ids = $this->input->post('ids');
           // Counter
           $numDeleted = 0;
   
           // Loop if we have them
           if (count($ids)) {
               foreach ($ids as $companyId) {
                   $company = $this->em->findCompany($companyId);
                   $company->setSalesManager(1);
                   $this->em->persist($company);
                   $this->em->flush(); 
                    $this->log_manager->add(\models\ActivityAction::PROPOSAL_ESTIMATE_ACTIVATE, "Sales Manager activated for" . $company->getCompanyName());
                
                }
   
               $this->session->set_flashdata('success', "Group Sales Manager activated for " . count($ids) . " companies");
           }
           return true;
       }

       // disable Group Sales Manager
       public function disableGroupSalesManager()
       {
           $this->load->database();
           $ids = $this->input->post('ids');
           // Loop if we have them
           if (count($ids)) {
               foreach ($ids as $companyId) {
                   $company = $this->em->findCompany($companyId);
                   $company->setSalesManager(0);
                   $this->em->persist($company);
                   $this->em->flush();
                   $this->log_manager->add(\models\ActivityAction::PROPOSAL_ESTIMATE_ACTIVATE, "Sales Manager deactivated for " . $company->getCompanyName());
                }
               $this->session->set_flashdata('success', "Sales Manager deactivated for " . count($ids) . " companies");
           }
           return true;
       }


       // enable Group Modify Price
       public function enableGroupModifyPrice()
       {
           $this->load->database();
           $ids = $this->input->post('ids');
           // Counter
           $numDeleted = 0;
              // Loop if we have them
           if (count($ids)) {
               foreach ($ids as $companyId) {
                   $company = $this->em->findCompany($companyId);
                   $company->setModifyPrice(1);
                   $this->em->persist($company);
                   $this->em->flush(); 
                    $this->log_manager->add(\models\ActivityAction::PROPOSAL_ESTIMATE_ACTIVATE, "Modify Price activated for " . $company->getCompanyName());
                }
   
               $this->session->set_flashdata('success', "Modify Price activated for " . count($ids) . " companies");
           }
           return true;
       }

        // disable  Group Modify Price
        public function disableGroupModifyPrice()
        {
            $this->load->database();
            $ids = $this->input->post('ids');
            // Counter
            $numDeleted = 0;
            // Loop if we have them
            if (count($ids)) {
                foreach ($ids as $companyId) {
                    $company = $this->em->findCompany($companyId);
                   $company->setModifyPrice(0);
                   $this->em->persist($company);
                   $this->em->flush(); 
                    $this->log_manager->add(\models\ActivityAction::PROPOSAL_ESTIMATE_ACTIVATE, "Modify Price deactivated for " . $company->getCompanyName());
                }
    
                $this->session->set_flashdata('success', "Modify Price deactivated for " . count($ids) . " companies");
            }
            return true;
        }

        // enable Group ProposalCampaigns
       public function enableGroupProposalCampaigns()
       {
           $this->load->database();
           $ids = $this->input->post('ids');
           // Counter
           $numDeleted = 0;
              // Loop if we have them
           if (count($ids)) {
               foreach ($ids as $companyId) {
                   $company = $this->em->findCompany($companyId);
                   $company->setProposalCampaigns(1);
                   $this->em->persist($company);
                   $this->em->flush(); 
                    $this->log_manager->add(\models\ActivityAction::PROPOSAL_ESTIMATE_ACTIVATE, "Proposal Campaigns activated for " . $company->getCompanyName());
               }
   
               $this->session->set_flashdata('success', "Proposal Campaigns activated for " . count($ids) . " companies");
           }
           return true;
       }
        // disable Group ProposalCampaigns
        public function disableGroupProposalCampaigns()
        {
            $this->load->database();
            $ids = $this->input->post('ids');
            // Counter
            $numDeleted = 0;
               // Loop if we have them
            if (count($ids)) {
                foreach ($ids as $companyId) {
                    $company = $this->em->findCompany($companyId);
                    $company->setProposalCampaigns(0);
                    $this->em->persist($company);
                    $this->em->flush(); 
                     $this->log_manager->add(\models\ActivityAction::PROPOSAL_ESTIMATE_ACTIVATE, "Proposal Campaigns deactivated for " . $company->getCompanyName());
                    }
    
                $this->session->set_flashdata('success', "Proposal Campaigns deactivated for " . count($ids) . " companies");
            }
            return true;
        }

       
   

    public function getAdminPieChartData()
    {
        $return_array = $this->getEstimationRepository()->getAdminPieChartData();

        echo json_encode($return_array);
    }

    public function setAdminEstimateFilter()
    {
        $this->resetAdminEstimateFilter();


        // Do some date stuff
        if ($this->input->post('pECreatedFrom')) {
            $pECreatedFrom = strtotime($this->input->post('pECreatedFrom'));
            $pECreatedFrom = date('Y-m-d H:i:s', $pECreatedFrom);
            $this->session->set_userdata('pECreatedFrom', $pECreatedFrom);
        } else {
            $this->session->set_userdata('pECreatedFrom', '');
        }

        if ($this->input->post('pECreatedTo')) {
            $pECreatedTo = strtotime('11:59:59 pm ' . $this->input->post('pECreatedTo'));
            $pECreatedTo = date('Y-m-d H:i:s', $pECreatedTo);
            $this->session->set_userdata('pECreatedTo', $pECreatedTo);
        } else {
            $this->session->set_userdata('pECreatedTo', '');
        }

    }

    public function resetAdminEstimateFilter()
    {
        $this->session->set_userdata(array(
            'pECreatedTo' => '',
            'pECreatedFrom' => '',

        ));
    }

    function estimate_stats()
    {
        $data = [];
        $er = $this->getEstimationRepository();
        $data['company_count'] = $er->getEstimatesCompanyCount();
        $data['estimates_started'] = $er->getEstimatesStartedCount();
        $estimates_completed = $er->getEstimatesCompletedCount();


        $estimated_total = $er->getEstimatedValueTotal();
        $data['estimated_total'] = "$" . number_format($estimated_total);
        if ($data['estimates_started'] > 0) {
            $data['estimates_completed'] = ($estimates_completed * 100) / $data['estimates_started'];
            $estimated_average = ceil($estimated_total / $data['estimates_started']);
        } else {
            $data['estimates_completed'] = 0;
            $estimated_average = 0;
        }


        $data['estimated_average'] = "$" . number_format($estimated_average);
        echo json_encode($data);
    }


    public function ajaxEstimates()
    {
        $json = array();
        $this->load->database();
        $this->load->model('branchesapi');
        $this->html->addScript('fancybox');
        $qbPermission = false;
        $action = $this->input->get('action');
        $group = $this->input->get('group') ?: false;
        $client = $this->input->get('client');

        //BUILD PROPOSALS ARRAY
        $proposals = array();
        // Get the relevant proposals
        $props = $this->account()->getEstimatesData($action, $client);
        $filteredProps = $this->account()->getEstimatesData($action, $client, false);

        foreach ($props as $proposal) {
            // Grab the proposal services for price breakdown
            $services = '';
            //$services = $this->db->query("SELECT * FROM proposal_services WHERE proposal=" . $proposal->proposalId)->result();

            // Populate the datatables array
            $proposals[] = array(
                '0' => $this->load->view('templates/proposals/table/check', array('proposal' => $proposal), true),
                '1' => $this->load->view('templates/estimates/actions', array(
                    'proposal' => $proposal,
                    'action' => $action,
                    'group' => $group,
                    'userAccount' => $this->account(),
                ), true),
                '2' => date('m/d/y', strtotime($proposal->created_at) + TIMEZONE_OFFSET),
                '3' => $this->load->view('templates/proposals/table/branch', array('proposal' => $proposal), true),
                '4' => $this->load->view('templates/estimates/status', array('proposal' => $proposal), true),
                '5' => $this->load->view('templates/estimates/status-dropdown', array('proposal' => $proposal),
                    true),
                '6' => ($proposal->jobNumber) ? $proposal->jobNumber : 'None',
                '7' => $proposal->clientAccountName,
                '8' => $this->load->view('templates/proposals/table/project-name', array('proposal' => $proposal),
                    true),
                '9' => $this->load->view('templates/proposals/table/formatted-price',
                    array('proposal' => $proposal, 'services' => $services), true),
                '10' => $this->load->view('templates/proposals/table/real-price', array('proposal' => $proposal), true),
                '11' => $this->load->view('templates/proposals/table/contact', array('proposal' => $proposal), true),
                '12' => $this->load->view('templates/proposals/table/owner', array('proposal' => $proposal), true),
                '13' => $proposal->last_activity,
                '14' => $this->load->view('templates/estimates/last-activity', array('proposal' => $proposal),
                    true),
                '15' => $proposal->material,
                '16' => ($proposal->material == 1) ? '<i class="fa fa-check-circle"></i>' : '',
                '17' => $proposal->equipment,
                '18' => ($proposal->equipment == 1) ? '<i class="fa fa-check-circle"></i>' : '',
                '19' => $proposal->labor ?: 0,
                '20' => ($proposal->labor == 1) ? '<i class="fa fa-check-circle"></i>' : '',
                '21' => $proposal->lastOpenTime ?: 0,
                '22' => $proposal->completion_percent . '%',
                '23' => $proposal->audit_view_time ?: 0,
                '24' => '',
            );
        }
        $total = $this->account()->getEstimatesDataTotal();
        $filterTotal = count($filteredProps);
        $json["iTotalRecords"] = $total;
        $json["iTotalDisplayRecords"] = $filterTotal;
        $json['aaData'] = $proposals;
        $json['sEcho'] = $this->input->get('sEcho');
        echo json_encode($json);
    }

    public function changeEstimateStatus($proposalId, $status = null)
    {
        $value = $this->input->post('value');
        $value = str_replace("_", "", $value);

        $proposal = $this->em->findProposal($proposalId);

        $response = new JsonResponse();
        if (!$proposal) {
            $response->error = 1;
            $response->send();
            return;
        }
        if ($value == \models\EstimateStatus::COMPLETE) {
            $is_completed = true;
        } else {
            $is_completed = false;
        }

        $proposal->setEstimateStatusId($value);
        $this->em->persist($proposal);
        $this->em->flush();

        $this->getEstimationRepository()->updateProposalEstimate($proposal, $is_completed);

        $estimateStatus = $this->em->find('\models\EstimateStatus', $value);
        // Log it
        $this->getEstimationRepository()->addLog(
            $this->account(),
            $proposalId,
            'update_status',
            'Estimate status set to ' . $estimateStatus->getName()
        );

        //start regular log
        $this->log_manager->add(\models\ActivityAction::PROPOSAL_ESTIMATE_STATUS_CHANGE,
            'Estimate: status set to ' . $estimateStatus->getName(),
            $proposal->getClient(),
            $proposal,
            null,
            $this->account());

        echo ($estimateStatus) ? $estimateStatus->getName() : '';


    }


    public function setProposalEstimatesFilter()
    {
        $this->resetProposalEstimatesFilter();
        $this->session->set_userdata($_POST);
        $this->session->set_userdata('pesFilter', 1);

        // Do some date stuff
        if ($this->input->post('pesCreatedFrom')) {
            $pesCreatedFrom = strtotime($this->input->post('pesCreatedFrom'));
            $pesCreatedFrom = date('Y-m-d H:i:s', $pesCreatedFrom);
            $this->session->set_userdata('pesCreatedFrom', $pesCreatedFrom);
        } else {
            $this->session->set_userdata('pesCreatedFrom', '');
        }

        if ($this->input->post('pesCreatedTo')) {

            $pesCreatedTo = strtotime('11:59:59 pm ' . $this->input->post('pesCreatedTo'));
            $pesCreatedTo = date('Y-m-d H:i:s', $pesCreatedTo);
            $this->session->set_userdata('pesCreatedTo', $pesCreatedTo);
        } else {
            $this->session->set_userdata('pesCreatedTo', '');
        }

        if ($this->input->post('pesActivityFrom')) {
            $pesActivityFrom = strtotime($this->input->post('pesActivityFrom'));
            $pesActivityFrom = date('Y-m-d H:i:s', $pesActivityFrom);
            $this->session->set_userdata('pesActivityFrom', $pesActivityFrom);
        } else {
            $this->session->set_userdata('pesActivityFrom', '');
        }

        if ($this->input->post('pesActivityTo')) {
            $pesActivityTo = strtotime('11:59:59 pm ' . $this->input->post('pesActivityTo'));
            $pesActivityTo = date('Y-m-d H:i:s', $pesActivityTo);
            $this->session->set_userdata('pesActivityTo', $pesActivityTo);
        } else {
            $this->session->set_userdata('pesActivityTo', '');
        }

        if ($this->input->post('pFilterQueue')) {
            $this->session->set_userdata('pesFilterQueue', $this->input->post('pFilterQueue'));
        } else {
            $this->session->set_userdata('pesFilterQueue', '');
        }
    }

    public function resetProposalEstimatesFilter()
    {
        $this->session->set_userdata(array(
            'pesFilter' => '',
            'pesFilterUser' => '',
            'pesFilterBranch' => '',
            'pesFilterStatus' => '',
            'pesFilterEstimateStatus' => '',
            'pesFilterService' => '',
            'pesFilterFrom' => '',
            'pesFilterTo' => '',
            'pesFilterQueue' => '',
            'pesFilterEmailStatus' => '',
            'pesFilterClientAccount' => '',
        ));
    }

    public function addtruckingDump($dumpRate, $dumpQuantity, $parentItem)
    {
        $total = $dumpRate * $dumpQuantity;

        $eli = new EstimationLineItem();
        $expected_total = $total;
        // Proposal ID
        $eli->setProposalId($parentItem->getProposalId());
        // ProposalService ID
        $eli->setProposalServiceId($parentItem->getProposalServiceId());
        // Item ID
        $eli->setItemId(0);
        // Phase ID
        $eli->setPhaseId($parentItem->getPhaseId());
        // Unit Price
        $eli->setUnitPrice($dumpRate);
        // Custom Unit Price - 0 or 1
        $eli->setCustomUnitPrice(0);
        $eli->setCustomName('Dump Fees (' . $parentItem->getItem()->getName() . ')');
        // Quantity
        $eli->setQuantity($dumpQuantity);
        // Total Price
        $eli->setTotalPrice($total);
        // Base price
        $eli->setBasePrice($dumpRate);
        // setOverheadRate
        $eli->setOverheadRate(0);
        // set Profit Rate
        $eli->setProfitRate(0);
        // set OverheadPrice
        $eli->setOverheadPrice(0);
        // set Profit Price
        $eli->setProfitPrice(0);
        // Set Tax Rate
        $eli->setTaxRate(0);
        // Set Tax Price
        $eli->setTaxPrice(0);
        // setOverheadRate
        $eli->setTruckingOverheadRate(0);
        // set Profit Rate
        $eli->setTruckingProfitRate(0);
        // set OverheadPrice
        $eli->setTruckingOverheadPrice(0);
        // set Profit Price
        $eli->setTruckingProfitPrice(0);
        // Set Tax Rate
        $eli->setTruckingTotalPrice(0);
        // Set parent
        $eli->setParentLineItemId($parentItem->getParentLineItemId());
        // Template ID
        $eli->setTemplateId(0);
        //set fee type
        $eli->setFees(1);
        // Set day
        $eli->setDay(0);
        // Set Num people
        $eli->setNumPeople(0);
        // Set hours_per_day
        $eli->setHoursPerDay(0);
        //dump parent id
        $eli->setDumpTruckingId($parentItem->getId());
        // Set Expected total
        $eli->setExpectedTotal($expected_total);
        // Save it
        $this->em->persist($eli);
        $this->em->flush();
    }

    public function saveTemplatesPrice()
    {
        $edit_template_price = str_replace(['$', ','], ['', ''], $this->input->post('edit_template_price'));
        $template_id = $this->input->post('template_id');
        $proposalServiceId = $this->input->post('proposalServiceId');
        $phase_id = $this->input->post('phase_id');
        $eli = $this->getEstimationRepository()->getFixedParentTemplateItem($template_id, $phase_id);
        $template = $this->em->findTemplate($template_id);

        $proposalService = $this->em->findProposalService($proposalServiceId);
        $proposal = $this->em->findProposal($proposalService->getProposal());
        $calculation_type = $proposal->getEstimateCalculationType();
        if ($calculation_type == 1) {
            $company = $this->account()->getCompany();

            $settings = $this->getEstimationRepository()->getCompanySettings($company);
            $estimate = $this->getEstimationRepository()->getProposalServiceEstimate($proposalService);
            //$oldohRate = $estimate->getOverheadRate();
            //$oldpmRate = $estimate->getProfitRate();
            $DefaultProfit = $estimate->getProfitRate();
            $DefaultOverhead = $estimate->getOverheadRate();
        }
        if ($calculation_type != 1) {

            $DefaultOverhead = $template->getOverheadRate();
            $DefaultProfit = $template->getProfitRate();

        }


        ////////////////////////////////////


        $total_rate = (($DefaultOverhead + $DefaultProfit) / 100) + 1;

        $base_cost = ($edit_template_price / $total_rate);


        $overheadPrice = (($base_cost * $DefaultOverhead) / 100);
        $profitPrice = (($base_cost * $DefaultProfit) / 100);


        ////////////////////////////////

        if ($template->getCalculationType() == 1) {
            $temp_parent_total = $edit_template_price * $eli->getDay();
            $temp_overhead_total = $overheadPrice * $eli->getDay();
            $temp_profit_total = $profitPrice * $eli->getDay();
        } else {
            $temp_parent_total = $edit_template_price * $eli->getDay() * $eli->getHoursPerDay();
            $temp_overhead_total = $overheadPrice * $eli->getDay() * $eli->getHoursPerDay();
            $temp_profit_total = $profitPrice * $eli->getDay() * $eli->getHoursPerDay();
        }


        $eli->setUnitPrice($edit_template_price);
        // Custom Unit Price - 0 or 1
        // $eli->setCustomUnitPrice(0);
        // Quantity

        // Total Price
        $eli->setTotalPrice($temp_parent_total);
        // Base price
        $eli->setBasePrice($base_cost);
        // setOverheadRate
        $eli->setOverheadRate($overheadPrice);
        // set Profit Rate
        $eli->setProfitRate($profitPrice);
        // set OverheadPrice
        $eli->setOverheadPrice($temp_overhead_total);
        // set Profit Price
        $eli->setProfitPrice($temp_profit_total);
        // Set Tax Rate
        // $eli->setTaxRate('0.00');
        // Set Tax Price
        //$eli->setTaxPrice('0.00');
        // Set Plant ID
        //$eli->setPlantId(null);
        // Set Template ID
        // $eli->setTemplateId($template_id);
        //set custom name
        // $eli->setCustomName($template->getName());


        // Save it
        $this->em->persist($eli);
        $this->em->flush();

        $this->getEstimationRepository()->updatePhaseStatus($eli->getPhase());


        $numLineItems = $this->getEstimationRepository()->getProposalServiceUncompletedPhasesCount($proposalServiceId);

        // Update the Estimate Object
        $proposalService = $this->em->findProposalService($proposalServiceId);

        $estimate = $this->getEstimationRepository()->getProposalServiceEstimate($proposalService);
        //$estimate->setCompleted($apply);
        if ($numLineItems > 0) {
            $estimate->setCompleted(0);
        } else {
            $estimate->setCompleted(1);
        }
        $price = $this->getEstimationRepository()->getProposalServiceLineItemTotal($proposalServiceId);
        $newPrice = '$' . number_format($price, 2);
        $estimate->setTotalPrice($newPrice);

        $estimate->setCustomPrice(0);
        $this->em->persist($estimate);

        // Flush to DB
        $this->em->flush();

        // Log it
        $this->getEstimationRepository()->addLog(
            $this->account(),
            $proposalService->getProposal(),
            'Edit_item',
            'Template :' . $template->getName() . ' Price Edited'
        );


        //start regular log
        $this->log_manager->add(\models\ActivityAction::PROPOSAL_ESTIMATE_EDIT_ITEM,
            'Template :' . $template->getName() . ' Price Edited',
            $proposal->getClient(),
            $proposal,
            null,
            $this->account());

        $this->sendResponse([
            'error' => 0,
            'message' => 'Line item(s) Updated',
            'total_price' => $this->getEstimationRepository()->getProposalServiceLineItemTotal($proposalServiceId),
            'estimate' => $this->getEstimationRepository()->getEstimateData($estimate),
            'breakdown' => $this->getEstimationRepository()->getProposalServicePriceBreakdown($proposalServiceId),
        ]);
    }


    public function saveStandardTemplatesPriceOld()
    {
        $edit_template_price = str_replace(['$', ','], ['', ''], $this->input->post('edit_template_price'));
        $old_edit_template_price = str_replace(['$', ','], ['', ''], $this->input->post('old_edit_template_price'));
        $template_id = $this->input->post('template_id');
        $proposalServiceId = $this->input->post('proposalServiceId');
        $phase_id = $this->input->post('phase_id');
        $estimateItems = $this->getEstimationRepository()->getSavedEstimateTemplateItem($template_id, $phase_id);
        //print_r($estimateItems);die();
        $template = $this->em->findTemplate($template_id);

        $proposalService = $this->em->findProposalService($proposalServiceId);
        $proposal = $this->em->findProposal($proposalService->getProposal());


        $diff_ratio = $edit_template_price / $old_edit_template_price;


        foreach ($estimateItems as $estimateItem) {

            $newTotal = ($estimateItem->getTotalPrice() * $diff_ratio);
            $newBaseTotal = ($estimateItem->getBasePrice() * $diff_ratio);
            $newOverheadRate = ($estimateItem->getOverheadRate() * $diff_ratio);
            $newProfitRate = ($estimateItem->getProfitRate() * $diff_ratio);
            $newOverheadPrice = ($estimateItem->getOverheadPrice() * $diff_ratio);
            $newProfitPrice = ($estimateItem->getProfitPrice() * $diff_ratio);
            $newTaxPrice = ($estimateItem->getTaxPrice() * $diff_ratio);

            $newUnitPrice = ($estimateItem->getUnitPrice() * $diff_ratio);


            $estimateItem->setTotalPrice($newTotal);
            $estimateItem->setBasePrice($newBaseTotal);
            $estimateItem->setOverheadRate($newOverheadRate);
            $estimateItem->setProfitRate($newProfitRate);
            $estimateItem->setOverheadPrice($newOverheadPrice);
            $estimateItem->setProfitPrice($newProfitPrice);
            $estimateItem->setTaxPrice($newTaxPrice);
            $estimateItem->setUnitPrice($newUnitPrice);

            $this->em->persist($estimateItem);


        }
        $this->em->flush();
        ////////////////////////////////////

        $phase = $this->em->findEstimationPhase($phase_id);
        $this->getEstimationRepository()->updatePhaseStatus($phase);


        $numLineItems = $this->getEstimationRepository()->getProposalServiceUncompletedPhasesCount($proposalServiceId);

        // Update the Estimate Object
        $proposalService = $this->em->findProposalService($proposalServiceId);

        $estimate = $this->getEstimationRepository()->getProposalServiceEstimate($proposalService);
        //$estimate->setCompleted($apply);
        if ($numLineItems > 0) {
            $estimate->setCompleted(0);
        } else {
            $estimate->setCompleted(1);
        }
        $price = $this->getEstimationRepository()->getProposalServiceLineItemTotal($proposalServiceId);
        $newPrice = '$' . number_format($price, 2);
        $estimate->setTotalPrice($newPrice);

        $estimate->setCustomPrice(0);
        $this->em->persist($estimate);

        // Flush to DB
        $this->em->flush();

        // Log it
        $this->getEstimationRepository()->addLog(
            $this->account(),
            $proposalService->getProposal(),
            'Edit_item',
            'Template :' . $template->getName() . ' Price Edited'
        );


        //start regular log
        $this->log_manager->add(\models\ActivityAction::PROPOSAL_ESTIMATE_EDIT_ITEM,
            'Template :' . $template->getName() . ' Price Edited',
            $proposal->getClient(),
            $proposal,
            null,
            $this->account());

        $this->sendResponse([
            'error' => 0,
            'message' => 'Line item(s) Updated',
            'total_price' => $this->getEstimationRepository()->getProposalServiceLineItemTotal($proposalServiceId),
            'estimate' => $this->getEstimationRepository()->getEstimateData($estimate),
            'breakdown' => $this->getEstimationRepository()->getProposalServicePriceBreakdown($proposalServiceId),
        ]);
    }


    public function saveStandardTemplatesPrice()
    {
        $edit_template_price = str_replace(['$', ','], ['', ''], $this->input->post('edit_template_price'));
        $old_edit_template_price = str_replace(['$', ','], ['', ''], $this->input->post('old_edit_template_price'));
        $template_id = $this->input->post('template_id');
        $proposalServiceId = $this->input->post('proposalServiceId');
        $phase_id = $this->input->post('phase_id');
        $estimateItems = $this->getEstimationRepository()->getSavedEstimateTemplateItem($template_id, $phase_id);
        //print_r($estimateItems);die();
        $template = $this->em->findTemplate($template_id);

        $proposalService = $this->em->findProposalService($proposalServiceId);
        $proposal = $this->em->findProposal($proposalService->getProposal());


        $diff_ratio = $edit_template_price / $old_edit_template_price;


        foreach ($estimateItems as $estimateItem) {

            $newTotal = ($estimateItem->getTotalPrice() * $diff_ratio);
            $newBaseTotal = ($estimateItem->getBasePrice() * $diff_ratio);
            $newOverheadRate = ($estimateItem->getOverheadRate() * $diff_ratio);
            $newProfitRate = ($estimateItem->getProfitRate() * $diff_ratio);
            $newOverheadPrice = ($estimateItem->getOverheadPrice() * $diff_ratio);
            $newProfitPrice = ($estimateItem->getProfitPrice() * $diff_ratio);
            //$newTaxPrice = ($estimateItem->getTaxPrice() * $diff_ratio);

            $newUnitPrice = ($estimateItem->getUnitPrice() * $diff_ratio);
            $before_tax_total = $newTotal;
            if ($estimateItem->getTaxRate() > 0) {

                $withoutTaxPercent = (100 - $estimateItem->getTaxRate());
                $newTaxPrice = ($newTotal * $estimateItem->getTaxRate()) / 100;
                $newTotal = ($newTotal * $withoutTaxPercent) / 100;

            } else {
                $newTaxPrice = '0.00';
            }

            // $diffe = $newTotal- $estimateItem->getTotalPrice();
            // echo '<br>';
            $total_oh_pm = $estimateItem->getOverheadPrice() + $estimateItem->getProfitPrice();
            //$margin = $diffe + $total_oh_pm;
            $margin = $newTotal - $estimateItem->getExpectedTotal();
// echo $margin;
// echo '<br>';
            $pm_ratio = ($estimateItem->getProfitPrice() / $total_oh_pm) * 100;
            $oh_ratio = ($estimateItem->getOverheadPrice() / $total_oh_pm) * 100;

            $new_oh_total = ($margin * $oh_ratio) / 100;
            $new_pm_total = ($margin * $pm_ratio) / 100;

            $newOverheadRate = ($new_oh_total / $estimateItem->getQuantity());
            $newProfitRate = ($new_pm_total / $estimateItem->getQuantity());
// echo $new_oh_total;
// echo '<br>';
            // $newTotal = 0;
            // $newBaseTotal = 0;
            // $newOverheadRate = 0;
            // $newProfitRate = 0;
            $newOverheadPrice = 0;
            $newProfitPrice = 0;

            $estimateItem->setTotalPrice($before_tax_total);
            //$estimateItem->setBasePrice($newBaseTotal);
            $estimateItem->setOverheadRate($newOverheadRate);
            $estimateItem->setProfitRate($newProfitRate);
            $estimateItem->setOverheadPrice($new_oh_total);
            $estimateItem->setProfitPrice($new_pm_total);
            $estimateItem->setTaxPrice($newTaxPrice);
            $estimateItem->setCustomTotalPrice(1);
            //$estimateItem->setUnitPrice($newUnitPrice);

            $this->em->persist($estimateItem);


        }
        $this->em->flush();
        ////////////////////////////////////

        $phase = $this->em->findEstimationPhase($phase_id);
        $this->getEstimationRepository()->updatePhaseStatus($phase);


        $numLineItems = $this->getEstimationRepository()->getProposalServiceUncompletedPhasesCount($proposalServiceId);

        // Update the Estimate Object
        $proposalService = $this->em->findProposalService($proposalServiceId);

        $estimate = $this->getEstimationRepository()->getProposalServiceEstimate($proposalService);
        //$estimate->setCompleted($apply);
        if ($numLineItems > 0) {
            $estimate->setCompleted(0);
        } else {
            $estimate->setCompleted(1);
        }
        $price = $this->getEstimationRepository()->getProposalServiceLineItemTotal($proposalServiceId);
        $newPrice = '$' . number_format($price, 2);
        $estimate->setTotalPrice($newPrice);

        $estimate->setCustomPrice(0);
        $this->em->persist($estimate);

        // Flush to DB
        $this->em->flush();

        // Log it
        $this->getEstimationRepository()->addLog(
            $this->account(),
            $proposalService->getProposal(),
            'Edit_item',
            'Template :' . $template->getName() . ' Price Edited'
        );


        //start regular log
        $this->log_manager->add(\models\ActivityAction::PROPOSAL_ESTIMATE_EDIT_ITEM,
            'Template :' . $template->getName() . ' Price Edited',
            $proposal->getClient(),
            $proposal,
            null,
            $this->account());
//die;
        $this->sendResponse([
            'error' => 0,
            'message' => 'Line item(s) Updated',
            'total_price' => $this->getEstimationRepository()->getProposalServiceLineItemTotal($proposalServiceId),
            'estimate' => $this->getEstimationRepository()->getEstimateData($estimate),
            'breakdown' => $this->getEstimationRepository()->getProposalServicePriceBreakdown($proposalServiceId),
        ]);
    }

    public function updateSaveItemTotalPriceOld()
    {
        $total_price = str_replace(['$', ','], ['', ''], $this->input->post('total_price'));
        $estimate_line_id = $this->input->post('estimate_line_id');
        $proposalServiceId = $this->input->post('proposalServiceId');
        $phase_id = $this->input->post('phase_id');
        $eli = $this->em->findEstimationLineItem($estimate_line_id);
        $old_item = clone $eli;

        $OverheadRate = $eli->getOverheadRate();

        $ProfitRate = $eli->getProfitRate();

        $TaxRate = $eli->getTaxRate();

        $quantity = $eli->getQuantity();

        $TaxRate = ($TaxRate / 100) + 1;

        $before_tax_total = $total_price;

        $total_price = ($total_price / $TaxRate);

        $total_tax = $before_tax_total - $total_price;

        $total_rate = (($OverheadRate + $ProfitRate) / 100) + 1;

        $unit_price = ($total_price / $quantity);

        $base_cost = ($unit_price / $total_rate);

        $overheadUnitPrice = (($base_cost * $OverheadRate) / 100);

        $profitUnitPrice = (($base_cost * $ProfitRate) / 100);

        $taxUnitPrice = (($base_cost * $TaxRate) / 100);

        $temp_overhead_total = $overheadUnitPrice * $eli->getQuantity();

        $temp_profit_total = $profitUnitPrice * $eli->getQuantity();


        $eli->setUnitPrice($unit_price);


        // Total Price
        $eli->setTotalPrice($before_tax_total);
        // Base price
        $eli->setBasePrice($base_cost);
        // setOverheadRate
        //$eli->setOverheadRate($overheadUnitPrice);
        // set Profit Rate
        //$eli->setProfitRate($profitUnitPrice);
        // set OverheadPrice
        $eli->setOverheadPrice($temp_overhead_total);
        // set Profit Price
        $eli->setProfitPrice($temp_profit_total);
        $eli->setTaxPrice($total_tax);
        $eli->setCustomTotalPrice(1);
        // Save it
        $this->em->persist($eli);
        $this->em->flush();

        $this->getEstimationRepository()->updatePhaseStatus($eli->getPhase());


        $numLineItems = $this->getEstimationRepository()->getProposalServiceUncompletedPhasesCount($proposalServiceId);

        // Update the Estimate Object
        $proposalService = $this->em->findProposalService($proposalServiceId);

        $estimate = $this->getEstimationRepository()->getProposalServiceEstimate($proposalService);
        //$estimate->setCompleted($apply);
        if ($numLineItems > 0) {
            $estimate->setCompleted(0);
        } else {
            $estimate->setCompleted(1);
        }
        $price = $this->getEstimationRepository()->getProposalServiceLineItemTotal($proposalServiceId);
        $newPrice = '$' . number_format($price, 2);
        $estimate->setTotalPrice($newPrice);

        $estimate->setCustomPrice(0);
        $this->em->persist($estimate);

        $proposalService->setPrice($newPrice);
        $proposalService->setTaxPrice($this->getEstimationRepository()->getProposalServiceLineItemTaxTotal($proposalServiceId));
        $this->em->persist($proposalService);
        // Flush to DB
        $this->em->flush();

        $differenceString = $this->getEstimationRepository()->getLineItemsDifferencesString($old_item, $eli);

        $logMessage = $eli->getItem()->getType()->getName() . ': ' . $eli->getItem()->getName() . " item edit for Service: " . $eli->getProposalService()->getServiceName();
        $logMessage .= '<br />';
        $logMessage .= $differenceString;

        $proposal = $this->em->findProposal($proposalService->getProposal());
        // Log it
        $this->getEstimationRepository()->addLog(
            $this->account(),
            $proposalService->getProposal(),
            'Edit_item_price',
            $logMessage
        );


        //start regular log
        $this->log_manager->add(\models\ActivityAction::PROPOSAL_ESTIMATE_LINE_ITEM_PRICE_CHANGE,
            $logMessage,
            $proposal->getClient(),
            $proposal,
            null,
            $this->account());

        $this->sendResponse([
            'error' => 0,
            'message' => 'Line item Price Updated',
            'total_price' => $this->getEstimationRepository()->getProposalServiceLineItemTotal($proposalServiceId),
            'estimate' => $this->getEstimationRepository()->getEstimateData($estimate),
            'breakdown' => $this->getEstimationRepository()->getProposalServicePriceBreakdown($proposalServiceId),
        ]);

    }


    public function updateSaveItemTotalPrice()
    {
        $total_price = str_replace(['$', ','], ['', ''], $this->input->post('total_price'));
        $estimate_line_id = $this->input->post('estimate_line_id');
        $proposalServiceId = $this->input->post('proposalServiceId');
        $phase_id = $this->input->post('phase_id');
        $eli = $this->em->findEstimationLineItem($estimate_line_id);
        $old_item = clone $eli;

        $before_tax_total = $total_price;
        if ($eli->getTaxRate() > 0) {

            $taxMultiplier = number_format((($eli->getTaxRate() / 100) + 1), 2, '.', '');
            $total_price = number_format($before_tax_total / $taxMultiplier, 2, '.', '');
            $newTaxPrice = number_format($before_tax_total - $total_price, 2, '.', '');


        } else {
            $newTaxPrice = '0.00';
        }
        $margin = $total_price - $eli->getExpectedTotal();

        $total_oh_pm = $eli->getOverheadPrice() + $eli->getProfitPrice();

        if ($total_oh_pm != 0) {
            $pm_ratio = ($eli->getProfitPrice() / $total_oh_pm) * 100;
            $oh_ratio = ($eli->getOverheadPrice() / $total_oh_pm) * 100;
        } else {
            $pm_ratio = 0;
            $oh_ratio = 0;
        }


        $new_oh_total = ($margin * $oh_ratio) / 100;
        $new_pm_total = ($margin * $pm_ratio) / 100;

        $newOverheadRate = ($new_oh_total / $eli->getQuantity());
        $newProfitRate = ($new_pm_total / $eli->getQuantity());


        $oh_percent = ($new_oh_total / $eli->getExpectedTotal()) * 100;
        $pm_percent = ($new_pm_total / $eli->getExpectedTotal()) * 100;


        // Total Price
        $eli->setTotalPrice($before_tax_total);
        // Tax price
        $eli->setTaxPrice($newTaxPrice);
        // setOverheadRate
        $eli->setOverheadRate($newOverheadRate);
        // set Profit Rate
        $eli->setProfitRate($newProfitRate);
        // set OverheadPrice
        $eli->setOverheadPrice($new_oh_total);
        // set Profit Price
        $eli->setProfitPrice($new_pm_total);
        // $eli->setTaxPrice($total_tax);
        $eli->setCustomTotalPrice(1);
        // Save it
        $this->em->persist($eli);
        $this->em->flush();


        $calculator = $this->getEstimationRepository()->getEstimateCalculatorValue($old_item->getId());
        if ($calculator) {
            $tempdata = array();
            $formdata = json_decode(json_encode(json_decode($calculator[0]['saved_values'])), true);

            foreach ($formdata as $data) {
                if ($data['name'] === 'cal_overhead') {
                    $data['value'] = strval(number_format($oh_percent, 2)) . '%';

                } else if ($data['name'] === 'cal_profit') {
                    $data['value'] = strval(number_format($pm_percent, 2)) . '%';
                }
                $tempdata[] = $data;
            }

            $scv = $this->em->find('models\EstimationCalculatorValue', $calculator[0]['id']);

            $valuesText = json_encode($tempdata);

            $scv->setSavedValues($valuesText);
            $this->em->persist($scv);
            $this->em->flush();
        }


        $this->getEstimationRepository()->updatePhaseStatus($eli->getPhase());


        $numLineItems = $this->getEstimationRepository()->getProposalServiceUncompletedPhasesCount($proposalServiceId);

        // Update the Estimate Object
        $proposalService = $this->em->findProposalService($proposalServiceId);

        $estimate = $this->getEstimationRepository()->getProposalServiceEstimate($proposalService);
        //$estimate->setCompleted($apply);
        if ($numLineItems > 0) {
            $estimate->setCompleted(0);
        } else {
            $estimate->setCompleted(1);
        }
        $price = $this->getEstimationRepository()->getProposalServiceLineItemTotal($proposalServiceId);
        $newPrice = '$' . number_format($price, 2);
        $estimate->setTotalPrice($newPrice);

        $estimate->setCustomPrice(0);
        $this->em->persist($estimate);

        $proposalService->setPrice($newPrice);
        $proposalService->setTaxPrice($this->getEstimationRepository()->getProposalServiceLineItemTaxTotal($proposalServiceId));
        $this->em->persist($proposalService);
        // Flush to DB
        $this->em->flush();

        $differenceString = $this->getEstimationRepository()->getLineItemsDifferencesString($old_item, $eli);

        $logMessage = $eli->getItem()->getType()->getName() . ': ' . $eli->getItem()->getName() . " item edit for Service: " . $eli->getProposalService()->getServiceName();
        $logMessage .= '<br />';
        $logMessage .= $differenceString;

        $proposal = $this->em->findProposal($proposalService->getProposal());
        // Log it
        $this->getEstimationRepository()->addLog(
            $this->account(),
            $proposalService->getProposal(),
            'Edit_item_price',
            $logMessage
        );


        //start regular log
        $this->log_manager->add(\models\ActivityAction::PROPOSAL_ESTIMATE_LINE_ITEM_PRICE_CHANGE,
            $logMessage,
            $proposal->getClient(),
            $proposal,
            null,
            $this->account());

        $this->sendResponse([
            'error' => 0,
            'message' => 'Line item Price Updated',
            'total_price' => $this->getEstimationRepository()->getProposalServiceLineItemTotal($proposalServiceId),
            'estimate' => $this->getEstimationRepository()->getEstimateData($estimate),
            'breakdown' => $this->getEstimationRepository()->getProposalServicePriceBreakdown($proposalServiceId),
        ]);

    }


    public function checkItemCustomTotalPrice()
    {
        $total_price = str_replace(['$', ','], ['', ''], $this->input->post('total_price'));
        $overhead_rate = str_replace(['$', ','], ['', ''], $this->input->post('cal_overhead_rate'));
        $profit_rate = str_replace(['$', ','], ['', ''], $this->input->post('cal_profit_rate'));
        $taxRate = $this->input->post('tax_rate');
        $quantity = $this->input->post('item_quantity');
        $baseUnitPrice = str_replace(['$', ','], ['', ''], $this->input->post('base_unit_price'));
        $expectedTotal = number_format($quantity * $baseUnitPrice, 2, '.', '');

        $before_tax_total = $total_price;
        if ($taxRate > 0) {

            $taxMultiplier = number_format((($taxRate / 100) + 1), 2, '.', '');
            $total_price = number_format($before_tax_total / $taxMultiplier, 2, '.', '');
            $newTaxPrice = number_format($before_tax_total - $total_price, 2, '.', '');

        } else {
            $newTaxPrice = '0.00';
        }
        $margin = number_format($total_price - $expectedTotal, 2, '.', '');

        $total_oh_pm = number_format($overhead_rate + $profit_rate, 2, '.', '');

        if ($total_oh_pm != 0) {
            $oh_ratio = number_format(($overhead_rate / $total_oh_pm) * 100, 2, '.', '');
            $pm_ratio = number_format(($profit_rate / $total_oh_pm) * 100, 2, '.', '');
        } else {
            $pm_ratio = 0;
            $oh_ratio = 0;
        }


        $new_oh_total = number_format(($margin * $oh_ratio) / 100, 2, '.', '');
        $new_pm_total = number_format(($margin * $pm_ratio) / 100, 2, '.', '');

        $newOverheadRate = number_format(($new_oh_total / $quantity), 2, '.', '');
        $newProfitRate = number_format(($new_pm_total / $quantity), 2, '.', '');


        if ($expectedTotal > 0) {
            $oh_percent = number_format(($new_oh_total / $expectedTotal) * 100, 2, '.', '');
            $pm_percent = number_format(($new_pm_total / $expectedTotal) * 100, 2, '.', '');
        } else {
            $oh_percent = '0';
            $pm_percent = '0';
        }


        $this->sendResponse([
            'error' => 0,
            'oh_percent' => $oh_percent,
            'pm_percent' => $pm_percent,
            'new_oh_total' => $new_oh_total,
            'new_pm_total' => $new_pm_total,
            'newTaxPrice' => $newTaxPrice,

            'margin' => $margin
        ]);

    }

    public function updateCheckItemTotalPrice()
    {
        $total_price = str_replace(['$', ','], ['', ''], $this->input->post('total_price'));
        $overhead_price = str_replace(['$', ','], ['', ''], $this->input->post('cal_overhead_price'));
        $profit_price = str_replace(['$', ','], ['', ''], $this->input->post('cal_profit_price'));
        $taxRate = $this->input->post('tax_rate');
        $quantity = $this->input->post('item_quantity');
        $baseUnitPrice = str_replace(['$', ','], ['', ''], $this->input->post('base_unit_price'));
        $expectedTotal = number_format($quantity * $baseUnitPrice, 2, '.', '');

        $before_tax_total = $total_price;
        if ($taxRate > 0) {

            $taxMultiplier = number_format((($taxRate / 100) + 1), 2, '.', '');
            $total_price = number_format($before_tax_total / $taxMultiplier, 2, '.', '');
            $newTaxPrice = number_format($before_tax_total - $total_price, 2, '.', '');

        } else {
            $newTaxPrice = '0.00';
        }
        $margin = number_format($total_price - $expectedTotal, 2, '.', '');

   
        
        
        $total_oh_pm = number_format(($overhead_price ? $overhead_price:0) + ($profit_price ? $profit_price:0), 2, '.', '');

        if ($total_oh_pm != 0) {
            $oh_ratio = number_format(($overhead_price / $total_oh_pm) * 100, 2, '.', '');
            $pm_ratio = number_format(($profit_price / $total_oh_pm) * 100, 2, '.', '');
        } else {
            $pm_ratio = 0;
            $oh_ratio = 0;
        }


        $new_oh_total = number_format(($margin * $oh_ratio) / 100, 2, '.', '');
        $new_pm_total = number_format(($margin * $pm_ratio) / 100, 2, '.', '');

        $newOverheadRate = number_format(($new_oh_total / $quantity), 2, '.', '');
        $newProfitRate = number_format(($new_pm_total / $quantity), 2, '.', '');

        if ($expectedTotal > 0) {
            $oh_percent = number_format(($new_oh_total / $expectedTotal) * 100, 2, '.', '');
            $pm_percent = number_format(($new_pm_total / $expectedTotal) * 100, 2, '.', '');
        } else {
            $oh_percent = '0';
            $pm_percent = '0';
        }

        $new_baseUnitPrice = number_format(($total_price / $quantity), 2, '.', '');

        $this->sendResponse([
            'error' => 0,
            'oh_percent' => $oh_percent,
            'pm_percent' => $pm_percent,
            'new_oh_total' => $new_oh_total,
            'new_pm_total' => $new_pm_total,
            'newTaxPrice' => $newTaxPrice,
            'baseUnitPrice' => $new_baseUnitPrice,
            'margin' => $margin
        ]);

    }


    public function updateParentCheckItemTotalPrice()
    {
        $total_price = str_replace(['$', ','], ['', ''], $this->input->post('total_price'));
        $estimate_line_id = $this->input->post('estimate_line_id');

        $oldTotalPrice = $this->getEstimationRepository()->getLineItemTotalPrice($estimate_line_id);
        //echo '<br>';
        $parentChildLineItems = $this->getEstimationRepository()->getParentChildLineItems($estimate_line_id);
        $newTotalPrice = 0;
        $data = [];
        foreach ($parentChildLineItems as $parentChildLineItem) {
            $parentChildLineItem->getTotalPrice();
            $pricePercent = ($parentChildLineItem->getTotalPrice() / $oldTotalPrice) * 100;
            //echo '<br>';
            $newCurrentItemTotal = ($total_price * $pricePercent) / 100;
            $newTotalPrice = $newTotalPrice + $newCurrentItemTotal;
            // echo '<br>';
            $before_tax_total = $newCurrentItemTotal;
            if ($parentChildLineItem->getTaxRate() > 0) {

                $taxMultiplier = number_format((($parentChildLineItem->getTaxRate() / 100) + 1), 2, '.', '');
                $newCurrentItemTotal = number_format($before_tax_total / $taxMultiplier, 2, '.', '');
                $newTaxPrice = number_format($before_tax_total - $newCurrentItemTotal, 2, '.', '');

            } else {
                $newTaxPrice = '0.00';
            }

            $margin = $newCurrentItemTotal - $parentChildLineItem->getExpectedTotal();
            // echo '<br>';
            $total_oh_pm = $parentChildLineItem->getOverheadPrice() + $parentChildLineItem->getProfitPrice();
            //echo '<br>';
            if ($total_oh_pm != 0) {
                $pm_ratio = ($parentChildLineItem->getProfitPrice() / $total_oh_pm) * 100;
                // echo '<br>';
                $oh_ratio = ($parentChildLineItem->getOverheadPrice() / $total_oh_pm) * 100;
                // echo '<br>';
            } else {
                $pm_ratio = 0;
                $oh_ratio = 0;
            }


            $new_oh_total = ($margin * $oh_ratio) / 100;
            //echo '<br>';
            $new_pm_total = ($margin * $pm_ratio) / 100;
            // echo '<br>';
            $newOverheadRate = ($new_oh_total / $parentChildLineItem->getQuantity());
            $newProfitRate = ($new_pm_total / $parentChildLineItem->getQuantity());


            $oh_percent = ($new_oh_total / $parentChildLineItem->getExpectedTotal()) * 100;
            // echo '<br>';
            $pm_percent = ($new_pm_total / $parentChildLineItem->getExpectedTotal()) * 100;

            // echo '<br>';

            if ($estimate_line_id == $parentChildLineItem->getId()) {

                $temp_total_price = $before_tax_total;
                $temp_newTaxPrice = $newTaxPrice;
                $temp_newOverheadRate = $oh_percent;
                $temp_newProfitRate = $pm_percent;
                $temp_new_oh_total = $new_oh_total;
                $temp_new_pm_total = $new_pm_total;


            }


        }


        //   if($total_price != $newTotalPrice){

        //      $diff =  $total_price - $newTotalPrice;
        //      $temp_new_pm_total = $temp_new_pm_total +$diff;
        //     $temp_total_price =$temp_total_price +$diff;


        //   }


//die;
        $this->sendResponse([
            'error' => 0,
            'oh_percent' => $temp_newOverheadRate,
            'pm_percent' => $temp_newProfitRate,
            'new_oh_total' => $temp_new_oh_total,
            'new_pm_total' => $temp_new_pm_total,
            'newTaxPrice' => $temp_newTaxPrice,
            'total_price' => $temp_total_price,
        ]);

    }


    public function updateParentSaveItemTotalPriceOld()
    {
        $total_price = str_replace(['$', ','], ['', ''], $this->input->post('total_price'));
        $estimate_line_id = $this->input->post('estimate_line_id');
        $proposalServiceId = $this->input->post('proposalServiceId');
        $phase_id = $this->input->post('phase_id');
        $oldTotalPrice = $this->getEstimationRepository()->getLineItemTotalPrice($estimate_line_id);

        $parentChildLineItems = $this->getEstimationRepository()->getParentChildLineItems($estimate_line_id);
        $proposalService = $this->em->findProposalService($proposalServiceId);
        foreach ($parentChildLineItems as $parentChildLineItem) {
            $parentChildLineItem->getTotalPrice();
            $pricePercent = ($parentChildLineItem->getTotalPrice() / $oldTotalPrice) * 100;

            $newCurrentItemTotal = ($total_price * $pricePercent) / 100;


            $TaxRate = $parentChildLineItem->getTaxRate();

            $TaxRate = ($TaxRate / 100) + 1;

            $before_tax_total = $newCurrentItemTotal;

            $newCurrentItemTotal = ($newCurrentItemTotal / $TaxRate);

            $total_tax = $before_tax_total - $newCurrentItemTotal;


            $old_item = clone $parentChildLineItem;

            $OverheadRate = $parentChildLineItem->getOverheadRate();

            $ProfitRate = $parentChildLineItem->getProfitRate();

            $quantity = $parentChildLineItem->getQuantity();


            $total_rate = (($OverheadRate + $ProfitRate) / 100) + 1;

            $unit_price = ($newCurrentItemTotal / $quantity);

            $base_cost = ($unit_price / $total_rate);

            $overheadUnitPrice = (($base_cost * $OverheadRate) / 100);

            $profitUnitPrice = (($base_cost * $ProfitRate) / 100);


            $temp_overhead_total = $overheadUnitPrice * $parentChildLineItem->getQuantity();

            $temp_profit_total = $profitUnitPrice * $parentChildLineItem->getQuantity();

            $parentChildLineItem->setUnitPrice($unit_price);


            // Total Price
            $parentChildLineItem->setTotalPrice($newCurrentItemTotal);
            // Base price
            $parentChildLineItem->setBasePrice($base_cost);
            $parentChildLineItem->setTaxPrice($total_tax);
            // setOverheadRate
            //$eli->setOverheadRate($overheadUnitPrice);
            // set Profit Rate
            //$eli->setProfitRate($profitUnitPrice);
            // set OverheadPrice
            $parentChildLineItem->setOverheadPrice($temp_overhead_total);
            // set Profit Price
            $parentChildLineItem->setProfitPrice($temp_profit_total);
            $parentChildLineItem->setCustomTotalPrice(1);
            // Save it
            $this->em->persist($parentChildLineItem);


            $differenceString = $this->getEstimationRepository()->getLineItemsDifferencesString($old_item, $parentChildLineItem);

            $logMessage = $parentChildLineItem->getItem()->getType()->getName() . ': ' . $parentChildLineItem->getItem()->getName() . " item edit for Service: " . $parentChildLineItem->getProposalService()->getServiceName();
            $logMessage .= '<br />';
            $logMessage .= $differenceString;

            $proposal = $this->em->findProposal($proposalService->getProposal());
            // Log it
            $this->getEstimationRepository()->addLog(
                $this->account(),
                $proposalService->getProposal(),
                'Edit_item_price',
                $logMessage
            );


            //start regular log
            $this->log_manager->add(\models\ActivityAction::PROPOSAL_ESTIMATE_LINE_ITEM_PRICE_CHANGE,
                $logMessage,
                $proposal->getClient(),
                $proposal,
                null,
                $this->account());

        }
        $this->em->flush();
        $newTotalPrice = $this->getEstimationRepository()->getLineItemTotalPrice($estimate_line_id);


        if ($total_price != $newTotalPrice) {

            $diff = $total_price - $newTotalPrice;
            $eli = $this->em->findEstimationLineItem($estimate_line_id);
            $eli->getProfitPrice();

            $profitvalue = $eli->getProfitPrice() + $diff;
            $totalvalue = $eli->getTotalPrice() + $diff;
            $eli->setProfitPrice($profitvalue);
            $eli->setTotalPrice($totalvalue);
            $this->em->persist($eli);
            $this->em->flush();

        }

        // $this->getEstimationRepository()->updatePhaseStatus($phase_id);


        $numLineItems = $this->getEstimationRepository()->getProposalServiceUncompletedPhasesCount($proposalServiceId);

        // Update the Estimate Object
        $proposalService = $this->em->findProposalService($proposalServiceId);

        $estimate = $this->getEstimationRepository()->getProposalServiceEstimate($proposalService);
        //$estimate->setCompleted($apply);
        if ($numLineItems > 0) {
            $estimate->setCompleted(0);
        } else {
            $estimate->setCompleted(1);
        }
        $price = $this->getEstimationRepository()->getProposalServiceLineItemTotal($proposalServiceId);
        $newPrice = '$' . number_format($price, 2);
        $estimate->setTotalPrice($newPrice);

        $estimate->setCustomPrice(0);
        $this->em->persist($estimate);


        $proposalService->setPrice($newPrice);
        $proposalService->setTaxPrice($this->getEstimationRepository()->getProposalServiceLineItemTaxTotal($proposalServiceId));
        $this->em->persist($proposalService);

        // Flush to DB
        $this->em->flush();

        $this->sendResponse([
            'error' => 0,
            'message' => 'Line item Price Updated',
            'total_price' => $this->getEstimationRepository()->getProposalServiceLineItemTotal($proposalServiceId),
            'estimate' => $this->getEstimationRepository()->getEstimateData($estimate),
            'breakdown' => $this->getEstimationRepository()->getProposalServicePriceBreakdown($proposalServiceId),
        ]);

    }


    public function updateParentSaveItemTotalPrice()
    {
        $total_price = str_replace(['$', ','], ['', ''], $this->input->post('total_price'));
        $estimate_line_id = $this->input->post('estimate_line_id');
        $proposalServiceId = $this->input->post('proposalServiceId');
        $phase_id = $this->input->post('phase_id');
        $oldTotalPrice = $this->getEstimationRepository()->getLineItemTotalPrice($estimate_line_id);

        $parentChildLineItems = $this->getEstimationRepository()->getParentChildLineItems($estimate_line_id);
        $proposalService = $this->em->findProposalService($proposalServiceId);
        foreach ($parentChildLineItems as $parentChildLineItem) {
            $parentChildLineItem->getTotalPrice();
            $pricePercent = ($parentChildLineItem->getTotalPrice() / $oldTotalPrice) * 100;

            $newCurrentItemTotal = ($total_price * $pricePercent) / 100;


            $before_tax_total = $newCurrentItemTotal;
            if ($parentChildLineItem->getTaxRate() > 0) {

                $taxMultiplier = number_format((($parentChildLineItem->getTaxRate() / 100) + 1), 2, '.', '');
                $newCurrentItemTotal = number_format($before_tax_total / $taxMultiplier, 2, '.', '');
                $newTaxPrice = number_format($before_tax_total - $newCurrentItemTotal, 2, '.', '');

            } else {
                $newTaxPrice = '0.00';
            }

            $margin = $newCurrentItemTotal - $parentChildLineItem->getExpectedTotal();

            $total_oh_pm = $parentChildLineItem->getOverheadPrice() + $parentChildLineItem->getProfitPrice();

            if ($total_oh_pm != 0) {
                $pm_ratio = ($parentChildLineItem->getProfitPrice() / $total_oh_pm) * 100;
                $oh_ratio = ($parentChildLineItem->getOverheadPrice() / $total_oh_pm) * 100;
            } else {
                $pm_ratio = 0;
                $oh_ratio = 0;
            }


            $new_oh_total = ($margin * $oh_ratio) / 100;
            // echo '<br>';
            $new_pm_total = ($margin * $pm_ratio) / 100;
            // echo '<br>';
            $newOverheadRate = ($new_oh_total / $parentChildLineItem->getQuantity());
            $newProfitRate = ($new_pm_total / $parentChildLineItem->getQuantity());


            $oh_percent = ($new_oh_total / $parentChildLineItem->getExpectedTotal()) * 100;
            $pm_percent = ($new_pm_total / $parentChildLineItem->getExpectedTotal()) * 100;


            $old_item = clone $parentChildLineItem;


            // Total Price
            $parentChildLineItem->setTotalPrice($before_tax_total);
            // Base price
            //   $parentChildLineItem->setBasePrice($base_cost);
            $parentChildLineItem->setTaxPrice($newTaxPrice);
            // setOverheadRate
            $parentChildLineItem->setOverheadRate($newOverheadRate);
            // set Profit Rate
            $parentChildLineItem->setProfitRate($newProfitRate);
            // set OverheadPrice
            $parentChildLineItem->setOverheadPrice($new_oh_total);
            // set Profit Price
            $parentChildLineItem->setProfitPrice($new_pm_total);
            $parentChildLineItem->setCustomTotalPrice(1);
            // Save it
            $this->em->persist($parentChildLineItem);

            $calculator = $this->getEstimationRepository()->getEstimateCalculatorValue($parentChildLineItem->getId());
            if ($calculator) {
                $tempdata = array();
                $formdata = json_decode(json_encode(json_decode($calculator[0]['saved_values'])), true);

                foreach ($formdata as $data) {
                    if ($data['name'] === 'cal_overhead') {
                        $data['value'] = strval(number_format($oh_percent, 2)) . '%';

                    } else if ($data['name'] === 'cal_profit') {
                        $data['value'] = strval(number_format($pm_percent, 2)) . '%';
                    }
                    $tempdata[] = $data;
                }

                $scv = $this->em->find('models\EstimationCalculatorValue', $calculator[0]['id']);

                $valuesText = json_encode($tempdata);

                $scv->setSavedValues($valuesText);
                $this->em->persist($scv);
                $this->em->flush();
            }


            $differenceString = $this->getEstimationRepository()->getLineItemsDifferencesString($old_item, $parentChildLineItem);

            $logMessage = $parentChildLineItem->getItem()->getType()->getName() . ': ' . $parentChildLineItem->getItem()->getName() . " item edit for Service: " . $parentChildLineItem->getProposalService()->getServiceName();
            $logMessage .= '<br />';
            $logMessage .= $differenceString;

            $proposal = $this->em->findProposal($proposalService->getProposal());
            // Log it
            $this->getEstimationRepository()->addLog(
                $this->account(),
                $proposalService->getProposal(),
                'Edit_item_price',
                $logMessage
            );


            //start regular log
            $this->log_manager->add(\models\ActivityAction::PROPOSAL_ESTIMATE_LINE_ITEM_PRICE_CHANGE,
                $logMessage,
                $proposal->getClient(),
                $proposal,
                null,
                $this->account());

        }
        $this->em->flush();
        $newTotalPrice = $this->getEstimationRepository()->getLineItemTotalPrice($estimate_line_id);


        if ($total_price != $newTotalPrice) {

            $diff = $total_price - $newTotalPrice;
            $eli = $this->em->findEstimationLineItem($estimate_line_id);
            //     // $eli->getProfitPrice();

            $profitvalue = $eli->getProfitPrice() + $diff;
            $totalvalue = $eli->getTotalPrice() + $diff;
            $eli->setProfitPrice($profitvalue);
            $eli->setTotalPrice($totalvalue);
            $this->em->persist($eli);
            $this->em->flush();

        }

        // $this->getEstimationRepository()->updatePhaseStatus($phase_id);

        $numLineItems = $this->getEstimationRepository()->getProposalServiceUncompletedPhasesCount($proposalServiceId);

        // Update the Estimate Object
        $proposalService = $this->em->findProposalService($proposalServiceId);

        $estimate = $this->getEstimationRepository()->getProposalServiceEstimate($proposalService);
        //$estimate->setCompleted($apply);
        if ($numLineItems > 0) {
            $estimate->setCompleted(0);
        } else {
            $estimate->setCompleted(1);
        }
        $price = $this->getEstimationRepository()->getProposalServiceLineItemTotal($proposalServiceId);
        $newPrice = '$' . number_format($price, 2);
        $estimate->setTotalPrice($newPrice);

        $estimate->setCustomPrice(0);
        $this->em->persist($estimate);


        $proposalService->setPrice($newPrice);
        $proposalService->setTaxPrice($this->getEstimationRepository()->getProposalServiceLineItemTaxTotal($proposalServiceId));
        $this->em->persist($proposalService);

        // Flush to DB
        $this->em->flush();
//die;
        $this->sendResponse([
            'error' => 0,
            'message' => 'Line item Price Updated',
            'total_price' => $this->getEstimationRepository()->getProposalServiceLineItemTotal($proposalServiceId),
            'estimate' => $this->getEstimationRepository()->getEstimateData($estimate),
            'breakdown' => $this->getEstimationRepository()->getProposalServicePriceBreakdown($proposalServiceId),
        ]);

    }

    public function getServiceTotal()
    {
        $response = [];
        $proposalServiceId = $this->input->post('proposalServiceId');
        $response['breakdown'] = $this->getEstimationRepository()->getProposalServicePriceBreakdown($proposalServiceId);
        $this->sendResponse($response);
    }

    public function saveProposalWorkOrderSettings()
    {

        $work_order_layout_type = $this->input->post('work_order_layout_type');
        $group_template_item = ($this->input->post('group_template_item')) ? 1 : 0;
        //echo $this->input->post('proposal_Id');
        $proposal_id = $this->input->post('proposal_Id');

        $proposal = $this->em->findProposal($proposal_id);

        $proposal->setWorkOrderLayoutType($work_order_layout_type);
        $proposal->setGroupTemplateItem($group_template_item);

        $this->em->persist($proposal);
        $this->em->flush();

        // Log it
        if ($work_order_layout_type == 'service_and_phase') {
            $type = 'Service & Phase';
        } elseif ($work_order_layout_type == 'service') {
            $type = 'Service';
        } else {
            $type = 'All Items';
        }
        if ($group_template_item) {
            $group = ' With Template Group';
        } else {
            $group = ' Without Template Group';
        }
        $this->getEstimationRepository()->addLog(
            $this->account(),
            $proposal_id,
            'update_status',
            'Work Order layout updated to ' . $type . $group
        );
        $this->sendResponse([
            'error' => 0,
            'message' => 'Work Order layout updated',

        ]);

        //$this->session->set_flashdata('success', 'Settings Saved');
        //redirect('/proposals/estimate/'.$proposal_id);
    }

    public function updateFixedTemplateTotalPrice($templateId, $phaseId)
    {

        $childItems = $this->getEstimationRepository()->getFixedChildTemplateItem($templateId, $phaseId);
        $temp_equipment_total = 0;
        $temp_labor_total = 0;
        $temp_equipment_base_total = 0;
        $temp_labor_base_total = 0;
        $temp_labor_pm_total = 0;
        $temp_labor_oh_total = 0;
        $temp_equipment_pm_total = 0;
        $temp_equipment_oh_total = 0;
        $fixed_labor_total = 0;
        $fixed_equipment_total = 0;

        foreach ($childItems as $lineItem) {


            $temp_item_total = $lineItem->getItem()->getUnitPrice() * $lineItem->getQuantity();

            if ($lineItem->getItem()->getType()->getCategoryId() == \models\EstimationCategory::EQUIPMENT) {
                $temp_equipment_total = $temp_equipment_total + $temp_item_total;
            } else {
                $temp_labor_total = $temp_labor_total + $temp_item_total;
            }
        }


        $temp_labor_percent = 0;
        $temp_equipment_percent = 0;
        if ($temp_labor_total > 0 || $temp_equipment_total > 0) {

            $category_total = $temp_equipment_total + $temp_labor_total;
            $temp_labor_percent = ($temp_labor_total / $category_total) * 100;
            $temp_equipment_percent = ($temp_equipment_total / $category_total) * 100;
        }

        $parentItem = $this->getEstimationRepository()->getFixedParentTemplateItem($templateId, $phaseId);
        if ($temp_labor_percent > 0) {
            $fixed_labor_total = number_format((($temp_labor_percent * $parentItem->getTotalPrice()) / 100), 2, '.', '');
            $temp_labor_base_total = number_format((($temp_labor_percent * ($parentItem->getBasePrice() * $parentItem->getQuantity())) / 100), 2, '.', '');
            $temp_labor_oh_total = number_format((($temp_labor_percent * $parentItem->getOverheadPrice()) / 100), 2, '.', '');
            $temp_labor_pm_total = number_format((($temp_labor_percent * $parentItem->getProfitPrice()) / 100), 2, '.', '');
            $check_total = $temp_labor_base_total + $temp_labor_oh_total + $temp_labor_pm_total;
            if ($fixed_labor_total != $check_total) {
                $diff = $fixed_labor_total - $check_total;
                $temp_labor_pm_total = $temp_labor_pm_total + $diff;
            }
        }

        if ($temp_equipment_percent > 0) {
            $fixed_equipment_total = number_format((($temp_equipment_percent * $parentItem->getTotalPrice()) / 100), 2, '.', '');
            $temp_equipment_base_total = number_format((($temp_equipment_percent * ($parentItem->getBasePrice() * $parentItem->getQuantity())) / 100), 2, '.', '');
            $temp_equipment_oh_total = number_format((($temp_equipment_percent * $parentItem->getOverheadPrice()) / 100), 2, '.', '');
            $temp_equipment_pm_total = number_format((($temp_equipment_percent * $parentItem->getProfitPrice()) / 100), 2, '.', '');
            $check_total = $temp_equipment_base_total + $temp_equipment_oh_total + $temp_equipment_pm_total;
            if ($fixed_equipment_total != $check_total) {
                $diff = $fixed_equipment_total - $check_total;
                $temp_equipment_pm_total = $temp_equipment_pm_total + $diff;
            }

        }


        $parentItem->setFixedLaborTotal($fixed_labor_total);
        $parentItem->setFixedEquipmentTotal($fixed_equipment_total);

        $parentItem->setFixedLaborBaseTotal($temp_labor_base_total);
        $parentItem->setFixedEquipmentBaseTotal($temp_equipment_base_total);

        $parentItem->setFixedLaborOhTotal($temp_labor_oh_total);
        $parentItem->setFixedEquipmentOhTotal($temp_equipment_oh_total);

        $parentItem->setFixedLaborPmTotal($temp_labor_pm_total);
        $parentItem->setFixedEquipmentPmTotal($temp_equipment_pm_total);
        $this->em->persist($parentItem);
        $this->em->flush();
    }

    public function updateJobCostItem()
    {

        $day = $this->input->post('day');
        $num_people = $this->input->post('num_people');
        $hpd = $this->input->post('hpd');
        $quantity = $this->input->post('quantity');
        $total = $this->input->post('total');
        $disposal_load = $this->input->post('disposal_load');
        $id = $this->input->post('id');
        $proposal_service_id = $this->input->post('proposal_service_id');
        $proposal_id = $this->input->post('proposal_id');

        $old_total = $this->input->post('old_total');

        $old_quantity = $this->input->post('old_quantity');
        $category_id = $this->input->post('category_id');

        $jobCostItem = $this->em->getRepository('models\JobCostItem')->findOneBy(array(
            'estimate_line_item_id' => $id
        ));
        $logString = 'Job Costing Item updated';
        $eli = $this->em->findEstimationLineItem($id);


        $before_tax_total = $total;
        if ($eli->getTaxRate() > 0) {
            $new_tax_rate = ($eli->getTaxPrice() / $old_quantity);
            $newTaxPrice = number_format(($new_tax_rate * $quantity), 2, '.', '');
            // $total = number_format($before_tax_total / $taxMultiplier, 2, '.', '');
            // $newTaxPrice = number_format($before_tax_total - $total, 2, '.', '');


        } else {
            $newTaxPrice = '0.00';
        }
        if ($old_quantity > 0) {
            $new_oh_rate = ($eli->getOverheadPrice() / $old_quantity);
            $new_pm_rate = ($eli->getProfitPrice() / $old_quantity);
        } else {
            $new_oh_rate = 0;
            $new_pm_rate = 0;
        }


        $new_oh_total = ($new_oh_rate * $quantity);
        $new_pm_total = ($new_pm_rate * $quantity);
        $baseUnitPrice = $eli->getBasePrice();

        $unit = $eli->getItem()->getUnitModel()->getName();
        $item_name = $eli->getItem()->getName();
        $service_name = $eli->getProposalService()->getServiceName();
        if (!$jobCostItem) {
            $jobCostItem = new \models\JobCostItem();
            $jobCostItem->setEstimateLineItemId($id);
            $jobCostItem->setEstimatedUnitPrice($eli->getBasePrice());
            $jobCostItem->setEstimatedOhRate($eli->getOverheadRate());
            $jobCostItem->setEstimatedPmRate($eli->getProfitRate());
            $jobCostItem->setEstimatedTaxRate($eli->getTaxRate());
            $jobCostItem->setEstimatedOhPrice($eli->getOverheadPrice());
            $jobCostItem->setEstimatedPmPrice($eli->getProfitPrice());
            $jobCostItem->setEstimatedTaxPrice($eli->getTaxPrice());
            if ($eli->getSubId() > 0) {
                $jobCostItem->setIsSubContractor(1);
            } else {
                $jobCostItem->setIsSubContractor(0);
            }
            if ($old_quantity == $quantity) {
                $logString = 'Saved ' . $quantity . ' ' . $unit;
            } else {
                $logString = 'Saved ' . $quantity . ' ' . $unit . ' (Estimated:- ' . $old_quantity . ' ' . $unit . ')';
            }

        } else {
            $logString = 'Updated ' . $old_quantity . ' ' . $unit . ' To ' . $quantity . ' ' . $unit;
        }

        $logString .= '<br/><strong>Item: </strong>' . $item_name . '<br/><strong>Service: </strong>' . $service_name;
        $jobCostItem->setDay($day);
        $jobCostItem->setNumPeople($num_people);
        $jobCostItem->setHpd($hpd);
        $jobCostItem->setActualQty($quantity);


        $jobCostItem->setActualUnitPrice($baseUnitPrice);
        $jobCostItem->setActualTotalPrice($before_tax_total);
        $jobCostItem->setProposalServiceId($proposal_service_id);
        $jobCostItem->setProposalId($proposal_id);

        $jobCostItem->setActualOhRate($eli->getOverheadRate());
        $jobCostItem->setActualPmRate($eli->getProfitRate());
        $jobCostItem->setActualTaxRate($eli->getTaxRate());
        $jobCostItem->setActualOhPrice($new_oh_total);
        $jobCostItem->setActualPmPrice($new_pm_total);
        $jobCostItem->setActualTaxPrice($newTaxPrice);


        $jobCostItem->setEstimatedTotalPrice($old_total);
        $jobCostItem->setEstimatedQty($old_quantity);

        $jobCostItem->setDisposalLoad($disposal_load);


        $jobCostItem->setCategoryId($category_id);
        $diff = $total - $old_total;
        $jobCostItem->setPriceDifference($diff);
        $this->em->persist($jobCostItem);
        $this->em->flush();

        $total_estimate_items = $this->getEstimationRepository()->getProposalServiceLineItemsCount($proposal_service_id);
        $total_job_cost_items = $this->getEstimationRepository()->getProposalServiceJobCostingItemsCount($proposal_service_id);

        if ($total_job_cost_items > 0 && $total_estimate_items <= $total_job_cost_items) {
            $is_service_completed = 1;
        } else {
            $is_service_completed = 0;
        }

        $proposal = $this->em->findProposal($proposal_id);
        $this->log_manager->add(\models\ActivityAction::PROPOSAL_ESTIMATE_MOBILE_JOB_COSTING, $logString, $proposal->getClient(), $proposal);
        $this->sendResponse([
            'error' => 0,
            'is_service_completed' => $is_service_completed,
            'job_cost_item_id' => $jobCostItem->getId(),
            'service_price_diff' => $this->getEstimationRepository()->getServiceJobCostPriceDifference($proposal_service_id),
            'proposal_price_diff' => $this->getEstimationRepository()->getProposalJobCostPriceDifference($proposal_id)

        ]);
    }

    public function updateJobCostCustomItem()
    {

        $quantity = $this->input->post('quantity');
        $total = $this->input->post('total');
        $id = $this->input->post('id');


        $jobCostItem = $this->em->getRepository('models\JobCostItem')->findOneBy(array(
            'id' => $id
        ));
        $logString = 'Job Costing Custom Item updated';
        if (!$jobCostItem) {
            $jobCostItem = new \models\JobCostItem();

            $logString = 'Saved ' . $quantity . ' Qty';

        } else {
            $logString = 'Updated ' . $jobCostItem->getActualQty() . ' Qty To ' . $quantity . ' Qty';
        }

        $proposalService = $this->em->findProposalService($jobCostItem->getProposalServiceId());

        $logString .= '<br/><strong>Item: </strong>Custom Job cost Item<br/><strong>Service: </strong>' . $proposalService->getServiceName();

        $jobCostItem->setActualQty($quantity);
        $jobCostItem->setActualTotalPrice($total);
        $jobCostItem->setPriceDifference($total);

        $this->em->persist($jobCostItem);
        $this->em->flush();

        $proposal = $this->em->findProposal($jobCostItem->getProposalId());
        $this->log_manager->add(\models\ActivityAction::PROPOSAL_ESTIMATE_MOBILE_JOB_COSTING, $logString, $proposal->getClient(), $proposal);
        $this->sendResponse([
            'error' => 0,
            'service_price_diff' => $this->getEstimationRepository()->getServiceJobCostPriceDifference($jobCostItem->getProposalServiceId()),
            'proposal_price_diff' => $this->getEstimationRepository()->getProposalJobCostPriceDifference($jobCostItem->getProposalId())

        ]);

    }

    public function save_job_cost_item()
    {
        $proposal_id = $this->input->post('proposal_id');

        $proposal_service_id = $this->input->post('proposal_service_id');
        $categoryType = $this->input->post('categoryType');

        $job_cost_item_name = $this->input->post('job_cost_item_name');
        $job_cost_item_quantity = $this->input->post('job_cost_item_quantity');
        // $job_cost_item_unit_price = $this->input->post('job_cost_item_unit_price');
        $job_cost_item_total = $this->input->post('job_cost_item_total');
        $search = ['$', ','];
        $replace = ['', ''];

        $job_cost_item_total = str_replace($search, $replace, $job_cost_item_total);
        $jobCostItem = new \models\JobCostItem();


        $logString = 'Saved ' . $job_cost_item_quantity . ' Qty';
        $proposalService = $this->em->findProposalService($proposal_service_id);

        $logString .= '<br/><strong>Item: </strong>Custom Job cost Item<br/><strong>Service: </strong>' . $proposalService->getServiceName();

        $jobCostItem->setEstimateLineItemId(0);

        $jobCostItem->setActualQty($job_cost_item_quantity);
        $jobCostItem->setActualTotalPrice($job_cost_item_total);
        $jobCostItem->setProposalServiceId($proposal_service_id);
        $jobCostItem->setCustomItemName($job_cost_item_name);
        $jobCostItem->setCategoryId($categoryType);
        $jobCostItem->setProposalId($proposal_id);
        //$jobCostItem->setActualUnitPrice($job_cost_item_unit_price);
        $jobCostItem->setPriceDifference($job_cost_item_total);
        $this->em->persist($jobCostItem);
        $this->em->flush();
        $proposal = $this->em->findProposal($jobCostItem->getProposalId());
        $this->log_manager->add(\models\ActivityAction::PROPOSAL_ESTIMATE_MOBILE_JOB_COSTING, $logString, $proposal->getClient(), $proposal);
        $this->session->set_flashdata('success', 'Job Cost Item Created Successfully!');
        redirect('proposals/job_costing/' . $proposal_id);
    }

    public function save_mobile_job_cost_item()
    {
        $proposal_id = $this->input->post('proposal_id');

        $proposal_service_id = $this->input->post('proposal_service_id');
        $categoryType = $this->input->post('categoryType');

        $job_cost_item_name = $this->input->post('job_cost_item_name');
        $job_cost_item_quantity = $this->input->post('job_cost_item_quantity');
        // $job_cost_item_unit_price = $this->input->post('job_cost_item_unit_price');
        $job_cost_item_total = $this->input->post('job_cost_item_total');
        $search = ['$', ','];
        $replace = ['', ''];

        $job_cost_item_total = str_replace($search, $replace, $job_cost_item_total);
        $jobCostItem = new \models\JobCostItem();
        $jobCostItem->setEstimateLineItemId(0);

        $logString = 'Saved ' . $job_cost_item_quantity . ' Qty';
        $proposalService = $this->em->findProposalService($proposal_service_id);

        $logString .= '<br/><strong>Item: </strong>Custom Job cost Item<br/><strong>Service: </strong>' . $proposalService->getServiceName();
        $jobCostItem->setActualQty($job_cost_item_quantity);
        $jobCostItem->setActualTotalPrice($job_cost_item_total);
        $jobCostItem->setProposalServiceId($proposal_service_id);
        $jobCostItem->setCustomItemName($job_cost_item_name);
        $jobCostItem->setCategoryId($categoryType);
        $jobCostItem->setProposalId($proposal_id);
        //$jobCostItem->setActualUnitPrice($job_cost_item_unit_price);
        $jobCostItem->setPriceDifference($job_cost_item_total);
        $this->em->persist($jobCostItem);
        $this->em->flush();
        $proposal = $this->em->findProposal($jobCostItem->getProposalId());
        $this->log_manager->add(\models\ActivityAction::PROPOSAL_ESTIMATE_MOBILE_JOB_COSTING, $logString, $proposal->getClient(), $proposal);
        $this->session->set_flashdata('success', 'Job Cost Item Created Successfully!');
        redirect('home/mobile_job_costing/' . $proposal->getProposalUuid());
    }

    public function deleteCustomJobCostItems()
    {
        $id = $this->input->post('item_id');


        $jobCostItem = $this->em->find('models\JobCostItem', $id);
        $proposal_service_id = $jobCostItem->getProposalServiceId();
        $proposal = $this->em->findProposal($jobCostItem->getProposalId());
        $this->log_manager->add(\models\ActivityAction::PROPOSAL_ESTIMATE_MOBILE_JOB_COSTING, 'Job costing Custom Item deleted', $proposal->getClient(), $proposal);
        $this->em->remove($jobCostItem);
        $this->em->flush();

        $total_estimate_items = $this->getEstimationRepository()->getProposalServiceLineItemsCount($proposal_service_id);
        $total_job_cost_items = $this->getEstimationRepository()->getProposalServiceJobCostingItemsCount($proposal_service_id);
        $total_job_cost_custom_items = $this->getEstimationRepository()->getProposalServiceJobCostingCustomItemsCount($proposal_service_id);

        $is_service_completed = 0;
        if ($total_estimate_items <= $total_job_cost_items) {

            $is_service_completed = 1;
        } elseif ($total_estimate_items == 0 && $total_job_cost_custom_items > 0) {
            $is_service_completed = 1;
        }
        $this->sendResponse([
            'error' => 0,

            'is_service_completed' => $is_service_completed,
            'proposal_service_id' => $proposal_service_id,
        ]);

    }

    public function deleteJobCostItems()
    {
        $id = $this->input->post('item_id');

        $jobCostItem = $this->em->getRepository('models\JobCostItem')->findOneBy(array(
            'estimate_line_item_id' => $id
        ));

        $proposal_service_id = $jobCostItem->getProposalServiceId();

        $proposal = $this->em->findProposal($jobCostItem->getProposalId());
        $this->log_manager->add(\models\ActivityAction::PROPOSAL_ESTIMATE_MOBILE_JOB_COSTING, 'Job costing Item deleted', $proposal->getClient(), $proposal);

        $this->em->remove($jobCostItem);
        $this->em->flush();

        $eli = $this->em->findEstimationLineItem($id);

        $total_estimate_items = $this->getEstimationRepository()->getProposalServiceLineItemsCount($proposal_service_id);
        $total_job_cost_items = $this->getEstimationRepository()->getProposalServiceJobCostingItemsCount($proposal_service_id);
        $total_job_cost_custom_items = $this->getEstimationRepository()->getProposalServiceJobCostingCustomItemsCount($proposal_service_id);

        $is_service_completed = 0;
        if ($total_estimate_items <= $total_job_cost_items) {

            $is_service_completed = 1;
        } elseif ($total_estimate_items == 0 && $total_job_cost_custom_items > 0) {
            $is_service_completed = 1;
        }
        $this->sendResponse([
            'error' => 0,
            'qunatity' => $eli->getQuantity(),
            'day' => $eli->getDay(),
            'num_people' => $eli->getNumPeople(),
            'hours' => $eli->getHoursPerDay(),
            'is_service_completed' => $is_service_completed,
            'proposal_service_id' => $proposal_service_id,
            'total_estimate_items' => $total_estimate_items,
            'total_job_cost_items' => $total_job_cost_items,
            'total_job_cost_custom_items' => $total_job_cost_custom_items,
        ]);

    }

    public function completeJobCosting($proposal_id)
    {
        $serviceJobCost = $this->em->getRepository('models\ServiceJobCost')->findOneBy(array(
            'proposal_id' => $proposal_id
        ));
        $serviceJobCost->setStatusId(\models\JobCostStatus::COMPLETE);

        $this->em->persist($serviceJobCost);
        $this->em->flush();

        $proposal = $this->em->findProposal($proposal_id);
        $proposal->setJobCostStatus(\models\JobCostStatus::COMPLETE);
        $proposal->setJobCostUsername($this->input->post('name'));
        $proposal->setJobCostForemenId($this->input->post('foreman'));
        $proposal->setJobCostNotes($this->input->post('job_costing_note'));

        $proposal->setJobCostCompletedAt(date("Y-m-d H:i:s"));

        $breakdownData = $this->getEstimationRepository()->getProposalPriceBreakdown($proposal->getProposalId());
        $actual_total_price = $this->getEstimationRepository()->getProposalJobCostActualPrice($proposal->getProposalId());
        $job_cost_oh_price = $this->getEstimationRepository()->getProposalJobCostActualOhPrice($proposal->getProposalId());

        $gross_profit = ($breakdownData['totalPrice']) - ($actual_total_price + $job_cost_oh_price);
      //  $profit_margin_percent = (($gross_profit / ($actual_total_price + $job_cost_oh_price)) * 100);
        if ($actual_total_price + $job_cost_oh_price != 0) {
            $profit_margin_percent = (($gross_profit / ($actual_total_price + $job_cost_oh_price)) * 100);
        }

        $proposal->setProfitMarginPercent($profit_margin_percent);
        $proposal->setProfitMarginValue($gross_profit);

        //Event Log
        $this->getProposalEventRepository()->jobCostingComplete($proposal, $this->account());

        $this->em->persist($proposal);
        $this->em->flush();
        $this->session->set_flashdata('success', 'Job Cost Completed');
        redirect('/proposals/job_cost_report/' . $proposal_id);
    }


    public function completeMobileJobCosting($proposal_id)
    {
        $serviceJobCost = $this->em->getRepository('models\ServiceJobCost')->findOneBy(array(
            'proposal_id' => $proposal_id
        ));

        $imageData = $this->input->post('signature');


        list($type, $imageData) = explode(';', $imageData);
        list(, $imageData) = explode(',', $imageData);
        $imageData = base64_decode($imageData);
        $signature_file_name = 'signature.png';
        $upload_dir = "uploads/job_costing/" . $proposal_id . '/';

        if (!is_dir($upload_dir)) {
            mkdir($upload_dir);
        }
        file_put_contents('uploads/job_costing/' . $proposal_id . '/' . $signature_file_name, $imageData);
        $serviceJobCost->setStatusId(\models\JobCostStatus::PENDING_APPROVAL);

        $this->em->persist($serviceJobCost);
        $this->em->flush();

        $proposal = $this->em->findProposal($proposal_id);
        $proposal->setJobCostStatus(\models\JobCostStatus::PENDING_APPROVAL);
        $proposal->setJobCostUsername($this->input->post('name'));
        $proposal->setJobCostForemenId($this->input->post('foreman'));
        $proposal->setJobCostNotes($this->input->post('job_costing_note'));
        $proposal->setJobCostSignatureFile($signature_file_name);
        //$proposal->setJobCostCompletedAt(date("Y-m-d H:i:s"));
        $this->em->persist($proposal);
        $this->em->flush();

        //Event Log
        //$this->getProposalEventRepository()->jobCostingComplete($proposal,$this->account());
        $this->session->set_flashdata('success', 'Job Cost Completed');
        redirect('/home/mobile_job_costing/' . $proposal->getProposalUuid());
    }

    public function getJobCostReportSummary($proposal_id)
    {
        $proposal = $this->em->findProposal($proposal_id);
        return $this->getEstimationRepository()->getJobCostReportSummary($proposal);
    }

    public function get_job_cost_attachments($proposal_id)
    {
        $attachments = $this->getEstimationRepository()->getJobCostAttachments($proposal_id);
        $return = '<li class="collection-header"><h4> File List</h4></li>';
        foreach ($attachments as $attachment) {
            $return .= '<li class="collection-item"><div>Alvin<a href="#!" class="secondary-content"><i class="material-icons">send</i></a></div></li>';
        }
        $this->sendResponse([
            'error' => 0,
            'data' => $return,

        ]);
    }

    public function job_cost_attachment_upload()
    {

        $proposal_id = $this->input->post('proposal_id');

        $upload_dir = "uploads/job_costing/" . $proposal_id . '/';

        if (!is_dir($upload_dir)) {
            mkdir($upload_dir, 0777, true);
        }

        $filename = $_FILES['attachment_upload']['name'];
        $filename = preg_replace('/\\.[^.\\s]{3,4}$/', '', $filename);
        $ext = pathinfo($_FILES['attachment_upload']['name'], PATHINFO_EXTENSION);
        $imagename = $filename . time() . "." . $ext;
        $file_path = $upload_dir . $imagename;
        if (is_uploaded_file($_FILES['attachment_upload']['tmp_name'])) {

            if (move_uploaded_file($_FILES['attachment_upload']['tmp_name'], $file_path)) {


                $jobCostAttachment = new \models\JobCostAttachment();
                $jobCostAttachment->setProposalId($proposal_id);
                $jobCostAttachment->setFileName($imagename);
                $jobCostAttachment->setCreatedAt(date("Y-m-d H:i:s"));
                $this->em->persist($jobCostAttachment);
                $this->em->flush();

                $proposal = $this->em->findProposal($proposal_id);
                $this->log_manager->add(\models\ActivityAction::PROPOSAL_ESTIMATE_MOBILE_JOB_COSTING, 'Job Costing Attachment Uploaded - ' . $imagename, $proposal->getClient(), $proposal);
                $attachments = $this->getEstimationRepository()->getJobCostAttachments($proposal_id);
                $return = '<li class="collection-header"><p style="font-size:14px;font-weight:bold">Attachment List</p></li>';
                foreach ($attachments as $attachment) {
                    $return .= '<li class="collection-item"><div>' . $attachment->getFileName() . '<a   href="javascript:void(0);" onclick="delete_attachment(' . $attachment->getId() . ')" class="secondary-content tiptip" title="Delete" ><i class="material-icons">delete</i></a><a download href="' . base_url() . 'uploads/job_costing/' . $proposal_id . '/' . $attachment->getFileName() . '" target="_blank" class="secondary-content tiptip" title="Download" ><i class="material-icons">file_download</i></a></div></li>';
                }
                $this->sendResponse([
                    'error' => 0,
                    'attachments' => $return,
                    'file_id' => $jobCostAttachment->getId(),
                    'imagename' => "../../uploads/job_costing/" . $proposal_id . '/' . $imagename,

                ]);

            }
        }

    }

    public function job_cost_image_upload()
    {

        $job_cost_item_id = $this->input->post('job_cost_item_id');
        if ($job_cost_item_id == 0) {

        }
        $jobCostItem = $this->em->find('models\JobCostItem', $job_cost_item_id);
        $proposal_id = $jobCostItem->getProposalId();
        $upload_dir = "uploads/job_costing/" . $proposal_id . '/';
        //$job_cost_item_id = $this->input->post('job_cost_item_id');

        if (!is_dir($upload_dir)) {
            mkdir($upload_dir);
        }

        $allowed_image_extension = array(
            "png",
            "jpg",
            "jpeg",
            "PNG",
            "JPG",
            "JPEG"
        );

        // Get image file extension
        $file_extension = pathinfo($_FILES['images_upload']["name"], PATHINFO_EXTENSION);
        //foreach($_FILES['images_upload']['name'] as $key=>$val){
        // Validate file input to check if is not empty
        if (!file_exists($_FILES['images_upload']["tmp_name"])) {
            $this->sendResponse([
                'error' => 1,
                "message" => "Choose image file to upload."
            ]);
        }    // Validate file input to check if is with valid extension
        else if (!in_array($file_extension, $allowed_image_extension)) {
            $this->sendResponse([
                'error' => 1,
                "message" => "Upload valiid images. Only PNG and JPEG are allowed."
            ]);

        }    // Validate image file size
        else if (($_FILES['images_upload']["size"] > 10000000)) {
            $this->sendResponse([
                'error' => 1,
                "message" => "Image size exceeds 10MB"
            ]);
        }    // Validate image file dimension
        else {


            $filename = $_FILES['images_upload']['name'];
            $filename = preg_replace('/\\.[^.\\s]{3,4}$/', '', $filename);
            $ext = pathinfo($_FILES['images_upload']['name'], PATHINFO_EXTENSION);
            $imagename = $filename . time() . "." . $ext;
            $file_path = $upload_dir . $imagename;
            if (is_uploaded_file($_FILES['images_upload']['tmp_name'])) {
                if (move_uploaded_file($_FILES['images_upload']['tmp_name'], $file_path)) {
                    $upload_images[] = $file_path;
                    $jobCostItemFile = new \models\JobCostItemFile();
                    $jobCostItemFile->setJobCostItemId($job_cost_item_id);
                    $jobCostItemFile->setFileName($imagename);
                    $jobCostItemFile->setCreatedAt(date("Y-m-d H:i:s"));
                    $this->em->persist($jobCostItemFile);
                    $this->em->flush();

                }

            }

            $proposal = $this->em->findProposal($jobCostItem->getProposalId());
            $this->log_manager->add(\models\ActivityAction::PROPOSAL_ESTIMATE_MOBILE_JOB_COSTING, 'Job costing Item File Added', $proposal->getClient(), $proposal);
            $this->sendResponse([
                'error' => 0,
                'file_id' => $jobCostItemFile->getId(),
                'imagename' => "../../uploads/job_costing/" . $proposal_id . '/' . $imagename,

            ]);

        }
    }

    public function deleteJobCostAttachment()
    {
        $file_id = $this->input->post('file_id');
        $file = $this->em->getRepository('models\JobCostAttachment')->findOneBy(array(
            'id' => $file_id
        ));
        //$upload_dir = site_url("uploads/job_costing/").'/';

        $upload_dir = "uploads/job_costing/" . $file->getProposalId();
        unlink($upload_dir . '/' . $file->getFileName());

        $proposal = $this->em->findProposal($file->getProposalId());
        $this->log_manager->add(\models\ActivityAction::PROPOSAL_ESTIMATE_MOBILE_JOB_COSTING, 'Job Costing Attachment Deleted - ' . $file->getFileName(), $proposal->getClient(), $proposal);

        $this->em->remove($file);
        $this->em->flush();
        $attachments = $this->getEstimationRepository()->getJobCostAttachments($file->getProposalId());
        $return = '<li class="collection-header"><p style="font-size:14px;font-weight:bold">Attachment List</p></li>';
        foreach ($attachments as $attachment) {
            $return .= '<li class="collection-item"><div>' . $attachment->getFileName() . '<a   href="javascript:void(0);" onclick="delete_attachment(' . $attachment->getId() . ')" class="secondary-content tiptip" title="delete"><i class="material-icons">delete</i></a><a download href="' . base_url() . 'uploads/job_costing/' . $file->getProposalId() . '/' . $attachment->getFileName() . '" target="_blank" class="secondary-content tiptip" title="Download"><i class="material-icons">file_download</i></a></div></li>';
        }
        $this->sendResponse([
            'error' => 0,
            'attachments' => $return,

        ]);

    }

    public function deleteJobCostItemFile()
    {
        $file_id = $this->input->post('file_id');
        $file = $this->em->getRepository('models\JobCostItemFile')->findOneBy(array(
            'id' => $file_id
        ));
        //$upload_dir = site_url("uploads/job_costing/").'/';
        $jobCostItem = $this->em->find('models\JobCostItem', $file->getJobCostItemId());

        $upload_dir = "uploads/job_costing/" . $jobCostItem->getProposalId();
        unlink($upload_dir . $file->getFileName());

        $proposal = $this->em->findProposal($jobCostItem->getProposalId());
        $this->log_manager->add(\models\ActivityAction::PROPOSAL_ESTIMATE_MOBILE_JOB_COSTING, 'Job costing Item File Deleted', $proposal->getClient(), $proposal);

        $this->em->remove($file);
        $this->em->flush();

        $this->sendResponse([
            'error' => 0

        ]);

    }

    public function job_cost_history($proposalId, $filterBy = null, $filterId = null)
    {

        $data = array();
        $logs = $this->account()->getJobCostHistoryData($this->account(), $proposalId);

        //$logs = $this->account()->getHistoryData();

        foreach ($logs as $log) {
            $data[] = [
                '0' => date('m/d/Y h:i:s A', ($log->timeAdded + $this->account()->getTimeZoneOffset())),
                '1' => $log->timeAdded + $this->account()->getTimeZoneOffset(),
                '2' => ($log->userName) ?: ($log->account ? $log->accountFirstName . ' ' . $log->accountLastName : 'No User'),
                '3' => mapIP($log->ip),
                '4' => ($log->client) ? $log->clientCompanyName : 'None',
                '5' => ($log->proposal) ? $log->projectName : 'None',
                $log->details,
            ];
        }
        $total = $this->account()->getJobCostHistoryDataTotal(false, $this->account(), $proposalId);
        $filterTotal = $this->account()->getJobCostHistoryDataTotal(true, $this->account(), $proposalId);
        $json = [];
        $json["iTotalRecords"] = $total;
        $json["iTotalDisplayRecords"] = $filterTotal;
        $json['aaData'] = $data;
        $json['sEcho'] = $this->input->get('sEcho');
        echo json_encode($json);
    }

    public function send_mobile_job_costing_link()
    {

        $proposal_id = $this->input->post('proposal_id');
        $foremen_id = $this->input->post('foremen_id');
        $email = $this->input->post('email');

        //$email ='sunilyadav.acs@gmail.com';
        $proposal = $this->em->findProposal($proposal_id);
        $foremen_email = '';

        if ($foremen_id != 0) {
            $foremen = $this->em->getRepository('models\Foremen')->findOneBy(array(
                'id' => $foremen_id,
            ));
            $foremen_email = $foremen->getEmail();
        }


        $proposal->getProposalUuid();
        $subject = 'Job Costing for ' . $proposal->getClient()->getClientAccount()->getName() . ' | ' . $proposal->getProjectName();
        $message = '
        <p>Hello!</p>
        <p><a style="border-radius: 5px;padding: 5px;color: #fff;background: #25AAE1;text-decoration: none;" href="' . site_url('home/mobile_job_costing/' . $proposal->getProposalUuid()) . '">Click here for Job Costing.</a></p>
        <p>Please do not reply to this email. It is an automated message sent out from ' . SITE_NAME . '.</p>
        ';
        $headers = "Content-Type: text/html\r\n";
        //$headers .= "From: " . $this->account()->getFullName() .  " <" . $this->account()->getEmail() . ">\r\n";
        $headers .= "From: " . $this->account()->getFullName() . " <no-reply@" . SITE_EMAIL_DOMAIN . ">\r\n";
        $mailString = '';
        if ($email) {
            $mailString .= $email;
            $emailData = [
                'to' => $email,
                'fromName' => SITE_NAME,
                'fromEmail' => 'no-reply@' . SITE_EMAIL_DOMAIN,
                'subject' => $subject,
                'body' => $message,
                'header' => $headers,
            ];
            $this->getEmailRepository()->send($emailData);
            $this->log_manager->add(\models\ActivityAction::PROPOSAL_ESTIMATE_SEND_JOB_COSTING_LINK,
                'Sent Job costing Link for project ' . $proposal->getProjectName() . ' to: ' . $mailString,
                $proposal->getClient(), $proposal);

        }

        if ($foremen_email) {

            $mailString .= $foremen_email;
            $emailData = [
                'to' => $foremen_email,
                'fromName' => SITE_NAME,
                'fromEmail' => 'no-reply@' . SITE_EMAIL_DOMAIN,
                'subject' => $subject,
                'body' => $message,
                'header' => $headers,
            ];
            $this->getEmailRepository()->send($emailData);
            $this->log_manager->add(\models\ActivityAction::PROPOSAL_ESTIMATE_SEND_JOB_COSTING_LINK,
                'Sent Job costing Link for project ' . $proposal->getProjectName() . ' to: ' . $mailString,
                $proposal->getClient(), $proposal);

        }

        // $this->session->set_flashdata('success', 'Job Cost Link Sent');
        // redirect('/proposals');
        $json = [];
        $json["success"] = true;

        echo json_encode($json);

    }

    public function get_resend_details()
    {
        $resend_id = $this->input->post('resend_id');
        $resend = $this->em->find('models\ProposalGroupResend', $resend_id);
        $json = [];
        if ($resend) {
            $json["success"] = true;
            $json["subject"] = $resend->getSubject();
            $json["resend_name"] = $resend->getResendName();
            $json["email_cc"] = $resend->getEmailCc();
            $json["custom_sendor"] = $resend->getCustomSender();
            $json["custom_sendor_name"] = $resend->getCustomSenderName();
            $json["custom_sendor_email"] = $resend->getCustomSenderemail();
            $json["email_content"] = $resend->getEmailContent();
        } else {
            $json["success"] = false;
        }


        echo json_encode($json);
    }

    public function get_client_resend_details()
    {
        $resend_id = $this->input->post('resend_id');
        $resend = $this->em->find('models\ClientGroupResend', $resend_id);
        $json = [];
        if ($resend) {
            $json["success"] = true;
            $json["subject"] = $resend->getSubject();
            $json["resend_name"] = $resend->getResendName();
            $json["email_cc"] = $resend->getEmailCc();
            $json["custom_sendor"] = $resend->getCustomSender();
            $json["custom_sendor_name"] = $resend->getCustomSenderName();
            $json["custom_sendor_email"] = $resend->getCustomSenderemail();
            $json["email_content"] = $resend->getEmailContent();
        } else {
            $json["success"] = false;
        }


        echo json_encode($json);
    }


    public function get_lead_resend_details()
    {
        $resend_id = $this->input->post('resend_id');
        $resend = $this->em->find('models\LeadGroupResend', $resend_id);
        $json = [];
        if ($resend) {
            $json["success"] = true;
            $json["subject"] = $resend->getSubject();
            $json["resend_name"] = $resend->getResendName();
            $json["email_cc"] = $resend->getEmailCc();
            $json["custom_sendor"] = $resend->getCustomSender();
            $json["custom_sendor_name"] = $resend->getCustomSenderName();
            $json["custom_sendor_email"] = $resend->getCustomSenderemail();
            $json["email_content"] = $resend->getEmailContent();
        } else {
            $json["success"] = false;
        }


        echo json_encode($json);
    }

    public function get_prospect_resend_details()
    {
        $resend_id = $this->input->post('resend_id');
        $resend = $this->em->find('models\ProspectGroupResend', $resend_id);
        $json = [];
        if ($resend) {
            $json["success"] = true;
            $json["subject"] = $resend->getSubject();
            $json["resend_name"] = $resend->getResendName();
            $json["email_cc"] = $resend->getEmailCc();
            $json["custom_sendor"] = $resend->getCustomSender();
            $json["custom_sendor_name"] = $resend->getCustomSenderName();
            $json["custom_sendor_email"] = $resend->getCustomSenderemail();
            $json["email_content"] = $resend->getEmailContent();
        } else {
            $json["success"] = false;
        }


        echo json_encode($json);
    }

    public function get_admin_resend_details()
    {
        $resend_id = $this->input->post('resend_id');
        $resend = $this->em->find('models\AdminGroupResend', $resend_id);
        $filters = json_decode($resend->getFilters());

        $json = [];
        if ($resend) {
            $json["success"] = true;
            $json["subject"] = $resend->getSubject();
            $json["resend_name"] = $resend->getResendName();
            $json["email_cc"] = $resend->getEmailCc();
            $json["custom_sendor"] = $resend->getCustomSender();
            $json["custom_sendor_name"] = $resend->getCustomSenderName();
            $json["custom_sendor_email"] = $resend->getCustomSenderemail();
            $json["email_content"] = $resend->getEmailContent();
            if ($filters) {
                $json["user_class"] = $filters[0]->user_class;
                $json["expired"] = $filters[0]->expired;
            }

        } else {
            $json["success"] = false;
        }


        echo json_encode($json);
    }


    public function get_resend_counts_details()
    {
        $resend_id = $this->input->post('resend_id');
        $clicked = $this->input->post('clicked');
        $resend = $this->em->find('models\ProposalGroupResend', $resend_id);

        $data = $this->getEstimationRepository()->getUnopenedProposalsStatusCount($resend_id, $clicked);
        $json = [];
        if ($resend) {
            $json["success"] = true;
            $json["total_opened"] = $data["total_opened"];
            $json["total_resending"] = $data["total_resending"];
            $json["total_not_sent"] = $data["total_not_sent"];
            $json["total_proposals"] = $data["total_proposals"];
            $json["total_excluded"] = $data["total_excluded"];
            $json["subject"] = $resend->getSubject();
            $json["resend_name"] = $resend->getResendName();
            $json["email_cc"] = $resend->getEmailCc();
            $json["custom_sendor"] = $resend->getCustomSender();
            $json["custom_sendor_name"] = $resend->getCustomSenderName();
            $json["custom_sendor_email"] = $resend->getCustomSenderemail();
            $json["email_content"] = $resend->getEmailContent();
            $json["created_at"] = $resend->getCreated()->format('m/d/y g:ia');
            $json["filters"] = $resend->getFilters();
            $json["excluded_override"] = $resend->getExcludedOverride();
        } else {
            $json["success"] = false;
        }


        echo json_encode($json);
    }

    public function get_resend_bounced_counts_details()
    {
        $resend_id = $this->input->post('resend_id');

        $resend = $this->em->find('models\ProposalGroupResend', $resend_id);

        $data = $this->getEstimationRepository()->getBouncedProposalsStatusCount($resend_id);
        $json = [];
        if ($resend) {
            $json["success"] = true;
            $json["total_bounced"] = $data["total_bounced"];
            $json["total_resending"] = $data["total_resending"];
            $json["total_not_sent"] = $data["total_not_sent"];
            $json["total_proposals"] = $data["total_proposals"];

        } else {
            $json["success"] = false;
        }


        echo json_encode($json);
    }

    public function get_campaign_details()
    {
        $resend_id = $this->input->post('resend_id');
        $resend = $this->em->find('models\ProposalGroupResend', $resend_id);

        $json = [];
        if ($resend) {
            $json["success"] = true;
            $json["resend_name"] = $resend->getResendName();
            $json["created_at"] = $resend->getCreated()->format('m/d/y g:ia');
            $json["status_stats"] = $this->get_campaign_proposal_status_stats($resend_id);
            $json['resendStats'] = $this->getProposalRepository()->getResendStats($resend, $this->account());
        } else {
            $json["success"] = false;
        }


        echo json_encode($json);
    }


    public function get_client_resend_counts_details()
    {
        $resend_id = $this->input->post('resend_id');
        $clicked = $this->input->post('clicked');
        $resend = $this->em->find('models\ClientGroupResend', $resend_id);

        $data = $this->getClientRepository()->getUnopenedClientsStatusCount($resend_id, $clicked);
        $json = [];
        if ($resend) {
            $json["success"] = true;
            $json["total_unopened"] = $data["total_unopened"];
            $json["total_resending"] = $data["total_unopened"];
            $json["total_not_sent"] = 0;
            $json["total_emails"] = $data["total_emails"];
            $json["total_excluded"] = $data["total_excluded"];
            $json["subject"] = $resend->getSubject();
            $json["resend_name"] = $resend->getResendName();
            $json["email_cc"] = $resend->getEmailCc();
            $json["custom_sendor"] = $resend->getCustomSender();
            $json["custom_sendor_name"] = $resend->getCustomSenderName();
            $json["custom_sendor_email"] = $resend->getCustomSenderemail();
            $json["email_content"] = $resend->getEmailContent();
            $json["created_at"] = $resend->getCreated()->format('m/d/y g:ia');
            $json["filters"] = $resend->getFilters();
            $json["excluded_override"] = $resend->getExcludedOverride();
        } else {
            $json["success"] = false;
        }


        echo json_encode($json);
    }

    public function get_lead_resend_counts_details()
    {
        $resend_id = $this->input->post('resend_id');
        $clicked = $this->input->post('clicked');
        $resend = $this->em->find('models\LeadGroupResend', $resend_id);

        $data = $this->getLeadRepository()->getUnopenedLeadsStatusCount($resend_id, $clicked);
        $json = [];
        if ($resend) {
            $json["success"] = true;
            $json["total_unopened"] = $data["total_unopened"];
            $json["total_resending"] = $data["total_unopened"];
            $json["total_not_sent"] = 0;
            $json["total_emails"] = $data["total_emails"];
            $json["subject"] = $resend->getSubject();
            $json["resend_name"] = $resend->getResendName();
            $json["email_cc"] = $resend->getEmailCc();
            $json["custom_sendor"] = $resend->getCustomSender();
            $json["custom_sendor_name"] = $resend->getCustomSenderName();
            $json["custom_sendor_email"] = $resend->getCustomSenderemail();
            $json["email_content"] = $resend->getEmailContent();
            $json["created_at"] = $resend->getCreated()->format('m/d/y g:ia');
            $json["filters"] = $resend->getFilters();
        } else {
            $json["success"] = false;
        }


        echo json_encode($json);
    }

    public function get_prospect_resend_counts_details()
    {
        $resend_id = $this->input->post('resend_id');
        $clicked = $this->input->post('clicked');
        $resend = $this->em->find('models\ProspectGroupResend', $resend_id);

        $data = $this->getProspectRepository()->getUnopenedProspectsStatusCount($resend_id, $clicked);
        $json = [];
        if ($resend) {
            $json["success"] = true;
            $json["total_unopened"] = $data["total_unopened"];
            $json["total_resending"] = $data["total_unopened"];
            $json["total_not_sent"] = 0;
            $json["total_emails"] = $data["total_emails"];
            $json["subject"] = $resend->getSubject();
            $json["resend_name"] = $resend->getResendName();
            $json["email_cc"] = $resend->getEmailCc();
            $json["custom_sendor"] = $resend->getCustomSender();
            $json["custom_sendor_name"] = $resend->getCustomSenderName();
            $json["custom_sendor_email"] = $resend->getCustomSenderemail();
            $json["email_content"] = $resend->getEmailContent();
            $json["created_at"] = $resend->getCreated()->format('m/d/y g:ia');
            $json["filters"] = $resend->getFilters();
        } else {
            $json["success"] = false;
        }


        echo json_encode($json);
    }

    public function get_admin_resend_counts_details()
    {
        $resend_id = $this->input->post('resend_id');
        $clicked = $this->input->post('clicked');
        $resend = $this->em->find('models\AdminGroupResend', $resend_id);

        $data = $this->getCompanyRepository()->getUnopenedAdminStatusCount($resend_id, $clicked);
        $json = [];
        if ($resend) {
            $json["success"] = true;
            $json["total_unopened"] = $data["total_unopened"];
            $json["total_resending"] = $data["total_unopened"] - $data["removed_account_emails"];
            $json["total_deleted_account"] = $data["removed_account_emails"];
            $json["total_not_sent"] = 0;
            $json["total_emails"] = $data["total_emails"];
            $json["subject"] = $resend->getSubject();
            $json["resend_name"] = $resend->getResendName();
            $json["email_cc"] = $resend->getEmailCc();
            $json["custom_sendor"] = $resend->getCustomSender();
            $json["custom_sendor_name"] = $resend->getCustomSenderName();
            $json["custom_sendor_email"] = $resend->getCustomSenderemail();
            $json["email_content"] = $resend->getEmailContent();
            //$json["created_at"] = $resend->getCreated()->format('m/d/y g:ia');
            $date = $resend->getCreated()->format('m/d/y g:ia');
            $json["created_at"] = date('m/d/y g:ia', strtotime($date) + TIMEZONE_OFFSET);
            $json["filters"] = $resend->getFilters();
        } else {
            $json["success"] = false;
        }


        echo json_encode($json);
    }

    public function delete_campaign()
    {
        $resend_id = $this->input->post('resend_id');
        $resend = $this->em->find('models\ProposalGroupResend', $resend_id);
        $json = [];
        if ($resend) {
            $json["success"] = true;
            $resend->setIsDeleted(1);
            $this->em->persist($resend);
            $this->em->flush();

            // Log it
            $this->log_manager->add(
                \models\ActivityAction::PROPOSAL_CAMPAIGN_DELETE,
                'Proposal Campaign "' . $resend->getResendName() . '" deleted',
                null,
                null,
                $this->account()->getCompany(),
                $this->account()
            );
        } else {
            $json["success"] = false;
        }

        echo json_encode($json);
    }

    public function delete_client_campaign()
    {
        $resend_id = $this->input->post('resend_id');
        $resend = $this->em->find('models\ClientGroupResend', $resend_id);
        $json = [];
        if ($resend) {
            $json["success"] = true;
            $resend->setIsDeleted(1);

            $this->em->persist($resend);
            $this->em->flush();
        } else {
            $json["success"] = false;
        }


        echo json_encode($json);
    }


    public function delete_lead_campaign()
    {
        $resend_id = $this->input->post('resend_id');
        $resend = $this->em->find('models\LeadGroupResend', $resend_id);
        $json = [];
        if ($resend) {
            $json["success"] = true;
            $resend->setIsDeleted(1);

            $this->em->persist($resend);
            $this->em->flush();
        } else {
            $json["success"] = false;
        }


        echo json_encode($json);
    }

    public function delete_prospect_campaign()
    {
        $resend_id = $this->input->post('resend_id');
        $resend = $this->em->find('models\ProspectGroupResend', $resend_id);
        $json = [];
        if ($resend) {
            $json["success"] = true;
            $resend->setIsDeleted(1);

            $this->em->persist($resend);
            $this->em->flush();
        } else {
            $json["success"] = false;
        }


        echo json_encode($json);
    }

    public function delete_admin_campaign()
    {
        $resend_id = $this->input->post('resend_id');
        $resend = $this->em->find('models\AdminGroupResend', $resend_id);
        $json = [];
        if ($resend) {
            $json["success"] = true;
            $resend->setIsDeleted(1);

            $this->em->persist($resend);
            $this->em->flush();
        } else {
            $json["success"] = false;
        }


        echo json_encode($json);
    }

    public function getProposalEventsByType()
    {
        $data = [];
        $proposal_id = $this->input->post('proposal_id');
        $types = $this->input->post('types');

        if (!$types) {
            $data["success"] = false;
            echo json_encode($data);

        } else {
            $types = implode(",", $types);

            $data["events"] = $this->getProposalRepository()->getProposalEventsByType($proposal_id, $types);
            $data["success"] = true;
            echo json_encode($data);
        }

    }

    public function delete_proposal_images()
    {

        $ids = $this->input->post('ids');
        $proposal = $this->em->findProposal($this->input->post('proposalId'));
        /* @var $proposal \models\Proposals */
        $response = new JsonResponse();
        $count = 0;

        foreach ($ids as $id) {

            $image = $this->em->getRepository('models\Proposals_images')->findOneBy(array(
                'imageId' => $id,
            ));

            // Pass into the helper
            $this->em->remove($image);

            $count++;
        }
        $this->em->flush();

        $proposal->setImageCount($this->getProposalRepository()->getRealImageCount($proposal));
        $proposal->setRebuildFlag(1);
        $this->em->persist($proposal);
        $this->em->flush();

        $logString = $count . ' Proposal Image Group Delete';
        $this->log_manager->add(\models\ActivityAction::PROPOSAL_IMAGE_GROUP_DELETE, $logString, $proposal->getClient(), $proposal);

        $response->success = true;
        $response->count = $count;

        $response->send();
    }


    public function show_proposal_images()
    {
        $ids = $this->input->post('ids');

        $response = new JsonResponse();
        $count = 0;

        foreach ($ids as $id) {

            $image = $this->em->findProposalImage($id);
            $image->setActive(1);
            $this->em->persist($image);
            $count++;
        }
        $this->em->flush();

        $proposal = $this->em->findProposal($this->input->post('proposalId'));

        // Set the rebuild flag
        if ($proposal) {
            $proposal->setRebuildFlag(1);
            $this->em->persist($proposal);
            $this->em->flush();
        }

        $logString = $count . ' Images show in proposal';
        $this->log_manager->add(\models\ActivityAction::PROPOSAL_IMAGE_ADD_TO_PROPOSAL, $logString, $proposal->getClient(), $proposal);

        $response->success = true;
        $response->count = $count;

        $response->send();
    }

    public function show_work_order_images()
    {
        $ids = $this->input->post('ids');


        $response = new JsonResponse();
        $count = 0;

        foreach ($ids as $id) {

            $image = $this->em->findProposalImage($id);
            $image->setActivewo(1);
            $this->em->persist($image);
            $count++;
        }
        $this->em->flush();

        $proposal = $this->em->findProposal($this->input->post('proposalId'));

        // Set the rebuild flag
        if ($proposal) {
            $proposal->setRebuildFlag(1);
            $this->em->persist($proposal);
            $this->em->flush();
        }

        $logString = $count . ' Images show in Work Order';
        $this->log_manager->add(\models\ActivityAction::PROPOSAL_IMAGE_ADD_TO_WORKORDER, $logString, $proposal->getClient(), $proposal);
        $response->success = true;
        $response->count = $count;

        $response->send();
    }

    public function hide_proposal_images()
    {
        $ids = $this->input->post('ids');


        $response = new JsonResponse();
        $count = 0;

        foreach ($ids as $id) {

            $image = $this->em->findProposalImage($id);


            $image->setActive(0);

            $this->em->persist($image);

            $count++;
        }
        $this->em->flush();

        $proposal = $this->em->findProposal($this->input->post('proposalId'));
        $logString = $count . ' Images Remove From Proposal';
        $this->log_manager->add(\models\ActivityAction::PROPOSAL_IMAGE_REMOVE_FROM_PROPOSAL, $logString, $proposal->getClient(), $proposal);

        $response->success = true;
        $response->count = $count;

        $response->send();
    }

    public function hide_work_order_images()
    {
        $ids = $this->input->post('ids');


        $response = new JsonResponse();
        $count = 0;

        foreach ($ids as $id) {

            $image = $this->em->findProposalImage($id);


            $image->setActivewo(0);

            $this->em->persist($image);

            $count++;
        }
        $this->em->flush();

        $proposal = $this->em->findProposal($this->input->post('proposalId'));
        $logString = $count . ' Images Remove From Work Order';
        $this->log_manager->add(\models\ActivityAction::PROPOSAL_IMAGE_REMOVE_FROM_WORKORDER, $logString, $proposal->getClient(), $proposal);

        $response->success = true;
        $response->count = $count;

        $response->send();
    }


    public function update_proposal_image_layout()
    {
        $ids = $this->input->post('ids');
        $proposal = $this->em->findProposal($this->input->post('proposalId'));


        $proposal->setImagesLayout($this->input->post('image_layout'));


        $this->em->persist($proposal);
        $this->em->flush();

        $response = new JsonResponse();
        $count = 0;
        $layouts = array(
            0 => '1 Image Per Page',
            1 => '2 Images Per Page',
            2 => '4 Images Per Page',
        );

        $logString = 'Update default Image layout To ' . $layouts[$this->input->post('image_layout')];
        $this->log_manager->add(\models\ActivityAction::PROPOSAL_IMAGE_LAYOUT_CHANGE, $logString, $proposal->getClient(), $proposal);
        foreach ($ids as $id) {

            $image = $this->em->findProposalImage($id);

            $old_layout = $image->getImageLayout();

            $image->setImageLayout($this->input->post('image_layout'));

            // $logString = 'Update default Image layout From '.$layouts[$old_layout].' To '.$layouts[$this->input->post('image_layout')];
            // $this->log_manager->add('proposal_image', $logString, $proposal->getClient(), $proposal);

            $this->em->persist($image);
        }
        $this->em->flush();

        echo json_encode($response);
    }

    public function update_selected_image_layout()
    {
        $ids = $this->input->post('ids');
        $image_layout = $this->input->post('image_layout');

        $response = new JsonResponse();
        $count = 0;

        foreach ($ids as $id) {
            $image = $this->em->findProposalImage($id);
            $image->setImageLayout($image_layout);
            $this->em->persist($image);
            $count++;
        }
        $this->em->flush();
        $layouts = array(
            0 => '1 Image Per Page',
            1 => '2 Images Per Page',
            2 => '4 Images Per Page',
        );

        $proposal = $this->em->findProposal($this->input->post('proposalId'));

        // Set the rebuild flag
        if ($proposal) {
            $proposal->setRebuildFlag(1);
            $this->em->persist($proposal);
            $this->em->flush();
        }


        $logString = $count . ' Images Layout updated To ' . $layouts[$this->input->post('image_layout')];
        $this->log_manager->add(\models\ActivityAction::PROPOSAL_IMAGE_LAYOUT_CHANGE, $logString, $proposal->getClient(), $proposal);

        $response->success = true;
        $response->count = $count;

        echo json_encode($response);
    }


    public function proposalDuplicateService()
    {
        $response = [];
        $initial_service = $this->em->find('models\Proposal_services', $this->input->post('serviceId'));
        //Save service to database.
        $proposal_service = new \models\Proposal_services();
        $proposal_service->setOrd(99);
        $proposal_service->setPrice($initial_service->getPrice());
        $proposal_service->setAmountQty($initial_service->getAmountQty());
        $proposal_service->setPricingType($initial_service->getPricingType());
        $proposal_service->setMaterial($initial_service->getMaterial());
        $proposal_service->setProposal($initial_service->getProposal());
        $proposal_service->setInitialService($initial_service->getInitialService());
        $proposal_service->setOptional($initial_service->getOptional());
        $proposal_service->setNoPrice($initial_service->getNoPrice());

        $proposal_service->setIsEstimate($initial_service->getIsEstimate());
        $proposal_service->setIsHideInProposal($initial_service->getIsHideInProposal());
        $proposal_service->setExcludeFromTotal($initial_service->getExcludeFromTotal());
        $proposal_service->setApproved($initial_service->getApproved());
        $approved = 1; // Flag for response
        //save service

        $proposal_service->setServiceName('Copy of ' . $initial_service->getServiceName());


        // Is it tax?
        $proposal_service->setTax(0);
        if ($initial_service->getTax()) {
            $proposal_service->setTax(1);
        }

        $this->em->persist($proposal_service);
        //mark proposal for rebuild
        $proposal = $this->em->findProposal($this->input->post('proposal'));
        if ($proposal) {
            $proposal->setRebuildFlag(1);
            if ($this->account()->getCompany()->hasQb()) {
                if ($this->account()->getCompany()->getQbType() == 'desktop') {
                    $proposal->updateQBDSyncFlag();

                }else{
                    $proposal->updateQBSyncFlag();
                }
            }
            $this->em->persist($proposal);
        }
        $this->em->flush();

        $response['serviceName'] = $proposal_service->getServiceName();
        $response['proposalId'] = $proposal_service->getProposal();
        $response['id'] = $proposal_service->getServiceId();
        $texts = array();
        $k = 0;
        $txts = $this->em->createQuery('SELECT t FROM models\Proposal_services_texts t WHERE t.serviceId=' . $this->input->post('serviceId') . ' ORDER BY t.ord')->getResult();
        if (!$txts) {
            $txts = array();
        }
        foreach ($txts as $textValue) {

            $k++;
            $text = new \models\Proposal_services_texts();
            $text->setServiceId($proposal_service->getServiceId());
            $text->setText(trim($textValue->getText()));
            $text->setOrd($k);
            $texts[$k] = $text;
            $this->em->persist($texts[$k]);
        }
        $k = 0;
        $fields = array();
        //$fds = $this->input->post('fields');

        $fds = $this->em->createQuery("SELECT t FROM models\Proposal_services_fields t WHERE t.serviceId=" . $this->input->post('serviceId'))->getResult();
        //print_r($fds);die;
        if (!$fds) {
            $fds = array();
        }
        foreach ($fds as $fd) {
            $k++;
            $field = new \models\Proposal_services_fields();
            $field->setServiceId($proposal_service->getServiceId());
            $field->setFieldCode($fd->getFieldCode());
            $field->setFieldValue($fd->getFieldValue());
            $fields[$k] = $field;
            $this->em->persist($fields[$k]);
        }

        $additionalText = '';

        // Handle Tax stuff //
        // Only check if the edited service isn't a tax service
        if (!$initial_service->getTax()) {
            // Now check if the proposal has a tax service
            if ($proposal->hasTaxService()) {
                $additionalText = '<br /><p style="text-align: center">Remember to edit your tax service if necessary</p>';
            }
        }

        $this->log_manager->add(\models\ActivityAction::ADD_PROPOSAL_SERVICE,
            'Added "' . $proposal_service->getServiceName() . '" to the proposal.', $proposal->getClient(), $proposal);
        $this->em->flush();
        updateProposalPrice($initial_service->getProposal());
        $this->em->refresh($proposal);
        $proposal_approval = 1;
        // Approval checks if the proposal owner requires approval
        if ($proposal->getOwner()->requiresApproval()) {

            // If it's an admin, approve it
            if ($this->account()->isAdministrator()) {
                $this->getProposalRepository()->approveService($proposal_service->getServiceId());
            } else {
                // Check the total price to see if this service need approval
                if ($proposal->getPrice() >= $this->account()->getApprovalLimit()) {
                    $this->getProposalRepository()->unapproveService($proposal_service->getServiceId());
                    $approved = 0;
                    $proposal->setApproved(0);
                    $this->em->persist($proposal);
                    $this->em->flush();
                    $proposal_approval = 0;
                } else {
                    // Otherwise we're ok
                    $this->getProposalRepository()->approveService($proposal_service->getServiceId());
                }
            }
            // Update the flag
            $this->getProposalRepository()->updateUnapprovedServices($proposal);

        }

        $this->getEstimationRepository()->updateProposalEstimate($proposal, false);
        // Additional Values
        $response['optional'] = $proposal_service->getOptional();
        $response['noPrice'] = $proposal_service->getNoPrice();
        $response['approved'] = $approved;
        $response['proposal_approval'] = $proposal_approval;

        //$this->session->set_flashdata('success', '<p style="text-align: center; padding-top: 10px;">Service Added!' . $additionalText);
        echo json_encode($response);
    }

    public function get_resend_lists()
    {
        $resends = $this->getEstimationRepository()->getCompanyResendList($this->account()->getCompany(), $this->account());
        $newData = [];
        foreach ($resends as $resend) {
            $newData[] = array(
                'id' => $resend->getId(),
                'resend_name' => $resend->getResendName(),
            );
        }
        echo json_encode($newData);
    }

    public function get_client_resend_lists()
    {
        $data = $this->getClientRepository()->getCompanyClientResendList($this->account()->getCompany(), $this->account());
        echo json_encode($data);
    }

    public function get_lead_resend_lists()
    {
        $data = $this->getLeadRepository()->getCompanyLeadResendList($this->account()->getCompany(), $this->account());
        echo json_encode($data);
    }

    public function get_prospect_resend_lists()
    {
        $data = $this->getProspectRepository()->getCompanyProspectResendList($this->account()->getCompany(), $this->account());
        echo json_encode($data);
    }

    public function get_admin_resend_lists()
    {
        $data = $this->getCompanyRepository()->getCompanyAdminResendList($this->account()->getCompany());
        echo json_encode($data);
    }

    public function group_delete_proposal_campaigns()
    {
        $ids = $this->input->post('campaignIds');

        if (is_array($ids)) {
            foreach ($ids as $campaignId) {
                $pgr = $this->em->find('\models\ProposalGroupResend', $campaignId);

                if ($pgr) {
                    $pgr->setIsDeleted(1);
                    $this->em->persist($pgr);

                    $this->log_manager->add(\models\ActivityAction::PROPOSAL_CAMPAIGN_DELETE, 'Proposal Campaign "' . $pgr->getResendName() . '" deleted', null, null, $this->account()->getCompany(), $this->account());
                }
            }
            $this->em->flush();
        }

        echo json_encode(['error' => 0]);
    }

    public function group_delete_client_campaigns()
    {
        $ids = $this->input->post('campaignIds');

        if (is_array($ids)) {
            foreach ($ids as $campaignId) {
                $pgr = $this->em->find('\models\ClientGroupResend', $campaignId);

                if ($pgr) {
                    $pgr->setIsDeleted(1);
                    $this->em->persist($pgr);

                    $this->log_manager->add(\models\ActivityAction::PROPOSAL_CAMPAIGN_DELETE, 'Proposal Campaign "' . $pgr->getResendName() . '" deleted', null, null, $this->account()->getCompany(), $this->account());
                }
            }
            $this->em->flush();
        }

        echo json_encode(['error' => 0]);
    }

    public function group_delete_lead_campaigns()
    {
        $ids = $this->input->post('campaignIds');

        if (is_array($ids)) {
            foreach ($ids as $campaignId) {
                $pgr = $this->em->find('\models\LeadGroupResend', $campaignId);

                if ($pgr) {
                    $pgr->setIsDeleted(1);
                    $this->em->persist($pgr);

                    $this->log_manager->add(\models\ActivityAction::LEAD_CAMPAIGN_DELETE, 'Lead Campaign "' . $pgr->getResendName() . '" deleted', null, null, $this->account()->getCompany(), $this->account());
                }
            }
            $this->em->flush();
        }

        echo json_encode(['error' => 0]);
    }

    public function group_delete_prospect_campaigns()
    {
        $ids = $this->input->post('campaignIds');

        if (is_array($ids)) {
            foreach ($ids as $campaignId) {
                $pgr = $this->em->find('\models\ProspectGroupResend', $campaignId);

                if ($pgr) {
                    $pgr->setIsDeleted(1);
                    $this->em->persist($pgr);

                    $this->log_manager->add(\models\ActivityAction::PROSPECT_CAMPAIGN_DELETE, 'Prospect Campaign "' . $pgr->getResendName() . '" deleted', null, null, $this->account()->getCompany(), $this->account());
                }
            }
            $this->em->flush();
        }

        echo json_encode(['error' => 0]);
    }

    public function group_delete_admin_campaigns()
    {
        $ids = $this->input->post('campaignIds');

        if (is_array($ids)) {
            foreach ($ids as $campaignId) {
                $pgr = $this->em->find('\models\AdminGroupResend', $campaignId);

                if ($pgr) {
                    $pgr->setIsDeleted(1);
                    $this->em->persist($pgr);

                    $this->log_manager->add('campaign_deleted', 'Admin Campaign "' . $pgr->getResendName() . '" deleted', null, null, $this->account()->getCompany(), $this->account());
                }
            }
            $this->em->flush();
        }

        echo json_encode(['error' => 0]);
    }

    public function change_child_resend()
    {
        $id = $this->input->post('child_resend_id');
        $resend = $this->em->find('models\ProposalGroupResend', $id);
        $resendStats = $this->getProposalRepository()->getResendStats($resend, $this->account());
        $this->session->set_userdata('pResendFilterId', $id);
        echo json_encode(['error' => 0, 'success' => 1, 'email_content' => $resend->getEmailContent(), 'resendStats' => $resendStats]);
    }

    public function change_client_child_resend()
    {
        $id = $this->input->post('child_resend_id');
        $resend = $this->em->find('models\ClientGroupResend', $id);
        $resendStats = $this->getClientRepository()->getClientResendStats($resend, $this->account());
        $this->session->set_userdata('pClientResendFilterId', $id);
        echo json_encode(['error' => 0, 'success' => 1, 'email_content' => $resend->getEmailContent(), 'resendStats' => $resendStats]);
    }

    public function change_lead_child_resend()
    {
        $id = $this->input->post('child_resend_id');
        $resend = $this->em->find('models\LeadGroupResend', $id);
        $resendStats = $this->getLeadRepository()->getLeadResendStats($resend, $this->account());
        $this->session->set_userdata('pLeadResendFilterId', $id);
        echo json_encode(['error' => 0, 'success' => 1, 'email_content' => $resend->getEmailContent(), 'resendStats' => $resendStats]);
    }

    public function change_prospect_child_resend()
    {
        $id = $this->input->post('child_resend_id');
        $resend = $this->em->find('models\ProspectGroupResend', $id);
        $resendStats = $this->getProspectRepository()->getProspectResendStats($resend, $this->account());
        $this->session->set_userdata('pProspectResendFilterId', $id);
        echo json_encode(['error' => 0, 'success' => 1, 'email_content' => $resend->getEmailContent(), 'resendStats' => $resendStats]);
    }

    public function change_admin_child_resend()
    {
        $id = $this->input->post('child_resend_id');
        $resend = $this->em->find('models\AdminGroupResend', $id);
        $resendStats = $this->getCompanyRepository()->getAdminResendStats($resend);
        $this->session->set_userdata('pAdminResendFilterId', $id);
        echo json_encode(['error' => 0, 'success' => 1, 'email_content' => $resend->getEmailContent(), 'resendStats' => $resendStats]);
    }


    public function getProposalServicesContent()
    {
        $proposalIds = $this->input->post('proposalIds');


        $out = [];

        foreach ($proposalIds as $proposalId) {

            $proposal = $this->em->findProposal($proposalId);
            $price = $proposal->getPrice();
            $services = $this->db->query("SELECT * FROM proposal_services WHERE proposal=" . $proposalId)->result();

            $out[$proposalId] = $this->load->view('templates/proposals/table/formatted-price-response', ['services' => $services, 'price' => $price], true);
        }

        echo json_encode($out);
    }

    public function get_child_resend_lists()
    {

        $out = $this->getProposalRepository()->getChildResend($this->uri->segment(3));
        echo json_encode($out);
    }

    public function get_client_child_resend_lists()
    {

        $out = $this->getClientRepository()->getChildResend($this->uri->segment(3));
        echo json_encode($out);
    }

    public function get_lead_child_resend_lists()
    {

        $out = $this->getLeadRepository()->getChildResend($this->uri->segment(3));
        echo json_encode($out);
    }

    public function update_lead_resend_name()
    {
        $this->load->library('JsonResponse');
        $response = new JsonResponse();


        $resendId = $this->input->post('resendId');
        $pgs = $this->em->find('\models\LeadGroupResend', $resendId);
        $pgs->setResendName($this->input->post('resendName'));
        $this->em->persist($pgs);
        $this->em->flush();

        $response->success = true;

        $response->send();
    }

    public function update_prospect_resend_name()
    {
        $this->load->library('JsonResponse');
        $response = new JsonResponse();


        $resendId = $this->input->post('resendId');
        $pgs = $this->em->find('\models\ProspectGroupResend', $resendId);
        $pgs->setResendName($this->input->post('resendName'));
        $this->em->persist($pgs);
        $this->em->flush();

        $response->success = true;

        $response->send();
    }

    function userGroupSalesEmails()
    {
        $this->load->library('JsonResponse');
        $response = new JsonResponse();

        $ids = $this->input->post('ids');
        $sales_report_emails = $this->input->post('sales_report_emails');
        $email_frequency = $this->input->post('email_frequency');
        $update_count = 0;
        foreach ($ids as $id) {
            $account = $this->em->findAccount($id);
            if ($account->getSales() == 1) {
                $account->setSalesReportEmails($sales_report_emails);
                $account->setEmailFrequency($email_frequency);
                $this->em->persist($account);
                $update_count++;
            }

        }
        $this->em->flush();
        $response->success = true;
        $response->updated = $update_count;
        $response->non_updated = count($ids) - $update_count;
        $response->send();
    }

    function dummyPost()
    {
        $data = array();
        if (!$this->session->userdata('logged')) {
            $data['status'] = 0;

        } else {
            $data['status'] = 1;

        }
        $data['value'] = $this->input->post('value');

        echo json_encode($data);
    }

    public function proposalSaveImage2()
    {
        set_time_limit(120);
        include('src/class.fileuploader.php');
        //$this->load->library('FileUploader');

        //print_r($_FILES);die;
        $customName = md5(microtime());
        $proposal = $this->em->findProposal($this->input->post('proposalId'));

        if (!$proposal) {
            $data['error'] = 1;
            $data['isSuccess'] = false;
            $data['message'] = "Unable to load proposal. Proposal ID: " . $this->input->post('proposalId');
            echo json_encode($data);
            return;
        }

        $companyFolder = $proposal->getCompanyUploadDir();

        if (!is_dir($companyFolder)) {
            mkdir($companyFolder, 0777, true);
        }

        $folder = $proposal->getUploadDir();
        if (!is_dir($folder)) {
            mkdir($folder, 0777, true);
        }

        // initialize FileUploader
        $FileUploader = new FileUploader('files', array(
            'limit' => null,
            'maxSize' => null,
            'fileMaxSize' => null,
            'extensions' => null,
            'required' => false,
            'uploadDir' => $folder . '/',
            'title' => $customName ? $customName : 'name',
            'replace' => false,
            'listInput' => true,
            'files' => null
        ));

        // call to upload the files
        $data = $FileUploader->upload();

        if ($data['isSuccess']) {
            $fileName = $data['files'][0]['name'];
        } else {
            echo json_encode($data);
            exit;
        }


        $imgData = [
            'imgUrl' => '',
        ];

        $uploadedImage = $this->getProposalRepository()->saveProposalImage($proposal, $imgData, $fileName);

        $logString = 'New Image Uploaded';
        $this->log_manager->add(\models\ActivityAction::ADD_PROPOSAL_IMAGE, $logString, $proposal->getClient(), $proposal);

        $proposal->setRebuildFlag(1);
        $proposal->setImageCount($this->getProposalRepository()->getRealImageCount($proposal));
        $this->em->persist($proposal);
        $this->em->flush();

        if (!$uploadedImage) {
            $data['error'] = 1;
            $data['isSuccess'] = false;
        } else {
            $data['error'] = 0;
            $data['isSuccess'] = true;
            $data['id'] = $uploadedImage->getImageId();
            $data['path'] = $uploadedImage->getImage();
        }

        echo json_encode($data);
    }

    public function updateCropImage(){

        
        $image = $this->em->find('models\Proposals_images', $this->input->post('imageId'));
        if (!$image) {
            echo 'error';
        } else {

            $proposal = $image->getProposal();

            $filename = time().$this->input->post('filename');
        $folder = $proposal->getUploadDir();
        $realfolder = $proposal->getSitePathUploadDir(); 
        $imagepath = $folder.'/'.$filename;
        
        move_uploaded_file($_FILES['uploadfile']['tmp_name'], $imagepath);

            $image->setImage($filename);
            $this->em->persist($image);
            $proposal = $image->getProposal();
            if($image->getMap()==1){
                $logString = '<strong>Proposal Map:</strong> '.$image->getTitle().' edited';
            }else{
                $logString = '<strong>Proposal Image:</strong> '.$image->getTitle().' edited';
            }
            
            $proposal->setRebuildFlag(1);
            $this->em->persist($proposal);
            $this->em->flush();
            $this->log_manager->add('proposa_image_edited', $logString, $proposal->getClient(), $proposal);

            echo $realfolder.'/'.$filename;
        }

    }

    public function proposalSaveMapImage()
    {
        set_time_limit(120);
        include('src/class.fileuploader.php');
        //$this->load->library('FileUploader');

        //print_r($_FILES);die;
        $customName = md5(microtime());
        $proposal = $this->em->findProposal($this->input->post('proposalId'));

        if (!$proposal) {
            $data['error'] = 1;
            $data['isSuccess'] = false;
            $data['message'] = "Unable to load proposal. Proposal ID: " . $this->input->post('proposalId');
            echo json_encode($data);
            return;
        }

        $companyFolder = $proposal->getCompanyUploadDir();

        if (!is_dir($companyFolder)) {
            mkdir($companyFolder, 0777, true);
        }

        $folder = $proposal->getUploadDir();
        if (!is_dir($folder)) {
            mkdir($folder, 0777, true);
        }

        // initialize FileUploader
        $FileUploader = new FileUploader('files', array(
            'limit' => null,
            'maxSize' => null,
            'fileMaxSize' => null,
            'extensions' => null,
            'required' => false,
            'uploadDir' => $folder . '/',
            'title' => $customName ? $customName : 'name',
            'replace' => false,
            'listInput' => true,
            'files' => null
        ));

        // call to upload the files
        $data = $FileUploader->upload();

        if ($data['isSuccess']) {
            $fileName = $data['files'][0]['name'];
        } else {
            echo json_encode($data);
            exit;
        }


        $imgData = [
            'imgUrl' => '',
            'imgName' => 'Site Map',
        ];

        $uploadedImage = $this->getProposalRepository()->saveProposalImage($proposal, $imgData, $fileName,NULL,1);

        $logString = 'New Image Uploaded';
        $this->log_manager->add('proposal_image', $logString, $proposal->getClient(), $proposal);

        $proposal->setRebuildFlag(1);
        $proposal->setImageCount($this->getProposalRepository()->getRealImageCount($proposal));
        $this->em->persist($proposal);
        $this->em->flush();

        if (!$uploadedImage) {
            $data['error'] = 1;
            $data['isSuccess'] = false;
        } else {
            $data['error'] = 0;
            $data['isSuccess'] = true;
            $data['id'] = $uploadedImage->getImageId();
            $data['path'] = $uploadedImage->getImage();
        }

        echo json_encode($data);
    }


    public function send_proposal_email()
    {

        if ($this->input->post('send_proposal_id')) {

            $this->load->library('JsonResponse');
            $response = new JsonResponse();

            $proposal = $this->em->findProposal($this->input->post('send_proposal_id'));
            $mails = array();
            /*
            if ($this->account() != $proposal->getClient()->getAccount()) {
                $mails[] = $this->account()->getEmail();
            }
            */
            $additional_mails = explode(",", trim($_POST['to']));
            foreach ($additional_mails as $mail) {
                if ($mail) {
                    $mails[] = $mail;
                }
            }
            //bcc
            $bccs = explode(',', trim($_POST['bcc']));
            foreach ($bccs as $bcc) {
                if ($bcc) {
                    $mails[] = $bcc;
                }
            }

            $emailData = [
                'fromName' => $proposal->getOwner()->getFullName() . ' via ' . SITE_NAME,
                'fromEmail' => 'proposals@' . SITE_EMAIL_DOMAIN,
                'subject' => $this->input->post('subject') ?: 'Proposal for ' . $proposal->getProjectName(),
                'body' => $this->input->post('message'),
                'replyTo' => $proposal->getOwner()->getEmail(),
                'bcc' => $mails,
                'emailCC' => true, //this is to reflect the checkbox in group actions
                'emailClient' => false, //to not automatically email client
            ];


            $this->getProposalRepository()->send($proposal->getProposalId(), $emailData, $this->account());


            $this->getProposalEventRepository()->createEmailEvent('Proposal', $proposal->getProposalId(), $this->account(), $_POST['to'], $this->input->post('message'), $this->input->post('subject'), '1', $emailData['fromName'], $emailData['fromEmail']);


            //Event Log
            $this->getProposalEventRepository()->sendProposalIndividual($proposal, $this->account());

            //approve proposal if in approval Queue
            if ($proposal->inApprovalQueue()) {
                $proposal->setApprovalQueue(0);
                $proposal->setUnapprovedServices(0);
                $proposal->setApproved(1);
                $this->getProposalRepository()->approve($proposal);
                $this->em->persist($proposal);
                $this->em->flush();
                $this->load->model('system_email');
                $emailData = array(
                    'firstName' => $this->account()->getFirstName(),
                    'lastName' => $this->account()->getLastName(),
                    'userFirstName' => $proposal->getClient()->getAccount()->getFirstName(),
                    'userLastName' => $proposal->getClient()->getAccount()->getLastName(),
                    'projectName' => $proposal->getProjectName(),
                );
                $this->system_email->sendEmail(13, $proposal->getOwner()->getEmail(), $emailData);
                $this->log_manager->add(\models\ActivityAction::PROPOSAL_EMAIL_SEND,
                    'Proposal Approved & Sent By: ' . $this->account()->getFirstName() . ' ' . $this->account()->getLastName(),
                    $proposal->getClient(), $proposal);
                $this->log_manager->add(\models\ActivityAction::PROPOSAL_EMAIL_SEND,
                    'Proposal Sent to: ' . str_replace(',', ', ', $this->input->post('to')),
                    $proposal->getClient(), $proposal);
            }
            // $this->session->set_flashdata('success',
            //     'Emails sent succesfully! A copy has been sent to your email address as well!');
            // redirect('proposals/edit/' . $this->uri->segment(3) . '/items');
            $response->success = true;

            $response->send();
        }
    }

    function send_proposal_individual()
    {
        // $this->input->post('ccIndividualEmail') ? true : false;
       // start For sending message with text & image 
        $request_body = file_get_contents("php://input");
        $data = array();
        parse_str($request_body, $data);      
        if (isset($data['message'])) {
            // Echo the 'value' field
            $message = $data['message'];
        } 
       // close For sending message with text & image 

        $emailCC = $this->input->post('ccIndividualEmail');
        $proposal = $this->em->findProposal($_POST['proposal_id']);
        $mails = array();
        $bccmails = array();
        /*
                    if ($this->account() != $proposal->getClient()->getAccount()) {
                        $mails[] = $this->account()->getEmail();
                    }
                    */
        $additional_mails = $_POST['to'];
        foreach ($additional_mails as $mail) {
            if ($mail) {
                $mails[] = $mail;
            }
        }
        //bcc
        // $bccs = explode(',', trim($_POST['bcc']));
        // foreach ($bccs as $bcc) {
        //     if ($bcc) {
        //         $bccmails[] = $bcc;
        //     }
        // }

        // Assuming $values is your array containing the form data
 


        $emailData = [
            'fromName' => $proposal->getOwner()->getFullName() . ' via ' . SITE_NAME,
            'fromEmail' => 'noreply@' . SITE_EMAIL_DOMAIN,
            'subject' => $this->input->post('subject') ?: 'Proposal for ' . $proposal->getProjectName(),
            'body' => $message,
            'replyTo' => $proposal->getOwner()->getEmail(),
            'bcc' => $bccmails,
            'to' => $mails,
            'emailCC' => $emailCC ? true : false, //this is to reflect the checkbox in group actions
            'emailClient' => false, //to not automatically email client
        ]; 

 
        $this->getProposalRepository()->individualSend($proposal->getProposalId(), $emailData, $this->account());

        //Event Log
        $this->getProposalEventRepository()->sendProposalIndividual($proposal, $this->account());
 
        //if proposal have audit ready status
        if ($proposal->getProposalStatus()->getStatusId() == \models\Status::AUDIT_READY) {
         
            $Status = $this->em->find('models\Status', \models\Status::OPEN);

            $proposal->setProposalStatus($Status);
            $this->em->persist($proposal);
            $this->em->flush();
        }

        //approve proposal if in approval Queue
        if ($proposal->inApprovalQueue()) {
            $proposal->setApprovalQueue(0);
            $proposal->setUnapprovedServices(0);
            $proposal->setApproved(1);
            $this->getProposalRepository()->approve($proposal);
            $this->em->persist($proposal);
            $this->em->flush();
            $this->load->model('system_email');
            $emailData = array(
                'firstName' => $this->account()->getFirstName(),
                'lastName' => $this->account()->getLastName(),
                'userFirstName' => $proposal->getClient()->getAccount()->getFirstName(),
                'userLastName' => $proposal->getClient()->getAccount()->getLastName(),
                'projectName' => $proposal->getProjectName(),
            );
            
            $this->system_email->sendEmail(13, $proposal->getOwner()->getEmail(), $emailData);
            $this->log_manager->add(\models\ActivityAction::PROPOSAL_EMAIL_SEND,
                'Proposal Approved & Sent By: ' . $this->account()->getFirstName() . ' ' . $this->account()->getLastName(),
                $proposal->getClient(), $proposal);
            $this->log_manager->add(\models\ActivityAction::PROPOSAL_EMAIL_SEND,
                'Proposal Sent to: ' . str_replace(',', ', ', $this->input->post('to')),
                $proposal->getClient(), $proposal);
        }
    }


    function send_proposal_approval_request()
    {
        $proposalId = $this->input->post('proposal_id');

        $proposal = $this->em->find('models\Proposals', $this->input->post('proposal_id'));

        $recipients = (is_array($this->input->post('recipients'))) ? $this->input->post('recipients') : array();


        //send emails
        $this->load->model('system_email');
        $emailData = array(
            'firstName' => '',
            'lastName' => '',
            'userFirstName' => $proposal->getOwner()->getFirstName(),
            'userLastName' => $proposal->getOwner()->getLastName(),
            'projectName' => $proposal->getProjectName(),
            'projectEditLink' => '<a href="' . site_url('proposals/edit/' . $proposalId) . '">' . $proposal->getProjectName() . '</a>',
        );
        $names = '';
        $recipientCount = 0;
        foreach ($recipients as $recipient => $email) {
            $user = $this->em->find('models\Accounts', $recipient);
            if ($user) {
                if ($recipientCount > 0) {
                    $names .= ', ';
                }
                $names .= $user->getFirstName() . ' ' . $user->getLastName();
                $recipientCount++;
                //mail
                $emailData['firstName'] = $user->getFirstName();
                $emailData['lastName'] = $user->getLastName();
                $emailData['message'] = nl2br($this->input->post('message'));
                $this->system_email->sendEmail(12, $email, $emailData);
            }
        }
        //flag proposal
        $proposal->setApprovalQueue(1);
        $this->em->persist($proposal);
        $this->em->flush();
        //add history item
        $this->log_manager->add(\models\ActivityAction::PROPOSAL_APPROVAL_QUEUE, 'Proposal approval sent to ' . $names . '.',
            $proposal->getClient(), $proposal);
        //redirect
        $data = array();
        $data['status'] = 1;
        $data['message'] = 'Approval Request submit';

        echo json_encode($data);

    }

    function send_client_individual_email()
    {
        $clientId = $this->input->post('client_id');

        $client = $this->em->find('models\Clients', $clientId);


        $mails = array();
        $bccmails = array();
        /*
        if ($this->account() != $proposal->getClient()->getAccount()) {
            $mails[] = $this->account()->getEmail();
        }
        */
        $additional_mails = explode(",", trim($_POST['to']));
        foreach ($additional_mails as $mail) {
            if ($mail) {
                $mails[] = $mail;
            }
        }
        //bcc
        $bccs = explode(',', trim($_POST['bcc']));
        foreach ($bccs as $bcc) {
            if ($bcc) {
                $mails[] = $bcc;
            }
        }

        $etp = new \EmailTemplateParser();
        $etp->setClient($client);
        $etp->setAccount($client->getAccount());
       // $message = $etp->parse($this->input->post('message'));
       //start templete code 
        $request_body = file_get_contents("php://input");
        $data = array();
        parse_str($request_body, $data);      
        if (isset($data['message'])) {
            // Echo the 'value' field
            $message = $data['message'];
        }
        //close templete code 

        foreach ($mails as $mail) {
            $emailData = [
                'fromName' => $client->getAccount()->getFullName(),
                'fromEmail' => 'noreply@' . SITE_EMAIL_DOMAIN,
                'subject' => $this->input->post('subject'),
                'body' => $message,
                'replyTo' => $client->getAccount()->getEmail(),
                'to' => $mail,
                'categories' => ['client_email'],
                'uniqueArg' => 'email_event',
                'emailCC' => true, //this is to reflect the checkbox in group actions
                'emailClient' => false, //to not automatically email client
            ];

            //Event Log
            $event_id = $this->getProposalEventRepository()->createEmailEvent('Client', $clientId, $this->account(), $mail, $message, $this->input->post('subject'), '', $emailData['fromName'], $emailData['fromEmail']);

            $emailData['uniqueArgVal'] = $event_id;


            $this->getEmailRepository()->send($emailData);

            //add history item
            $this->log_manager->add(\models\ActivityAction::EXCLUDE_CONTACT_FROM_EMAIL, 'Client Email sent', $client);


        }
        //redirect
        $data = array();
        $data['data'] = $emailData;
        $data['message'] = 'Approval Request submit';

        echo json_encode($data);

    }

    function send_lead_individual_email()
    {
        $leadId = $this->input->post('lead_id');

        $lead = $this->em->find('models\Leads', $leadId);
        $leadAccount = $this->em->findAccount($lead->getAccount());

        $mails = array();
        $bccmails = array();
        /*
        if ($this->account() != $proposal->getClient()->getAccount()) {
            $mails[] = $this->account()->getEmail();
        }
        */
        $additional_mails = explode(",", trim($_POST['to']));
        foreach ($additional_mails as $mail) {
            if ($mail) {
                $mails[] = $mail;
            }
        }
        //bcc
        $bccs = explode(',', trim($_POST['bcc']));
        foreach ($bccs as $bcc) {
            if ($bcc) {
                $mails[] = $bcc;
            }
        }

        $etp = new \EmailTemplateParser();
        $etp->setLead($lead);
        $etp->setAccount($leadAccount);
        //$message = $etp->parse($this->input->post('message'));
        //start code on leads email template
            $request_body = file_get_contents("php://input");
            $data = array();
            parse_str($request_body, $data);      
            if (isset($data['message'])) {
                // Echo the 'value' field
                $message = $data['message'];
            } 
        //close code on leads email template

        foreach ($mails as $mail) {
            $emailData = [
                'fromName' => $leadAccount->getFullName(),
                'fromEmail' => 'noreply@' . SITE_EMAIL_DOMAIN,
                'subject' => $this->input->post('subject'),
                'body' => $message,
                'replyTo' => $leadAccount->getEmail(),
                'to' => $mail,
                'categories' => ['lead_email'],
                'uniqueArg' => 'email_event',
                'emailCC' => true, //this is to reflect the checkbox in group actions
                'emailClient' => false, //to not automatically email client
            ];

            //event log
            $event_id = $this->getProposalEventRepository()->createEmailEvent('Lead', $leadId, $this->account(), $mail, $message, $this->input->post('subject'), '', $emailData['fromName'], $emailData['fromEmail']);
            $emailData['uniqueArgVal'] = $event_id;

            $this->getEmailRepository()->send($emailData);
            //add history item
            $this->log_manager->add(\models\ActivityAction::LEAD_EMAIL_SEND, 'Lead Email sent');


        }
        //redirect
        $data = array();
        $data['data'] = $emailData;
        $data['message'] = 'Lead Send Email';

        echo json_encode($data);

    }

    function send_prospect_individual_email()
    {
        $prospectId = $this->input->post('prospect_id');

        $prospect = $this->em->find('models\Prospects', $prospectId);
        $prospectAccount = $this->em->findAccount($prospect->getAccount());

        $mails = array();
        $bccmails = array();
        /*
        if ($this->account() != $proposal->getClient()->getAccount()) {
            $mails[] = $this->account()->getEmail();
        }
        */
        $additional_mails = explode(",", trim($_POST['to']));
        foreach ($additional_mails as $mail) {
            if ($mail) {
                $mails[] = $mail;
            }
        }
        //bcc
        $bccs = explode(',', trim($_POST['bcc']));
        foreach ($bccs as $bcc) {
            if ($bcc) {
                $mails[] = $bcc;
            }
        }

        $etp = new \EmailTemplateParser();
        $etp->setProspect($prospect);
        $etp->setAccount($prospectAccount);
       // $message = $etp->parse($this->input->post('message'));
       // start add a templeted code
        $request_body = file_get_contents("php://input");
            $data = array();
            parse_str($request_body, $data);      
            if (isset($data['message'])) {
                // Echo the 'value' field
                $message = $data['message'];
            } 
       // close add a templeted code

        foreach ($mails as $mail) {

            $emailData = [
                'fromName' => $prospectAccount->getFullName(),
                'fromEmail' => 'noreply@' . SITE_EMAIL_DOMAIN,
                'subject' => $this->input->post('subject'),
                'body' => $message,
                'replyTo' => $prospectAccount->getEmail(),
                'to' => $mail,
                'categories' => ['prospect_email'],
                'uniqueArg' => 'email_event',
                'emailCC' => true, //this is to reflect the checkbox in group actions
                'emailClient' => false, //to not automatically email client
            ];

            //event Log
            $event_id = $this->getProposalEventRepository()->createEmailEvent('Prospect', $prospectId, $this->account(), $mail, $message, $this->input->post('subject'), '', $emailData['fromName'], $emailData['fromEmail']);

            $emailData['uniqueArgVal'] = $event_id;


            $this->getEmailRepository()->send($emailData);
            //add history item
            $this->log_manager->add(\models\ActivityAction::PROSPECT_EMAIL_SEND, 'Prospect Email sent');

        }
        //redirect
        $data = array();
        $data['data'] = $emailData;
        $data['message'] = 'prospect Send Email';

        echo json_encode($data);

    }

    function get_client_email_events()
    {
        $client_id = $this->input->post('client_id');
        $events = $this->getProposalEventRepository()->getClientEmailEvents($client_id);
        echo json_encode($events);
    }

    function get_lead_email_events()
    {
        $lead_id = $this->input->post('lead_id');

        $events = $this->getProposalEventRepository()->getLeadEmailEvents($lead_id);
        echo json_encode($events);
    }

    function get_prospect_email_events()
    {
        $prospect_id = $this->input->post('prospect_id');

        $events = $this->getProposalEventRepository()->getProspectEmailEvents($prospect_id);
        echo json_encode($events);
    }

    function get_email_event_email_content()
    {
        $event_id = $this->input->post('event_id');

        $email_content = $this->getProposalEventRepository()->getEmailEventEmailContent($event_id);
        //echo "<pre>";print_r($email_content);die;
        echo json_encode($email_content);
    }

    function get_client_email_events_table_data($client_id)
    {


        $tableData = [];
        $rowsData = [];
        $itemsData = $this->getProposalEventRepository()->getClientEmailEvents($client_id, false);

        foreach ($itemsData as $dataRow) {
            $rowsData[] = $dataRow;
        }

        $tableData['sEcho'] = (int)$this->input->post('echo');
        $tableData['iTotalRecords'] = $this->getProposalEventRepository()->getClientEmailEvents($client_id, true);
        $tableData['iTotalDisplayRecords'] = $this->getProposalEventRepository()->getClientEmailEvents($client_id, true);
        $tableData['aaData'] = $rowsData;

        echo json_encode($tableData);

    }

    function get_proposal_email_events_table_data($proposal_id)
    {


        $tableData = [];
        $rowsData = [];
        $email_type_filter = $this->input->get('emailType') ?: 'none';
        $itemsData = $this->getProposalEventRepository()->getProposalEmailEvents($proposal_id, false, $email_type_filter);

        foreach ($itemsData as $dataRow) {
            $rowsData[] = $dataRow;
        }

        $tableData['sEcho'] = (int)$this->input->post('echo');
        $tableData['iTotalRecords'] = $this->getProposalEventRepository()->getProposalEmailEvents($proposal_id, true, '', true);
        $tableData['iTotalDisplayRecords'] = $this->getProposalEventRepository()->getProposalEmailEvents($proposal_id, true, $email_type_filter, true);
        //$tableData['iTotalDisplayRecords'] = count($rowsData);
        $tableData['aaData'] = $rowsData;

        echo json_encode($tableData);

    }

    function get_lead_email_events_table_data($client_id)
    {


        $tableData = [];
        $rowsData = [];
        $itemsData = $this->getProposalEventRepository()->getLeadEmailEvents($client_id, false);

        foreach ($itemsData as $dataRow) {
            $rowsData[] = $dataRow;
        }

        $tableData['sEcho'] = (int)$this->input->post('echo');
        $tableData['iTotalRecords'] = $this->getProposalEventRepository()->getLeadEmailEvents($client_id, true);
        $tableData['iTotalDisplayRecords'] = $this->getProposalEventRepository()->getLeadEmailEvents($client_id, true);
        $tableData['aaData'] = $rowsData;

        echo json_encode($tableData);

    }

    function get_prospect_email_events_table_data($prospect_id)
    {


        $tableData = [];
        $rowsData = [];
        $itemsData = $this->getProposalEventRepository()->getProspectEmailEvents($prospect_id, false);

        foreach ($itemsData as $dataRow) {
            $rowsData[] = $dataRow;
        }

        $tableData['sEcho'] = (int)$this->input->post('echo');
        $tableData['iTotalRecords'] = $this->getProposalEventRepository()->getProspectEmailEvents($prospect_id, true);
        $tableData['iTotalDisplayRecords'] = $this->getProposalEventRepository()->getProspectEmailEvents($prospect_id, true);
        $tableData['aaData'] = $rowsData;

        echo json_encode($tableData);

    }

    function send_work_order_ajax()
    {

        // print_r($this->input->post('proposal_id'));die;
        $proposal = $this->em->find('models\Proposals', $this->input->post('proposal_id'));
        if (!$proposal) {
            $response['error'] = 1;
            $response['message'] = 'Proposal not found';
            echo json_encode($response);
            exit;
        }
        $recipients = ($this->input->post('recipients')) ? $this->input->post('recipients') : array();
        $mails = array_merge($recipients, explode(',', str_replace(' ', '', $this->input->post('additional_emails'))));

        foreach ($mails as $id => $email) {
            if (!$email) {
                unset($mails[$id]);
            }
        }
        $to = $proposal->getProjectAddress();
        if ($proposal->getProjectCity()) {
            $to .= ', ' . $proposal->getProjectCity();
        }
        if ($proposal->getProjectState()) {
            $to .= ', ' . $proposal->getProjectState();
        }
        if ($proposal->getProjectZip()) {
            $to .= ', ' . $proposal->getProjectZip();
        }
        $to = urlencode(trim(str_replace(',', ' ', $to)));

        if (count($mails)) {
            $subject = 'Work order for ' . $proposal->getClient()->getClientAccount()->getName() . ' | ' . $proposal->getProjectName();
            $message = '
            <p>Hello!</p>
            <p><a style="border-radius: 5px;padding: 5px;color: #fff;background: #25AAE1;text-decoration: none;" href="https://maps.google.com/maps?q=' . $to . '">Click here for directions using google maps.</a></p>
            <p><a style="border-radius: 5px;padding: 5px;color: #fff;background: #25AAE1;text-decoration: none;" href="' . site_url('work_order/' . $proposal->getAccessKey()) . '">Click here for Work Order PDF.</a></p>
            <p>Please do not reply to this email. It is an automated message sent out from ' . SITE_NAME . '.</p>
            ';
            $headers = "Content-Type: text/html\r\n";
            //$headers .= "From: " . $this->account()->getFullName() .  " <" . $this->account()->getEmail() . ">\r\n";
            $headers .= "From: " . $this->account()->getFullName() . " <no-reply@" . SITE_EMAIL_DOMAIN . ">\r\n";
            $mailString = '';
            $k = 0;
            foreach ($mails as $mail) {
                // echo '<pre>';
                // print_r($mail);
                // die;
                $k++;
                //mail($mail, $subject, $message, $headers);
                $emailData = [
                    'to' => $mail,
                    'fromName' => SITE_NAME,
                    'fromEmail' => 'no-reply@' . SITE_EMAIL_DOMAIN,
                    'subject' => $subject,
                    'body' => $message,
                    'header' => $headers,
                ];
                $event_id = $this->getProposalEventRepository()->createEmailEvent('Proposal', $proposal->getProposalId(), $this->account(), $emailData['to'], $emailData['body'], $emailData['subject'], '4', $emailData['fromName'], $emailData['fromEmail']);
                $emailData['uniqueArg'] = 'email_event';
                $emailData['uniqueArgVal'] = $event_id;
                $this->getEmailRepository()->send($emailData);
                $mailString .= $mail;
                $mailString .= ($k < count($mails)) ? ', ' : '';
            }
            $this->log_manager->add(\models\ActivityAction::PROPOSAL_EMAIL_SEND_WORKORDER,
                'Sent work order for project ' . $proposal->getProjectName() . ' to: ' . $mailString,
                $proposal->getClient(), $proposal);
            //$this->session->set_flashdata('success', 'Work order email sent to all valid emails entered!');
        } else {
            // $this->session->set_flashdata('error', 'Work order not sent! No valid emails found!');
        }
        $response['error'] = 0;
        $response['message'] = 'work order sent';
        echo json_encode($response);
        //redirect('proposals/edit/' . $this->uri->segment(3) . '/preview_workorder');
    }

    /**
     * Return data for proposal previews
     */
    public function getProposalImagePreviewData()
    {
        $proposal = $this->em->findProposal($this->input->post('proposal_id'));
        $response = [];
        $response['proposal']['title'] = $proposal->getProjectName();
        $response['images'] = [];

        $proposalImages = $this->getProposalRepository()->getProposalImages($proposal);
        $i = 0;
        foreach ($proposalImages as $imageArray) {

            $image = $this->em->find('\models\Proposals_images', $imageArray->imageId);

            $serviceName = '';
            if($imageArray->serviceName){
                $serviceName = $imageArray->serviceName;
            }else{
                $serviceName = $image->getMap()?'Proposal Map':'Proposal Image';
            }
            $response['images'][$i]['image'] = '/uploads/companies/' . $proposal->getClient()->getCompany()->getCompanyId() . '/proposals/' . $proposal->getProposalId() . '/' . $image->getImage();
            $response['images'][$i]['title'] = $image->getTitle();
            $response['images'][$i]['proposal'] = $image->getActive();
            $response['images'][$i]['work_order'] = $image->getActivewo();
            $response['images'][$i]['notes'] = $image->getNotes();
            $response['images'][$i]['layout'] = $image->getImageLayout();
            $response['images'][$i]['width'] = '250px';
            $response['images'][$i]['paddingLeft'] = 0;
            $response['images'][$i]['serviceName'] = $serviceName;
            $i++;
        }

        echo json_encode($response);
    }

    /**
     * Return data for proposal service image previews
     */
    public function getProposalServiceImagePreviewData()
    {
        $service = $this->em->findProposalService($this->input->post('proposalServiceId'));
        $proposal = $this->em->findProposal($service->getProposal());

        $response = [];
        $response['proposal']['title'] = $proposal->getProjectName();
        $response['images'] = [];

        $proposalImages = $this->getProposalRepository()->getProposalServiceImages($service->getServiceId());
        $i = 0;
        foreach ($proposalImages as $imageArray) {

            $image = $this->em->find('\models\Proposals_images', $imageArray->imageId);

            $response['images'][$i]['image'] = '/uploads/companies/' . $proposal->getClient()->getCompany()->getCompanyId() . '/proposals/' . $proposal->getProposalId() . '/' . $image->getImage();
            $response['images'][$i]['title'] = $image->getTitle();
            $response['images'][$i]['proposal'] = $image->getActive();
            $response['images'][$i]['work_order'] = $image->getActivewo();
            $response['images'][$i]['notes'] = $image->getNotes();
            $response['images'][$i]['layout'] = $image->getImageLayout();
            $response['images'][$i]['width'] = '250px';
            $response['images'][$i]['paddingLeft'] = 0;
            $response['images'][$i]['serviceName'] = $imageArray->serviceName ?: 'Proposal Image';
            $i++;
        }

        echo json_encode($response);
    }

    public function ajaxProposalsStats()
    {
        $json = array();
        $this->load->database();
        $this->load->model('branchesapi');
        $this->html->addScript('fancybox');
        $qbPermission = false;
        $action = $this->input->get('action');
        $group = $this->input->get('group') ?: false;

        //BUILD PROPOSALS ARRAY
        $proposals = array();
        // Get the relvant proposals
        $props = $this->account()->getStatsProposalsData($action);

        $is_child_company = $this->account()->getCompany()->checkChildCompany();

        foreach ($props as $proposal) {

            // Grab the proposal services for price breakdown
            $services = '';
            
            //Get Proposal Preview Url
            $proposalViewUrl = $this->getProposalRepository()->getDefaultProposalLink($proposal->proposalId);

            $shared_proposal = 0;

            if($this->account()->getCompany()->getCompanyId() != $proposal->company_id){
                $shared_proposal = 1;
            }
            // Populate the datatables array
            $proposals[] = array(
                '0' => $this->load->view('templates/proposals/table/check', array('proposal' => $proposal), true),
                '1' => $this->load->view('templates/proposals/table/actions', array(
                    'proposal' => $proposal,
                    'action' => $action,
                    'group' => $group,
                    'userAccount' => $this->account(),
                    'proposalViewUrl' => $proposalViewUrl->getUrl(),
                    'is_child_company' => $is_child_company,
                    'shared_proposal' => $shared_proposal,
                ), true),
                '2' => date('m/d/y', $proposal->created + TIMEZONE_OFFSET),
                '3' => $this->load->view('templates/proposals/table/status-dropdown', array('proposal' => $proposal),
                    true),
                '4' => ($proposal->win_date) ? date('m/d/y', $proposal->win_date + TIMEZONE_OFFSET) : '-',
                '5' => ($proposal->jobNumber) ? $proposal->jobNumber : '-',
                '6' => $proposal->clientAccountName,
                '7' => $this->load->view('templates/proposals/table/project-name', array('proposal' => $proposal),
                    true),
                '8' => $this->load->view('templates/proposals/table/image-count', array('proposal' => $proposal), true),
                '9' => $this->load->view('templates/proposals/table/formatted-price',
                    array('proposal' => $proposal, 'services' => $services), true),
                '10' => $this->load->view('templates/proposals/table/contact', array('proposal' => $proposal), true),
                '11' => $this->load->view('templates/proposals/table/owner', array('proposal' => $proposal), true),
                '12' => $this->load->view('templates/proposals/table/last-activity', array('proposal' => $proposal),
                    true),
                '13' => $this->load->view('templates/proposals/table/email-status', array('proposal' => $proposal),
                    true),
                '14' => $this->load->view('templates/proposals/table/delivery-status', array('proposal' => $proposal),
                    true),
                '15' => $this->load->view('templates/proposals/table/open-status', array('proposal' => $proposal),
                    true),
                '16' => $this->load->view('templates/proposals/table/audit-status', array('proposal' => $proposal),
                    true),
                '17' => $this->load->view('templates/proposals/table/estimate-status', array('proposal' => $proposal), true),
                '18' => $this->load->view('templates/proposals/table/profit-price', array('proposal' => $proposal), true)
            );
        }
        $total = $this->account()->getStatsProposalsData($action, true)[0]->total;
        $json["iTotalRecords"] = $total;
        $json["iTotalDisplayRecords"] = $total;
        $json['aaData'] = $proposals;
        $json['sEcho'] = $this->input->get('sEcho');
        echo json_encode($json);
    }

    public function accountYearStatsBar()
    {
        $this->load->library('stats/MyQueryServlet');
        $servlet = new MyQueryServlet();

        $cAccount = $this->em->findClientAccount($this->input->post('accountId'));
        $userId = $this->input->post('user_id');

        $years = array_reverse(range(date("Y"), 2009));;

        //$years = array_reverse(range(date("Y"), date("Y", $cAccount->getCreated())));
        $return_data = array();

        // Create the datatable
        $data = new DataTable();
        // Colums for pie chart
        $data->addColumn(new ColumnDescription('year', ValueType::STRING, 'Year'));
        $data->addColumn(new ColumnDescription('bid', ValueType::NUMBER, 'Bid'));
        $data->addColumn(new ColumnDescription('sold', ValueType::NUMBER, 'Won'));
        $check_start = false;
        foreach ($years as $year) {

            $time = array();
            $time['start'] = mktime(0, 0, 0, 1, 1, $year);
            $time['finish'] = mktime(0, 0, 0, 12, 31, $year);

            $data2 = $cAccount->getProposalsYearStats($time, 1, false);

            if (($data2['total_amount'] > 0 || $data2['total_sold_amount'] > 0) || ($check_start)) {
                $row = new TableRow(array("$year", ($data2['total_amount']) ?: 0, ($data2['total_sold_amount']) ?: 0));
                $data->addRow($row);
                $check_start = true;
            }

        }


        $servlet->setDataTable($data);
        $servlet->execute();


    }

    public function accountUserYearStatsBar()
    {
        $this->load->library('stats/MyQueryServlet');
        $servlet = new MyQueryServlet();

        $cAccount = $this->em->findClientAccount($this->input->post('accountId'));
        $userId = $this->input->post('user_id');

        $years = array_reverse(range(date("Y"), 2009));;


        // Create the datatable
        $data = new DataTable();
        // Colums for pie chart
        $data->addColumn(new ColumnDescription('year', ValueType::STRING, 'Year'));
        $data->addColumn(new ColumnDescription('bid', ValueType::NUMBER, 'Bid'));
        $data->addColumn(new ColumnDescription('sold', ValueType::NUMBER, 'Won'));
        $check_start = false;
        foreach ($years as $year) {

            $time = array();
            $time['start'] = mktime(0, 0, 0, 1, 1, $year);
            $time['finish'] = mktime(0, 0, 0, 12, 31, $year);

            $data2 = $cAccount->getProposalsYearStats($time, 1, $userId);

            if (($data2['total_amount'] > 0 || $data2['total_sold_amount'] > 0) || ($check_start)) {
                $row = new TableRow(array("$year", ($data2['total_amount']) ?: 0, ($data2['total_sold_amount']) ?: 0));
                $data->addRow($row);
                $check_start = true;
            }

        }


        $servlet->setDataTable($data);
        $servlet->execute();


    }

    public function accountUserYearAllStatsBar()
    {
        $this->load->library('stats/MyQueryServlet');
        $servlet = new MyQueryServlet();

        $cAccount = $this->em->findClientAccount($this->input->post('accountId'));
        $userId = $this->input->post('user_id');

        $years = array_reverse(range(date("Y"), 2009));;


        // Create the datatable
        $data = new DataTable();
        // Colums for pie chart
        $data->addColumn(new ColumnDescription('year', ValueType::STRING, 'Year'));
        $data->addColumn(new ColumnDescription('bid', ValueType::NUMBER, 'Bid'));
        $data->addColumn(new ColumnDescription('sold', ValueType::NUMBER, 'Won'));
        $check_start = false;
        foreach ($years as $year) {

            $time = array();
            $time['start'] = mktime(0, 0, 0, 1, 1, $year);
            $time['finish'] = mktime(0, 0, 0, 12, 31, $year);

            $data2 = $this->getProposalRepository()->getProposalsYearAllStats($time, 1, $userId);

            if (($data2['total_amount'] > 0 || $data2['total_sold_amount'] > 0) || ($check_start)) {
                $row = new TableRow(array("$year", ($data2['total_amount']) ?: 0, ($data2['total_sold_amount']) ?: 0));
                $data->addRow($row);
                $check_start = true;
            }

        }


        $servlet->setDataTable($data);
        $servlet->execute();


    }


    public function accountInfoStatsNew()
    {

        $cAccount = $this->em->findClientAccount($this->input->post('accountId'));
        //$userId = $_GET['user_id'];
        $time = array();
        $time['start'] = strtotime($this->input->post('from'));
        $time['finish'] = strtotime("11:59:59pm " . $customFrom = $this->input->post('to'));

        //$statuses = $this->account()->getCompany()->getStatuses();
        $totalVal = 0;

        $statusesData = $cAccount->getRangeCreatedProposalsStatusStats($time);
        $total_proposal_count = 0;
        $total_proposal_value = 0;
        // Create the datatable
        $table_data = array();
        foreach ($statusesData as $data) {

            $totalVal += $data['p_total'];
            $theVal = (int)$data['p_total'];
            $total_proposal_count += $data['p_count'];
            $total_proposal_value += $data['p_total'];
            //$statusName = ($data['sales']==1) ? '<span class="tiptip" title ="Sales Status">[S]</span> '.$data['text'] : $data['text'];
            // Only add the status if it has a value
            if ($data['p_count'] > 0) {
                $table_data[] = array(
                    '0' => $data['text'],
                    '1' => $data['p_count'],
                    '2' => '<a href="' . base_url() . 'proposals/account_stats/' . $this->input->post('accountId') . '/0/' . $data['id'] . '" title="View Proposals" class="tiptip "  > $' . number_format($theVal) . '</a>',

                );
            }


        }

        $total_data[] = array(
            '0' => 'Proposals',
            '1' => $total_proposal_count,
            '2' => '<a href="' . base_url() . 'proposals/account_stats/' . $this->input->post('accountId') . '" title="View Proposals" class="tiptip "  > $' . number_format($total_proposal_value) . '</a>',

        );

        $table_data = array_merge($total_data, $table_data);
        //print_r($table_data);die;
        echo json_encode($table_data);


    }


    public function ajaxProposalsAccStats()
    {
        $json = array();
        $this->load->database();
        $this->load->model('branchesapi');
        $this->html->addScript('fancybox');
        $qbPermission = false;
        $action = $this->input->get('action');
        $group = $this->input->get('group') ?: false;

        //BUILD PROPOSALS ARRAY
        $proposals = array();
        // Get the relvant proposals
        $props = $this->account()->getAccStatsProposalsData($action);

        $is_child_company = $this->account()->getCompany()->checkChildCompany();

        foreach ($props as $proposal) {

            // Grab the proposal services for price breakdown
            $services = '';
            
            //Get Proposal Preview Url
            $proposalViewUrl = $this->getProposalRepository()->getDefaultProposalLink($proposal->proposalId);

            $shared_proposal = 0;

            if($this->account()->getCompany()->getCompanyId() != $proposal->company_id){
                $shared_proposal = 1;
            }

            // Populate the datatables array
            $proposals[] = array(
                '0' => $this->load->view('templates/proposals/table/check', array('proposal' => $proposal), true),
                '1' => $this->load->view('templates/proposals/table/actions', array(
                    'proposal' => $proposal,
                    'action' => $action,
                    'group' => $group,
                    'userAccount' => $this->account(),
                    'proposalViewUrl' => $proposalViewUrl->getUrl(),
                    'is_child_company' => $is_child_company,
                    'shared_proposal' => $shared_proposal,
                ), true),
                '2' => date('m/d/y', $proposal->created + TIMEZONE_OFFSET),
                '3' => $this->load->view('templates/proposals/table/status-dropdown', array('proposal' => $proposal),
                    true),
                '4' => ($proposal->win_date) ? date('m/d/y', $proposal->win_date + TIMEZONE_OFFSET) : '-',
                '5' => ($proposal->jobNumber) ? $proposal->jobNumber : '-',
                '6' => $proposal->clientAccountName,
                '7' => $this->load->view('templates/proposals/table/project-name', array('proposal' => $proposal),
                    true),
                '8' => $this->load->view('templates/proposals/table/image-count', array('proposal' => $proposal), true),
                '9' => $this->load->view('templates/proposals/table/formatted-price',
                    array('proposal' => $proposal, 'services' => $services), true),
                '10' => $this->load->view('templates/proposals/table/contact', array('proposal' => $proposal), true),
                '11' => $this->load->view('templates/proposals/table/owner', array('proposal' => $proposal), true),
                '12' => $this->load->view('templates/proposals/table/last-activity', array('proposal' => $proposal),
                    true),
                '13' => $this->load->view('templates/proposals/table/email-status', array('proposal' => $proposal),
                    true),
                '14' => $this->load->view('templates/proposals/table/delivery-status', array('proposal' => $proposal),
                    true),
                '15' => $this->load->view('templates/proposals/table/open-status', array('proposal' => $proposal),
                    true),
                '16' => $this->load->view('templates/proposals/table/audit-status', array('proposal' => $proposal),
                    true),
                '17' => $this->load->view('templates/proposals/table/estimate-status', array('proposal' => $proposal), true),
                '18' => $this->load->view('templates/proposals/table/profit-price', array('proposal' => $proposal), true)
            );
        }
        $total = $this->account()->getAccStatsProposalsData($action, true)[0]->total;
        $json["iTotalRecords"] = $total;
        $json["iTotalDisplayRecords"] = $total;
        $json['aaData'] = $proposals;
        $json['sEcho'] = $this->input->get('sEcho');
        echo json_encode($json);
    }


    public function hideProposalForExternal()
    {
        $response = [];
        $proposal = $this->em->findProposal($this->input->post('proposal_id'));
        $proposal->setIsHiddenToView(1);
        $this->em->persist($proposal);
        $this->em->flush();
        $this->log_manager->add(\models\ActivityAction::HIDE_PROPOSAL, 'Proposal Hidden', $proposal->getClient(), $proposal);
        $response['success'] = true;
        echo json_encode($response);
    }

    public function individualExcludeResend()
    {
        $response = [];
        $proposal = $this->em->findProposal($this->input->post('proposal_id'));
        $proposal->setResendExcluded(1);
        $this->em->persist($proposal);
        $this->em->flush();
        $this->log_manager->add(\models\ActivityAction::EXCLUDE_PROPOSAL_FROM_EMAIL, 'Proposal Excluded from Resend Campaigns', $proposal->getClient(), $proposal);
        //Event Log
        $this->getProposalEventRepository()->proposalEmailExcluded($proposal, $this->account());
        $response['success'] = true;
        echo json_encode($response);
    }

    public function individualIncludeResend()
    {
        $response = [];
        $proposal = $this->em->findProposal($this->input->post('proposal_id'));
        $proposal->setResendExcluded(0);
        $this->em->persist($proposal);
        $this->em->flush();
        $this->log_manager->add(\models\ActivityAction::INCLUDE_PROPOSAL_FROM_EMAIL, 'Proposal Included from Resend Campaigns', $proposal->getClient(), $proposal);
        //Event Log
        $this->getProposalEventRepository()->proposalEmailIncluded($proposal, $this->account());
        $response['success'] = true;
        echo json_encode($response);
    }

    public function individualEnableAutoResend()
    {
        $response = [];
        $proposal = $this->em->findProposal($this->input->post('proposal_id'));
        $proposal->setResendEnabled(1);
        $this->em->persist($proposal);
        $this->em->flush();
        $this->log_manager->add(0, 'Proposal Enable Auto Resend', $proposal->getClient(), $proposal);
        $response['success'] = true;
        echo json_encode($response);
    }

    public function individualDisableAutoResend()
    {
        $response = [];
        $proposal = $this->em->findProposal($this->input->post('proposal_id'));
        $proposal->setResendEnabled(0);
        $this->em->persist($proposal);
        $this->em->flush();
        $this->log_manager->add(0, 'Proposal Disable Auto Resend', $proposal->getClient(), $proposal);
        $response['success'] = true;
        echo json_encode($response);
    }

    public function clientIndividualExcludeResend()
    {
        $response = [];

        $client = $this->em->find('\models\Clients', $this->input->post('client_id'));
        $client->setResendExcluded(1);
        $this->em->persist($client);
        $this->em->flush();
        $this->log_manager->add(\models\ActivityAction::EXCLUDE_CONTACT_FROM_EMAIL, 'Client Exclude from Resend Campaigns');

        $job_array = [
            'client_id' => $this->input->post('client_id'),
            'account_id' => $this->account()->getAccountId(),
            'exclude' => 1,
        ];
        $client_id = $this->input->post('client_id');
        $this->db->query("update proposals set resend_excluded='1' where client={$client_id}");
        $this->load->library('jobs');

        // Save the opaque image
        $this->jobs->create($_ENV['QUEUE_EMAIL'], 'jobs', 'client_individual_exclude_include_email', $job_array, 'test job');

        $response['success'] = true;
        echo json_encode($response);
    }

    public function clientIndividualIncludeResend()
    {
        $response = [];

        $client = $this->em->find('\models\Clients', $this->input->post('client_id'));
        $client->setResendExcluded(0);
        $this->em->persist($client);
        $this->em->flush();
        $this->log_manager->add(\models\ActivityAction::INCLUDE_CONTACT_FROM_EMAIL, 'Client Included from Resend Campaigns');

        $job_array = [
            'client_id' => $this->input->post('client_id'),
            'account_id' => $this->account()->getAccountId(),
            'exclude' => 0,
        ];
        $client_id = $this->input->post('client_id');
        $this->db->query("update proposals set resend_excluded='0' where client={$client_id}");
        $this->load->library('jobs');

        // Save the opaque image
        $this->jobs->create($_ENV['QUEUE_EMAIL'], 'jobs', 'client_individual_exclude_include_email', $job_array, 'test job');

        $response['success'] = true;
        echo json_encode($response);
    }

    public function showProposalForExternal()
    {
        $response = [];
        $proposal = $this->em->findProposal($this->input->post('proposal_id'));
        $proposal->setIsHiddenToView(0);
        $this->em->persist($proposal);
        $this->em->flush();
        $this->log_manager->add(\models\ActivityAction::VISIBLE_PROPOSAL, 'Proposal Visible', $proposal->getClient(), $proposal);
        $response['success'] = true;
        echo json_encode($response);
    }


    public function groupShowProposalForExternal()
    {
        $this->load->library('JsonResponse');
        $this->load->library('/helpers/ProposalHelper', array('account' => $this->account()));

        $ids = $this->input->post('ids');

        $response = new JsonResponse();
        $count = 0;

        foreach ($ids as $id) {
            $proposal = $this->em->findProposal($id);
            /* @var $proposal \models\Proposals */

            if ($proposal) {
                $proposal->setIsHiddenToView(0);
                $this->em->persist($proposal);
                $this->log_manager->add(\models\ActivityAction::VISIBLE_PROPOSAL, 'Proposal Visible', $proposal->getClient(), $proposal);
                $count++;
            }

        }
        $this->em->flush();

        $response->success = true;
        $response->count = $count;

        $response->send();
    }

    public function groupHideProposalForExternal()
    {
        $this->load->library('JsonResponse');
        $this->load->library('/helpers/ProposalHelper', array('account' => $this->account()));

        $ids = $this->input->post('ids');

        $response = new JsonResponse();
        $count = 0;

        foreach ($ids as $id) {
            $proposal = $this->em->findProposal($id);
            /* @var $proposal \models\Proposals */

            if ($proposal) {
                $proposal->setIsHiddenToView(1);
                $this->em->persist($proposal);
                $this->log_manager->add(\models\ActivityAction::HIDE_PROPOSAL, 'Proposal Hidden', $proposal->getClient(), $proposal);
                $count++;
            }

        }
        $this->em->flush();

        $response->success = true;
        $response->count = $count;

        $response->send();
    }

    public function groupExcludeResend()
    {
        $this->load->library('JsonResponse');
        $ids = $this->input->post('ids');

        $response = new JsonResponse();
        $count = 0;

        foreach ($ids as $id) {
            $proposal = $this->em->findProposal($id);
            /* @var $proposal \models\Proposals */

            if ($proposal) {
                $proposal->setResendExcluded(1);
                $this->em->persist($proposal);
                $this->log_manager->add(\models\ActivityAction::EXCLUDE_PROPOSAL_FROM_EMAIL, 'Proposal Excluded from email Campaign', $proposal->getClient(), $proposal);
                //Event Log
                $this->getProposalEventRepository()->proposalEmailExcluded($proposal, $this->account());
                $count++;
            }

        }
        $this->em->flush();

        $response->success = true;
        $response->count = $count;

        $response->send();
    }


    public function groupIncludeResend()
    {
        $this->load->library('JsonResponse');
        $ids = $this->input->post('ids');

        $response = new JsonResponse();
        $count = 0;

        foreach ($ids as $id) {
            $proposal = $this->em->findProposal($id);
            /* @var $proposal \models\Proposals */

            if ($proposal) {
                $proposal->setResendExcluded(0);
                $this->em->persist($proposal);
                $this->log_manager->add(\models\ActivityAction::INCLUDE_PROPOSAL_FROM_EMAIL, 'Proposal Included from email Campaign', $proposal->getClient(), $proposal);
                //Event Log
                $this->getProposalEventRepository()->proposalEmailIncluded($proposal, $this->account());
                $count++;
            }
        }
        $this->em->flush();

        $response->success = true;
        $response->count = $count;
        $response->send();

    }

    public function groupEnableResend()
    {
        $this->load->library('JsonResponse');
        $ids = $this->input->post('ids');

        $response = new JsonResponse();
        $count = 0;

        foreach ($ids as $id) {
            $proposal = $this->em->findProposal($id);
            /* @var $proposal \models\Proposals */

            if ($proposal) {
                $proposal->setResendEnabled(1);
                $this->em->persist($proposal);
                $this->log_manager->add(0, 'Proposal Auto Resend Enable', $proposal->getClient(), $proposal);
                
                $count++;
            }
        }
        $this->em->flush();

        $response->success = true;
        $response->count = $count;
        $response->send();

    }

    public function groupDisableResend()
    {
        $this->load->library('JsonResponse');
        $ids = $this->input->post('ids');

        $response = new JsonResponse();
        $count = 0;

        foreach ($ids as $id) {
            $proposal = $this->em->findProposal($id);
            /* @var $proposal \models\Proposals */

            if ($proposal) {
                $proposal->setResendEnabled(0);
                $this->em->persist($proposal);
                $this->log_manager->add(0, 'Proposal Auto Resend Disable', $proposal->getClient(), $proposal);
               
                $count++;
            }
        }
        $this->em->flush();

        $response->success = true;
        $response->count = $count;
        $response->send();

    }

    public function groupClientsIncludeResend()
    {
        $this->load->library('JsonResponse');
        $ids = $this->input->post('ids');

        $response = new JsonResponse();
        $count = 0;

        foreach ($ids as $id) {
            $client = $this->em->find('\models\Clients', $id);
            /* @var $proposal \models\Proposals */

            if ($client) {
                $client->setResendExcluded(0);
                $this->em->persist($client);
                $this->log_manager->add(\models\ActivityAction::INCLUDE_CONTACT_FROM_EMAIL, 'Client Included from email Campaign');
                $job_array = [
                    'client_id' => $id,
                    'account_id' => $this->account()->getAccountId(),
                    'exclude' => 0,
                ];


                $this->db->query("update proposals set resend_excluded='0' where client={$id}");
                $this->load->library('jobs');

                // Save the opaque image
                $this->jobs->create($_ENV['QUEUE_EMAIL'], 'jobs', 'client_individual_exclude_include_email', $job_array, 'test job');
                $count++;
            }
        }
        $this->em->flush();

        $response->success = true;
        $response->count = $count;
        $response->send();

    }

    public function groupClientsExcludeResend()
    {
        $this->load->library('JsonResponse');
        $ids = $this->input->post('ids');

        $response = new JsonResponse();
        $count = 0;

        foreach ($ids as $id) {
            $client = $this->em->find('\models\Clients', $id);
            /* @var $proposal \models\Proposals */

            if ($client) {
                $client->setResendExcluded(1);
                $this->em->persist($client);
                $this->log_manager->add(\models\ActivityAction::EXCLUDE_CONTACT_FROM_EMAIL, 'Client Excluded from email Campaign');
                $job_array = [
                    'client_id' => $id,
                    'account_id' => $this->account()->getAccountId(),
                    'exclude' => 1,
                ];
                $this->db->query("update proposals set resend_excluded='1' where client={$id}");

                $this->load->library('jobs');
                // Save the opaque image
                $this->jobs->create($_ENV['QUEUE_EMAIL'], 'jobs', 'client_individual_exclude_include_email', $job_array, 'test job');
                $count++;
            }

        }
        $this->em->flush();

        $response->success = true;
        $response->count = $count;

        $response->send();
    }

    public function setDateRange()
    {
        // Filter for account page
        $this->session->set_userdata('pStatsFilterFrom', $this->input->post('from'));
        $this->session->set_userdata('pStatsFilterTo', $this->input->post('to'));
        // Filter for stats page clickthrough
        $this->session->set_userdata('pStatusFilterFrom', $this->input->post('from'));
        $this->session->set_userdata('pStatusFilterTo', $this->input->post('to'));
        echo 1;
    }

    public function ajaxGetUserBusinessTypes($user_id)
    {
        $businessTypes = $this->account()->getUserBusinessTypesTableData($user_id);

        $filteredBusinessTypes = $this->account()->getUserBusinessTypesTableData($user_id, true);
        $data = [];
        $businessTypesData = [];

        foreach ($businessTypes as $businessType) {
            $percent_td = ($businessType->percent_total > 0) ? '<a href="' . base_url() . 'proposals/stats/type_' . $businessType->id . '/' . $user_id . '/won_rate" title="View Proposals" class="tiptip "  >' . round($businessType->percent_total, 2) . ' % </a>' : round($businessType->percent_total, 2) . ' %';
            $actual_percent = ($businessType->totalBid > 0) ? (($businessType->totalSold * 100) / $businessType->totalBid) : 0;
            if ($actual_percent > $businessType->percent_total) {
                $percent_td .= ' <i class="fa fa-fw fa-info-circle  tiptipleft right" style="margin-top: 1px;" title="This % does not match the Won $ amount.</br></br>This is because you have won a proposal that was created before the time range you selected.</br></br>The Win Rate is only for proposals you created AND won in the time range."></i>';
            } else if ($actual_percent < $businessType->percent_total) {
                $percent_td .= ' <i class="fa fa-fw fa-info-circle  tiptipleft right" style="margin-top: 1px;" title="This % does not match the Won $ amount.</br></br>This is because you have some proposals marked as won, but do not have a win date saved which means they are not included in the Won $. </br></br>Update the win rate of your won proposals and this number will update automatically."></i>';
            }


            $businessTypesData[] = [

                $businessType->type_name,
                ($businessType->numProposals > 0) ? '<a href="' . base_url() . 'proposals/stats/type_' . $businessType->id . '/' . $user_id . '" title="View Proposals" class="tiptip show_stats_proposals"  >' . $businessType->numProposals . '</a>' : $businessType->numProposals,
                ($businessType->totalBid > 0) ? '<a href="' . base_url() . 'proposals/stats/type_' . $businessType->id . '/' . $user_id . '" title="View Proposals" class="tiptip show_stats_proposals"  >$' . number_format($businessType->totalBid) . '</a>' : '$' . number_format($businessType->totalBid),
                ($businessType->totalOpen > 0) ? '<a href="' . base_url() . 'proposals/stats/type_' . $businessType->id . '/' . $user_id . '/open" title="View Proposals" class="tiptip "  >$' . number_format($businessType->totalOpen) . '</a>' : '$' . number_format($businessType->totalOpen),
                ($businessType->totalOther > 0) ? '<a href="' . base_url() . 'proposals/stats/type_' . $businessType->id . '/' . $user_id . '/other" title="View Proposals" class="tiptip "  >$' . number_format($businessType->totalOther) . '</a>' : '$' . number_format($businessType->totalOther),
                ($businessType->totalSold > 0) ? '<a href="' . base_url() . 'proposals/stats/type_' . $businessType->id . '/' . $user_id . '/won" title="View Proposals" class="tiptip "  >$' . number_format($businessType->totalSold) . '</a>' : '$' . number_format($businessType->totalSold),
                $percent_td,

            ];
        }

        $data['aaData'] = $businessTypesData;
        $data['sEcho'] = $this->input->get('sEcho');
        $data["iTotalRecords"] = count($filteredBusinessTypes);
        $data["iTotalDisplayRecords"] = count($filteredBusinessTypes);
        echo json_encode($data);
    }

    public function ajaxGetDashboardBusinessTypes()
    {

        $companyRepo = $this->getCompanyRepository();
        $accounts = [];

        switch ($this->input->get('user')) {

            case 'user':

                if ($this->input->get('accountId')) {
                    $accounts = [
                        $this->em->findAccount($this->input->get('accountId')),
                    ];
                } else {
                    // If it's just a user logged in, there's no account ID
                    $accounts = [
                        $this->account(),
                    ];
                }

                $sub_url = '/' . $this->input->get('accountId');
                break;

            case 'branch':
                $accounts = $companyRepo->getSalesAccounts($this->account()->getCompanyId(),
                    $this->input->get('branchId'));
                $sub_url = '/user/branch_' . $this->input->get('branchId');
                break;

            case 'company':
                $accounts = $companyRepo->getSalesAccounts($this->account()->getCompanyId());
                $sub_url = '/user/company';
                break;
        }
        $accountArray = array();
        foreach ($accounts as $account) {
            /* @var $account \models\Accounts */
            array_push($accountArray, $account->getAccountId());

        }

        if (count($accountArray) > 0) {
            $users = implode(',', $accountArray);
            $businessTypes = $this->account()->getDashboardBusinessTypesTableData($users);
            //$filteredBusinessTypes = $this->account()->getDashboardBusinessTypesTableData($users,true);
        } else {
            $businessTypes = [];
            //$filteredBusinessTypes = [];
        }

        $data = [];
        $businessTypesData = [];

        foreach ($businessTypes as $businessType) {
            $percent_td = ($businessType->percent_total > 0) ? '<a href="' . base_url() . 'proposals/stats/type_' . $businessType->id . $sub_url . '/won_rate" title="View Proposals" class="tiptip "  >' . round($businessType->percent_total, 2) . ' % </a>' : round($businessType->percent_total, 2) . ' %';
            $actual_percent = ($businessType->totalBid > 0) ? (($businessType->totalSold * 100) / $businessType->totalBid) : 0;
            if ($actual_percent > $businessType->percent_total) {
                $percent_td .= ' <i class="fa fa-fw fa-info-circle  tiptipleft right" style="margin-top: 1px;" title="This % does not match the Won $ amount.</br></br>This is because you have won a proposal that was created before the time range you selected.</br></br>The Win Rate is only for proposals you created AND won in the time range."></i>';
            } else if ($actual_percent < $businessType->percent_total) {
                $percent_td .= ' <i class="fa fa-fw fa-info-circle  tiptipleft right" style="margin-top: 1px;" title="This % does not match the Won $ amount.</br></br>This is because you have some proposals marked as won, but do not have a win date saved which means they are not included in the Won $. </br></br>Update the win rate of your won proposals and this number will update automatically."></i>';
            }
            $businessTypesData[] = [
                $businessType->type_name,
                ($businessType->numProposals > 0) ? '<a href="' . base_url() . 'proposals/stats/type_' . $businessType->id . $sub_url . '" title="View Proposals" class="tiptip show_stats_proposals"  >' . $businessType->numProposals . '</a>' : $businessType->numProposals,
                ($businessType->totalBid > 0) ? '<a href="' . base_url() . 'proposals/stats/type_' . $businessType->id . $sub_url . '" title="View Proposals" class="tiptip show_stats_proposals"  >$' . number_format($businessType->totalBid) . '</a>' : '$' . number_format($businessType->totalBid),
                ($businessType->totalOpen > 0) ? '<a href="' . base_url() . 'proposals/stats/type_' . $businessType->id . $sub_url . '/open" title="View Proposals" class="tiptip "  >$' . number_format($businessType->totalOpen) . '</a>' : '$' . number_format($businessType->totalOpen),
                ($businessType->totalOther > 0) ? '<a href="' . base_url() . 'proposals/stats/type_' . $businessType->id . $sub_url . '/other" title="View Proposals" class="tiptip "  >$' . number_format($businessType->totalOther) . '</a>' : '$' . number_format($businessType->totalOther),
                ($businessType->totalSold > 0) ? '<a href="' . base_url() . 'proposals/stats/type_' . $businessType->id . $sub_url . '/won" title="View Proposals" class="tiptip "  >$' . number_format($businessType->totalSold) . '</a>' : '$' . number_format($businessType->totalSold),
                $percent_td,

            ];
        }

        $data['aaData'] = $businessTypesData;
        $data['sEcho'] = $this->input->get('sEcho');
        $data["iTotalRecords"] = count($businessTypes);
        $data["iTotalDisplayRecords"] = count($businessTypes);
        echo json_encode($data);
    }


    public function businessTypeBreakdownDashboardTable()
    {

        //$businessTypes = $this->account()->getDashboardBusinessTypesTableData($user_id,true);

        $companyRepo = $this->getCompanyRepository();
        $accounts = [];
        // print_r($this->input->get('user'));die;
        switch ($this->input->get('user')) {

            case 'user':

                if ($this->input->get('accountId')) {
                    $accounts = [
                        $this->em->findAccount($this->input->get('accountId')),
                    ];
                } else {
                    // If it's just a user logged in, there's no account ID
                    $accounts = [
                        $this->account(),
                    ];
                }

                //$sub_url = '/'.$this->input->get('accountId');
                break;

            case 'branch':
                $accounts = $companyRepo->getSalesAccounts($this->account()->getCompanyId(),
                    $this->input->get('branchId'));
                // $sub_url = '/user/branch_'.$this->input->get('branchId');
                break;

            case 'company':

                $accounts = $companyRepo->getSalesAccounts($this->account()->getCompanyId());
                // $sub_url = '/user/company';
                break;
        }
        $accountArray = array();
        foreach ($accounts as $account) {
            /* @var $account \models\Accounts */
            array_push($accountArray, $account->getAccountId());

        }

        if (count($accountArray) > 0) {
            $users = implode(',', $accountArray);

            $businessTypes = $this->account()->getDashboardBusinessTypesTableData($users, true);
            // print_r($businessTypes);die;
            //$filteredBusinessTypes = $this->account()->getDashboardBusinessTypesTableData($users,true);
        } else {
            $businessTypes = [];
            //$filteredBusinessTypes = [];
        }


        $bid_total = 0;
        $win_total = 0;
        foreach ($businessTypes as $businessType) {
            $bid_total = $bid_total + $businessType->totalBid;
            $win_total = $win_total + $businessType->totalSold;
        }

        $data = [];
        $businessTypesData = [];

        foreach ($businessTypes as $businessType) {


            $win_final = ($win_total > 0) ? round(($businessType->totalSold / $win_total) * 100, 2) : 0;
            $bid_final = ($bid_total > 0) ? round(($businessType->totalBid / $bid_total) * 100, 2) : 0;

            $businessTypesData[] = [

                $businessType->type_name,
                '$' . number_format($businessType->totalBid, 0),

                ($businessType->totalBid > 0) ? round(($businessType->totalBid / $bid_total) * 100, 2) . ' %' : '0.0%',
                ($businessType->totalBid > 0) ? round(($businessType->totalBid / $bid_total) * 100, 2) : '0',
                '$' . number_format($businessType->totalSold, 0),
                ($businessType->totalSold > 0) ? round(($businessType->totalSold / $win_total) * 100, 2) . ' %' : '0.0%',
                ($businessType->totalSold > 0) ? round(($businessType->totalSold / $win_total) * 100, 2) : '0',
                $win_final - $bid_final,

            ];
        }

        $data['aaData'] = $businessTypesData;
        $data['sEcho'] = $this->input->get('sEcho');
        $data["iTotalRecords"] = count($businessTypes);
        $data["iTotalDisplayRecords"] = count($businessTypes);
        echo json_encode($data);
    }

    public function businessTypeBreakdownTable($user_id)
    {

        $businessTypes = $this->account()->getUserBusinessTypesTableData($user_id, true);

        $bid_total = 0;
        $win_total = 0;
        foreach ($businessTypes as $businessType) {
            $bid_total = $bid_total + $businessType->totalBid;
            $win_total = $win_total + $businessType->totalSold;
        }

        $data = [];
        $businessTypesData = [];

        foreach ($businessTypes as $businessType) {


            $win_final = ($win_total > 0) ? round(($businessType->totalSold / $win_total) * 100, 2) : 0;
            $bid_final = ($bid_total > 0) ? round(($businessType->totalBid / $bid_total) * 100, 2) : 0;

            $businessTypesData[] = [

                $businessType->type_name,

                ($businessType->totalBid > 0) ? round(($businessType->totalBid / $bid_total) * 100, 2) . ' %' : '0.0%',
                ($businessType->totalBid > 0) ? round(($businessType->totalBid / $bid_total) * 100, 2) : '0',
                ($businessType->totalSold > 0) ? round(($businessType->totalSold / $win_total) * 100, 2) . ' %' : '0.0%',
                ($businessType->totalSold > 0) ? round(($businessType->totalSold / $win_total) * 100, 2) : '0',
                $win_final - $bid_final,

            ];
        }

        $data['aaData'] = $businessTypesData;
        $data['sEcho'] = $this->input->get('sEcho');
        $data["iTotalRecords"] = count($businessTypes);
        $data["iTotalDisplayRecords"] = count($businessTypes);
        echo json_encode($data);
    }

    public function businessTypeUserInfoPie()
    {
        $this->load->library('stats/MyQueryServlet');
        $servlet = new MyQueryServlet();

        //$cAccount = $this->em->findClientAccount($this->input->post('accountId'));
        $userId = $this->input->post('user_id');
        $time = array();
        $time['start'] = strtotime($this->input->post('from'));
        $time['finish'] = strtotime("11:59:59pm " . $customFrom = $this->input->post('to'));

        $business_types = $this->getCompanyRepository()->getCompanyBusinessTypes($this->account()->getCompany());
        $totalVal = 0;

        // Create the datatable
        $data = new DataTable();
        // Colums for pie chart
        $data->addColumn(new ColumnDescription('type', ValueType::STRING, 'Type'));
        $data->addColumn(new ColumnDescription('value', ValueType::NUMBER, 'Value'));

        foreach ($business_types as $business_type) {
            $val = $business_type->getRangeCreatedProposalsBusinessType($time, $userId, $business_type->getId());
            $totalVal += $val;
            $theVal = (int)$val;

            // Only add the status if it has a value
            if ($theVal > 0) {
                $row = new TableRow(array($business_type->getTypeName(), $theVal));
                $data->addRow($row);
            }
        }

        if ($totalVal > 0) {
            $servlet->setDataTable($data);
            $servlet->execute();
        } else {
            echo json_encode(array('empty' => 1));
        }
    }

    public function businessTypeDashboardInfoPie()
    {
        $this->load->library('stats/MyQueryServlet');
        $servlet = new MyQueryServlet();

        //$cAccount = $this->em->findClientAccount($this->input->post('accountId'));
        $userId = $this->input->post('user_id');
        $time = array();
        if ($this->session->userdata('pStatusFilterFrom') && $this->session->userdata('pStatusFilterTo')) {
            $time['start'] = strtotime($this->session->userdata('pStatusFilterFrom'));

            $time['finish'] = strtotime("11:59:59pm " . $this->session->userdata('pStatusFilterTo'));

        }


        $business_types = $this->getCompanyRepository()->getCompanyBusinessTypes($this->account()->getCompany());
        $totalVal = 0;

        // Create the datatable
        $data = new DataTable();
        // Colums for pie chart
        $data->addColumn(new ColumnDescription('type', ValueType::STRING, 'Type'));
        $data->addColumn(new ColumnDescription('value', ValueType::NUMBER, 'Value'));


        $companyRepo = $this->getCompanyRepository();
        $accounts = [];
        // print_r($this->input->get('user'));die;
        switch ($this->input->post('user')) {

            case 'user':

                if ($this->input->post('accountId')) {
                    $accounts = [
                        $this->em->findAccount($this->input->post('accountId')),
                    ];
                } else {
                    // If it's just a user logged in, there's no account ID
                    $accounts = [
                        $this->account(),
                    ];
                }

                $sub_url = '/' . $this->input->post('accountId');
                break;

            case 'branch':
                $accounts = $companyRepo->getSalesAccounts($this->account()->getCompanyId(),
                    $this->input->post('branchId'));
                $sub_url = '/user/branch_' . $this->input->post('branchId');
                break;

            case 'company':

                $accounts = $companyRepo->getSalesAccounts($this->account()->getCompanyId());
                $sub_url = '/user/company';
                break;
        }
        $accountArray = array();
        foreach ($accounts as $account) {
            /* @var $account \models\Accounts */
            array_push($accountArray, $account->getAccountId());

        }


        if (count($accountArray) > 0) {
            $users = implode(',', $accountArray);
            foreach ($business_types as $business_type) {
                $val = $business_type->getRangeCreatedProposalsBusinessTypeDashboard($time, $users, $business_type->getId());
                $totalVal += $val;
                $theVal = (int)$val;

                // Only add the status if it has a value
                if ($theVal > 0) {
                    $row = new TableRow(array($business_type->getTypeName(), $theVal));
                    $data->addRow($row);
                }
            }
        }

        if ($totalVal > 0) {
            $servlet->setDataTable($data);
            $servlet->execute();
        } else {
            echo json_encode(array('empty' => 1));
        }
    }


    public function businessTypeSalesUserInfoPie()
    {
        $this->load->library('stats/MyQueryServlet');
        $servlet = new MyQueryServlet();

        //$cAccount = $this->em->findClientAccount($this->input->post('accountId'));
        $userId = $this->input->post('user_id');
        $time = array();
        $time['start'] = strtotime($this->input->post('from'));
        $time['finish'] = strtotime("11:59:59pm " . $customFrom = $this->input->post('to'));

        $business_types = $this->getCompanyRepository()->getCompanyBusinessTypes($this->account()->getCompany());
        $totalVal = 0;

        // Create the datatable
        $data = new DataTable();
        // Colums for pie chart
        $data->addColumn(new ColumnDescription('type', ValueType::STRING, 'Type'));
        $data->addColumn(new ColumnDescription('value', ValueType::NUMBER, 'Value'));

        foreach ($business_types as $business_type) {
            $val = $business_type->getRangeCreatedProposalsSalesBusinessType($time, $userId, $business_type->getId());
            $totalVal += $val;
            $theVal = (int)$val;

            // Only add the status if it has a value
            if ($theVal > 0) {
                $row = new TableRow(array($business_type->getTypeName(), $theVal));
                $data->addRow($row);
            }
        }

        if ($totalVal > 0) {
            $servlet->setDataTable($data);
            $servlet->execute();
        } else {
            echo json_encode(array('empty' => 1));
        }
    }

    public function groupProposalsChangeBusinessTypes()
    {
        $this->load->library('JsonResponse');

        $ids = $this->input->post('ids');
        $businessType = $this->input->post('businessType');

        $response = new JsonResponse();
        $count = 0;

        foreach ($ids as $id) {

            $proposal = $this->em->find('\models\Proposals', $id);
            $proposal->setBusinessTypeId($businessType);


            //Check business type assignment in account
            $this->getProposalRepository()->checkNewBusinessTypeProposalAssignment($proposal, $businessType, $this->account()->getCompany()->getCompanyId());
            // Log each change
            $this->log_manager->add(\models\ActivityAction::GROUP_CHANGE_PROPOSAL_BUSINESS_TYPE,
                "[Group Action] - User changed proposal Business Type ",
                $proposal->getClient(),
                $proposal,
                $proposal->getClient()->getCompany(),
                $this->account(),
                '',
                ''
            );


            $this->em->persist($proposal);

            $count++;
        }
        $this->em->flush();

        $response->success = true;
        $response->count = $count;

        $response->send();
    }

    function get_campaign_proposal_status_stats($pgsId)
    {
        $sql = "SELECT SUM(p.price) as p_total, COUNT(p.proposalId) as p_count,p.proposalStatus as proposal_status_id, pgre.proposal_status_id as campaign_status_id, stp.text as proposal_status,stc.text as campaign_status
        FROM proposal_group_resend_email pgre 
        LEFT JOIN proposals p ON pgre.proposal_id = p.proposalId
        LEFT JOIN statuses stp ON p.proposalStatus = stp.id
        LEFT JOIN statuses stc ON pgre.proposal_status_id = stc.id
        WHERE pgre.resend_id = " . $pgsId . " AND p.duplicateOf IS NULL  GROUP BY proposal_status,campaign_status HAVING proposal_status != campaign_status";

        $Resend_proposals = $this->db->query($sql)->result();
        return $Resend_proposals;

    }

    public function getTableNotes()
    {
        $notes = $this->em->createQuery("SELECT n FROM models\Notes n WHERE n.type='" . $this->input->post('type') . "' AND n.relationId=" . $this->input->post('relationId') . ' ORDER BY n.added DESC ')->setMaxResults(10)->getResult();
        $table = '<style>table tr td{padding:5px;}</style><table  width="100%" cellpadding="0"  cellspacing="0"><thead><tr><th width="30%">Date</th><th width="25%">User</th><th width="45%">Text</th></tr></thead><tbody>';

        if (!count($notes)) {

            //$table .='<tr class="even"><td colspan="3" align="center">No notes!</td></tr>';

            echo 'No Notes !!';
            die;
        } else {
            $k = 0;
            $users = array();
            foreach ($notes as $note) {
                if (!isset($users[$note->getUser()])) {
                    $user = $this->em->find('models\Accounts', $note->getUser());
                    if ($user) {
                        $name = '';
                        $names = explode(' ', trim($user->getFullName()));
                        $name .= substr($user->getFirstName(), 0, 1) . '. ';
                        $name .= substr($user->getLastName(), 0, 1) . '.';
                        $name = trim($name);
                        $users[$note->getUser()] = array($name, $user->getFullName());
                    } else {
                        $users[$note->getUser()] = array('N / A', 'No User');
                    }
                }
                $k++;

                $table .= '<tr > <td>' . date('m/d/Y g:ia', $note->getAdded()) . '</td><td>' . $users[$note->getUser()][1] . '</td><td> ' . $note->getNoteText() . '</td></tr>';

            }
        }
        $table .= '</tbody></table>';
        echo $table;
    }

    public function getProspectNotes()
    {
        $notes = $this->em->createQuery("SELECT n FROM models\Notes n WHERE n.type='prospect' AND n.relationId=" . $this->input->post('prospectId') . ' ORDER BY n.added DESC ')->setMaxResults(10)->getResult();
        $table = '<style>table tr td{padding:5px;}</style><table  width="100%" cellpadding="0"  cellspacing="0"><thead><tr><th width="30%">Date</th><th width="25%">User</th><th width="45%">Text</th></tr></thead><tbody>';

        if (!count($notes)) {

            //$table .='<tr class="even"><td colspan="3" align="center">No notes!</td></tr>';

            echo 'No Notes !!';
            die;
        } else {
            $k = 0;
            $users = array();
            foreach ($notes as $note) {
                if (!isset($users[$note->getUser()])) {
                    $user = $this->em->find('models\Accounts', $note->getUser());
                    if ($user) {
                        $name = '';
                        $names = explode(' ', trim($user->getFullName()));
                        $name .= substr($user->getFirstName(), 0, 1) . '. ';
                        $name .= substr($user->getLastName(), 0, 1) . '.';
                        $name = trim($name);
                        $users[$note->getUser()] = array($name, $user->getFullName());
                    } else {
                        $users[$note->getUser()] = array('N / A', 'No User');
                    }
                }
                $k++;

                $table .= '<tr > <td>' . date('m/d/Y g:ia', $note->getAdded()) . '</td><td>' . $users[$note->getUser()][1] . '</td><td> ' . $note->getNoteText() . '</td></tr>';

            }
        }
        $table .= '</tbody></table>';
        echo $table;
    }

    function getProposalPriceBreakdown()
    {
        $s = array('$', ',');
        $r = array('', '');

        $proposalId = $this->input->post('proposalId');
        if ($proposalId) {
            $non_optional_services = $this->db->query("SELECT * FROM proposal_services WHERE proposal= " . $proposalId . " AND optional != 1")->result();
            $priceBreakdown = '<b>Price Breakdown:</b><hr style="border:1px solid #8d8d8d;" />';
            if ($non_optional_services) {
                foreach ($non_optional_services as $non_optional_service) {
                    if($non_optional_service->amountQty && $non_optional_service->amountQty > 0 )
                    {
                         $non_optional_service->price = floatval(str_replace($s, $r, $non_optional_service->price));
                         $non_optional_service->price = $non_optional_service->price * $non_optional_service->amountQty;
                         $non_optional_service->price = '$' . number_format($non_optional_service->price,2);
                    }
                    $priceBreakdown .= "<p class='clearfix' style='padding:2px 0px'><strong class='title'>" . $non_optional_service->serviceName . "</strong><strong class='price'>" . $non_optional_service->price . '</strong></p>';
                }
            }
            $optional_services = $this->db->query("SELECT * FROM proposal_services WHERE proposal= " . $proposalId . " AND optional = 1")->result();
            if ($optional_services) {
                $priceBreakdown .= '<br><b style="margin-top:5px;">Optional Services:</b><hr style="border:1px solid #8d8d8d;" />';
                foreach ($optional_services as $optional_service) {
                     if($optional_service && $optional_service->amountQty > 0){
                         $optional_service->price = floatval(str_replace($s, $r, $optional_service->price));
                         $optional_service->price = $optional_service->price * $optional_service->amountQty;
                         $optional_service->price = '$' . number_format($optional_service->price,2);
                     }
                    $priceBreakdown .= "<p class='clearfix' style='padding:2px 0px'><strong class='title'>" . $optional_service->serviceName . "</strong><strong class='price'>" . $optional_service->price . '</strong></p>';
                }
            }
            echo $priceBreakdown;
        } else {
            echo 0;
        }
    }


    function getProspectBusinessTyeps()
    {
        $response = new JsonResponse();
        $prospect_id = $this->input->post('prospect_id');
        $bt = $this->getProspectRepository()->getProspectBusinessTypes($prospect_id);
        $response->success = true;
        $response->business_types = $bt;

        $response->send();
    }

    public function prospectsChangeBusinessTypes()
    {
        $prospect_id = $this->input->post('prospect_id');
        $businessTypes = $this->input->post('businessTypes');

        $oldBT = $this->getProspectRepository()->getProspectBusinessTypes($prospect_id);
        $oldBTArray = array();
        foreach ($oldBT as $bt) {
            array_push($oldBTArray, $bt->type_name);
        }
        $oldBTNames = implode(",", $oldBTArray);
        $newBTNames = '';
        $response = new JsonResponse();

        $prospect = $this->em->findProspect($prospect_id);
        $this->getCompanyRepository()->clearProspectAssignedBusinessTypes($this->account()->getCompany(), $prospect->getProspectId());

        if ($businessTypes) {

            foreach ($businessTypes as $business_type) {

                $assignment = new models\BusinessTypeAssignment();
                $assignment->setBusinessTypeId($business_type);
                $assignment->setCompanyId($this->account()->getCompany()->getCompanyId());
                $assignment->setProspectId($prospect_id);
                $this->em->persist($assignment);
            }

            $this->em->flush();

            $newBT = $this->getProspectRepository()->getProspectBusinessTypes($prospect_id);
            $newBTArray = array();
            foreach ($newBT as $bt) {
                array_push($newBTArray, $bt->type_name);
            }
            $newBTNames = implode(",", $newBTArray);
        }
        if ($oldBTNames != '' || $newBTNames != '') {
            if ($oldBTNames && $newBTNames) {
                $log_msg = $prospect->getFullName() . ' Prospect Business Types changed from "' . $oldBTNames . '" to "' . $newBTNames . '"';
            } else if ($oldBTNames == '') {
                $log_msg = $prospect->getFullName() . ' Prospect Business Types added "' . $newBTNames . '"';
            } else if ($newBTNames == '') {
                $log_msg = $prospect->getFullName() . ' Prospect Business Types Removed "' . $oldBTNames . '"';
            }
            // Log each change
            $this->log_manager->add(\models\ActivityAction::PROSPECT_CHANGE_BUSINESS_TYPE,
                $log_msg,
                null,
                null,
                null,
                $this->account()
            );
        }

        $response->success = true;
        $response->echo = 1;
        $response->send();
    }

    function getLeadBusinessTyeps()
    {
        $response = new JsonResponse();
        $lead_id = $this->input->post('lead_id');
        $bt = $this->getLeadRepository()->getLeadBusinessTypes($lead_id);
        $response->success = true;
        $response->business_types = $bt;

        $response->send();
    }

    public function leadsChangeBusinessTypes()
    {
        $lead_id = $this->input->post('lead_id');
        $businessType = $this->input->post('businessTypes');

        $oldBT = $this->getLeadRepository()->getLeadBusinessTypes($lead_id);
        $oldBTArray = array();
        foreach ($oldBT as $bt) {
            array_push($oldBTArray, $bt->type_name);
        }
        $oldBTNames = implode(",", $oldBTArray);
        $newBTNames = '';
        $response = new JsonResponse();

        $lead = $this->em->findLead($lead_id);


        if ($businessType) {
            $this->getCompanyRepository()->clearLeadAssignedBusinessTypes($this->account()->getCompany(), $lead->getLeadId());
            //foreach($businessTypes as $business_type){

            $assignment = new models\BusinessTypeAssignment();
            $assignment->setBusinessTypeId($businessType);
            $assignment->setCompanyId($this->account()->getCompany()->getCompanyId());
            $assignment->setLeadId($lead_id);
            $this->em->persist($assignment);
            //}

            $this->em->flush();

            $newBT = $this->getLeadRepository()->getLeadBusinessTypes($lead_id);
            $newBTArray = array();
            foreach ($newBT as $bt) {
                array_push($newBTArray, $bt->type_name);
            }
            if (count($newBTArray) > 0) {
                $newBTNames = implode(",", $newBTArray);
            }
        }
        if ($oldBTNames != '' || $newBTNames != '') {
            if ($oldBTNames && $newBTNames) {
                $log_msg = $lead->getFirstName() . ' Lead Business Types changed from "' . $oldBTNames . '" to "' . $newBTNames . '"';
            } else if ($oldBTNames == '') {
                $log_msg = $lead->getFirstName() . ' Lead Business Types added "' . $newBTNames . '"';
            } else if ($newBTNames == '') {
                $log_msg = $lead->getFirstName() . ' Lead Business Types Removed "' . $oldBTNames . '"';
            }
            // Log each change
            $this->log_manager->add(\models\ActivityAction::LEAD_CHANGE_BUSINESS_TYPE,
                $log_msg,
                null,
                null,
                null,
                $this->account()
            );
        }

        $response->success = true;
        $response->echo = 1;
        $response->send();
    }

    function getAccountBusinessTyeps()
    {
        $response = new JsonResponse();
        $account_id = $this->input->post('account_id');
        $bt = $this->getAccountRepository()->getAccountBusinessTypes($account_id);
        $disableBT = $this->getProposalRepository()->getAccountBusinessTypeProposalArray($account_id);

        $response->success = true;
        $response->business_types = $bt;
        $response->disable_business_types = array_values(array_filter($disableBT, function ($value) {
            return !is_null($value) && $value !== '';
        }));

        $response->send();
    }

    public function accountsChangeBusinessTypes()
    {
        $account_id = $this->input->post('account_id');
        $businessTypes = $this->input->post('businessTypes');

        $oldBT = $this->getAccountRepository()->getAccountBusinessTypes($account_id);
        $oldBTArray = array();
        foreach ($oldBT as $bt) {
            array_push($oldBTArray, $bt->type_name);
        }
        $oldBTNames = implode(",", $oldBTArray);
        $newBTNames = '';
        $response = new JsonResponse();


        $cAccount = $this->em->findClientAccount($account_id);

        if ($businessTypes) {

            if ($this->input->post('apply_bt_on_contact') == '1') {
                $clients = $this->getClientRepository()->getAccountClients($account_id);

                foreach ($clients as $client) {
                    if (count($businessTypes) > 1) {
                        $this->getProposalRepository()->updateClientBusinessTypeOnProposal($client->clientId, $this->input->post('apply_bt_on_proposal'));
                    } else {
                        $this->getProposalRepository()->updateClientBusinessTypeOnProposal($client->clientId, $businessTypes[0]);
                    }

                    // if just add new ones
                    // foreach ($businessTypes as $business_type) {
                    //     $this->getClientRepository()->checkClientBusinessTypeAssignment($client->clientId,$business_type,$this->account()->getCompany()->getCompanyId());

                    // }
                    //if need to remove client business type
                    $this->getCompanyRepository()->checkclearClientAssignedBusinessTypes($this->account()->getCompany(), $client->clientId, $businessTypes);
                }
            }

            $this->getCompanyRepository()->checkClearAccountAssignedBusinessTypes($this->account()->getCompany(), $account_id, $businessTypes);

            $newBT = $this->getAccountRepository()->getAccountBusinessTypes($account_id);
            $newBTArray = array();
            foreach ($newBT as $bt) {
                array_push($newBTArray, $bt->type_name);
            }
            $newBTNames = implode(",", $newBTArray);
        }
        if ($oldBTNames != '' || $newBTNames != '') {
            if ($oldBTNames && $newBTNames) {
                $log_msg = $cAccount->getOwnerCompany()->getCompanyName() . ' Account Business Types changed from "' . $oldBTNames . '" to "' . $newBTNames . '"';
            } else if ($oldBTNames == '') {
                $log_msg = $cAccount->getOwnerCompany()->getCompanyName() . ' Account Business Types added "' . $newBTNames . '"';
            } else if ($newBTNames == '') {
                $log_msg = $cAccount->getOwnerCompany()->getCompanyName() . ' Account Business Types Removed "' . $oldBTNames . '"';
            }
            // Log each change
            $this->log_manager->add(\models\ActivityAction::ACCOUNT_CHANGE_BUSINESS_TYPE,
                $log_msg,
                null,
                null,
                null,
                $this->account()
            );
        }

        $response->success = true;
        $response->echo = 1;
        $response->send();
    }

    function getClientBusinessTyeps()
    {
        $response = new JsonResponse();
        $client_id = $this->input->post('client_id');
        $bt = $this->getClientRepository()->getClientBusinessTypes($client_id);
        $disableBT = $this->getProposalRepository()->getClientBusinessTypeProposalArray($client_id);

        $response->success = true;
        $response->business_types = $bt;
        $response->disable_business_types = array_values(array_filter($disableBT, function ($value) {
            return !is_null($value) && $value !== '';
        }));

        $response->send();
    }

    public function clientsChangeBusinessTypes()
    {
        $client_id = $this->input->post('client_id');
        $businessTypes = $this->input->post('businessTypes');

        $oldBT = $this->getClientRepository()->getClientBusinessTypes($client_id);
        $oldBTArray = array();
        foreach ($oldBT as $bt) {
            array_push($oldBTArray, $bt->type_name);
        }
        $oldBTNames = implode(",", $oldBTArray);
        $newBTNames = '';
        $response = new JsonResponse();

        $client = $this->em->find('models\Clients', $client_id);

        if ($businessTypes) {

            if ($this->input->post('apply_bt_on_contact') == '1') {

                if (count($businessTypes) > 1) {
                    $this->getProposalRepository()->updateClientBusinessTypeOnProposal($client->getClientId(), $this->input->post('apply_bt_on_proposal'));
                } else {
                    $this->getProposalRepository()->updateClientBusinessTypeOnProposal($client->getClientId(), $businessTypes[0]);
                }

            }


            $this->getCompanyRepository()->checkClearClientAssignedBusinessTypes($this->account()->getCompany(), $client->getClientId(), $businessTypes);


            $newBT = $this->getClientRepository()->getClientBusinessTypes($client_id);
            $newBTArray = array();
            foreach ($newBT as $bt) {
                array_push($newBTArray, $bt->type_name);
            }
            $newBTNames = implode(",", $newBTArray);
        }
        if ($oldBTNames != '' || $newBTNames != '') {
            if ($oldBTNames && $newBTNames) {
                $log_msg = $client->getFullName() . ' Contact Business Types changed from "' . $oldBTNames . '" to "' . $newBTNames . '"';
            } else if ($oldBTNames == '') {
                $log_msg = $client->getFullName() . ' Contact Business Types added "' . $newBTNames . '"';
            } else if ($newBTNames == '') {
                $log_msg = $client->getFullName() . ' Contact Business Types Removed "' . $oldBTNames . '"';
            }
            // Log each change
            $this->log_manager->add(\models\ActivityAction::CONTACT_CHANGE_BUSINESS_TYPE,
                $log_msg,
                null,
                null,
                null,
                $this->account()
            );
        }

        $response->success = true;
        $response->echo = 1;
        $response->send();
    }

    function getProposalBusinessTyeps()
    {
        $response = new JsonResponse();
        $proposal_id = $this->input->post('proposal_id');
        $proposal = $this->em->find('\models\Proposals', $proposal_id);
        $response->success = true;
        $response->business_types = $proposal->getBusinessTypeId();

        $response->send();
    }

    public function proposalsChangeBusinessTypes()
    {
        $proposal_id = $this->input->post('proposal_id');

        $oldBTNames = '';
        $newBTNames = '';
        $oldBusinessType = false;
        $response = new JsonResponse();

        $businessType = $this->input->post('businessTypes');
        $newBusinessType = $this->em->find('\models\BusinessType', $businessType);
        $response = new JsonResponse();

        $proposal = $this->em->find('\models\Proposals', $proposal_id);
        if ($proposal->getBusinessTypeId()) {
            $oldBusinessType = $this->em->find('\models\BusinessType', $proposal->getBusinessTypeId());
        }

        $oldBTNames = ($oldBusinessType) ? $oldBusinessType->getTypeName() : '';
        $newBTNames = $newBusinessType->getTypeName();
        $proposal->setBusinessTypeId($businessType);
        $this->em->persist($proposal);

        $this->em->flush();
        //Check business type assignment in account
        $this->getProposalRepository()->checkNewBusinessTypeProposalAssignment($proposal, $businessType, $this->account()->getCompany()->getCompanyId());


        if ($oldBTNames != '' || $newBTNames != '') {
            if ($oldBTNames && $newBTNames) {
                $log_msg = $proposal->getProjectName() . ' Proposal Business Types changed from "' . $oldBTNames . '" to "' . $newBTNames . '"';
            } else if ($oldBTNames == '') {
                $log_msg = $proposal->getProjectName() . ' Proposal Business Types added "' . $newBTNames . '"';
            }
            // Log each change
            $this->log_manager->add('proposal_business_type_change',
                $log_msg,
                null,
                null,
                null,
                $this->account()
            );
        }

        $response->success = true;
        $response->echo = 1;
        $response->send();
    }


    function getProposalNameTiptip()
    {
        $proposalId = $this->input->post('proposalId');
        $proposal = $this->db->query("SELECT proposals.projectAddress, proposals.projectCity, proposals.projectState, proposals.projectZip,proposals.jobNumber,business_types.type_name as business_type_name FROM proposals LEFT JOIN business_types on proposals.business_type_id = business_types.id WHERE proposals.proposalId=" . $proposalId)->result()[0];
        $jobNumberText = '';

        if ($proposal->jobNumber) {
            $jobNumberText = 'Job Number - ' . $proposal->jobNumber;
        }

        $projectDetails = array(
            // $proposal->projectAddress,
            ($proposal->projectAddress) ? $proposal->projectAddress : '',
            ($proposal->projectCity) ? $proposal->projectCity : '',
            // $proposal->projectCity,
            ($proposal->projectState) ? $proposal->projectState : '',
            // $proposal->projectState,
            ($proposal->projectZip) ? $proposal->projectZip : ''
            // $proposal->projectZip
        );
        $proposalProjectAddress = implode(', ', $projectDetails);
        if ($proposal->business_type_name) {
            $proposalProjectAddress .= "<br/><br/><strong style='text-align:left'>Business:</strong>" . $proposal->business_type_name;
        }

        echo "<b style='text-align:left'>Project Details: " . $jobNumberText . "</b>" . $proposalProjectAddress;
    }

    function getProposalSigneeTiptip()
    {
        $proposalId = $this->input->post('proposalId');
        $proposal = $this->em->findProposal($proposalId);
        if($proposal){
            $company_signee_details = false;
            $signee_details = false;
            if($proposal->getSignatureId()){
                $signee_details = $this->db->query("SELECT firstname, lastname, company, email,title,comments,created_at FROM proposal_signatures  WHERE  id=" . $proposal->getSignatureId())->result();
            
            }
            if($proposal->getCompanySignatureId()){
                $company_signee_details = $this->db->query("SELECT firstname, lastname, company, email,title,comments,created_at FROM proposal_signatures  WHERE  id=" . $proposal->getCompanySignatureId())->result();
            }
            

            if($signee_details){
                $signee_details = $signee_details[0];

                    echo "<b style='text-align:center'>Signee Details: </b><span style='padding:15px;'><strong>Name:</strong>" . $signee_details->firstname . " " . $signee_details->lastname . "</span><br />
                <span style='padding:15px;'><strong>Title:</strong>" . $signee_details->title . "</span><br />
                <span style='padding:15px;'><strong>Company:</strong>" . $signee_details->company . "</span><br />
                <span style='padding:15px;'><strong>Email:</strong>" . $signee_details->email . "</span><br />
                <span style='padding:15px;'><strong>Comment:</strong>" . $signee_details->comments . "</span><br />
                <span style='padding:15px;'><strong>Signed at:</strong>" .date('m/d/Y g:i A', strtotime($signee_details->created_at) + TIMEZONE_OFFSET) . "</span><br />";
                 echo "<br /><br />";
            }
            
            if($company_signee_details){
                $company_signee_details = $company_signee_details[0];

                echo "<b style='text-align:center'>Company Details: </b><span style='padding:15px;'><strong>Who:</strong>" . $company_signee_details->firstname . " " . $company_signee_details->lastname . "</span><br />
                <span style='padding:15px;'><strong>When:</strong>" . date_format(date_create($company_signee_details->created_at), "m/d/y g:i A") . "</span><br />";
            }else{
                echo "<b style='text-align:center'>Company Details: </b><span style='padding:15px;'><strong>Who:</strong></span><br />
                <span style='padding:15px;'><strong>When:</strong></span><br />";
            }

            if(!$company_signee_details && !$signee_details){
                echo "NA";
            }
        }else{
            echo 'NA';
        }

    }

    

    function getProposalPermissionUserTiptip()
    {
        $proposalId = $this->input->post('proposalId');
        $proposal = $this->em->findProposal($proposalId);
        if($proposal){
            $log_msg = $proposal->getOwner()->getFullName().'<br/>';
            $user_permissions = $this->getProposalRepository()->getProposalUserPermissions($proposal->getProposalId());
            if($user_permissions){
                $log_msg = '<table><tr><th>Proposal Owner: </th><td>'.$proposal->getOwner()->getFullName().'</td></tr><tr><td></td><td></td></tr><tr><td></td><td></td></tr>';
                $row = 0;
                foreach($user_permissions as $permission_user){
                    if($proposal->getOwner()->getAccountId() != $permission_user->getUserId()){
                        $account = $this->em->findAccount($permission_user->getUserId());
                        if($account){
                            
                            if($row==0){
                                $log_msg .= '<tr><th>Permitted Users: </th><td>'.$account->getFullName().'</td></tr>';
                            }else{
                                $log_msg .= '<tr><td></td><td>'.$account->getFullName().'</td></tr>';
                            }
                            $row++;
                        }
                        
                    }
                    
                }
                $log_msg .= '</table>';
            }
            echo $log_msg; 
        }else{
            echo 'NA';
        }

    }
    
    function get_company_signee_details()
    {
        $proposalId = $this->input->post('proposal_id');
 
        $proposal = $this->em->findProposal($proposalId);
        $companySig = $this->getProposalRepository()->getCompanySignee($proposal);

        if ($companySig) {
            $company_firstname = $companySig->getFirstName();
            $company_lastname = $companySig->getLastName();
        }

        $firstname      = ($companySig) ? $company_firstname : $this->account()->getFirstName();
        $lastname       = ($companySig) ? $company_lastname : $this->account()->getLastName();
        $company_name   = ($companySig) ? $companySig->getCompanyName() : $this->account()->getCompany()->getCompanyName();
        $title          = ($companySig) ? $companySig->getTitle() : $this->account()->getTitle();
        $email          = ($companySig) ? $companySig->getEmail() : $this->account()->getEmail();

        $address        = ($companySig) ? $companySig->getAddress() : $this->account()->getAddress();
        $city           = ($companySig) ? $companySig->getCity() : $this->account()->getCity();
        $state          = ($companySig) ? $companySig->getState() : $this->account()->getState();
        $zip            = ($companySig) ? $companySig->getZip() : $this->account()->getZip();
        $cell_phone     = ($companySig) ? $companySig->getCellPhone() : $this->account()->getCellPhone();
        $office_phone   = ($companySig) ? $companySig->getOfficePhone() : '';

        $response = new JsonResponse();
        $response->success = true;
        $response->firstname = $firstname;
        $response->lastname = $lastname;
        $response->company_name = $company_name;
        $response->title = $title;
        $response->email = $email;

        $response->address = $address;
        $response->city = $city;
        $response->state = $state;
        $response->zip = $zip;
        $response->office_phone = $office_phone;
        $response->cell_phone = $cell_phone;

        $response->send();
    }

    function getAccountProposalCount($accountId)
    {
        echo $this->getProposalRepository()->getAccountProposalCount($accountId);
    }

    function getAccountsProposalCount()
    {
        $account_ids = implode(',', $this->input->post('ids'));
        echo $this->getProposalRepository()->getAccountsProposalCount($account_ids);
    }

    function getClientProposalCount($clientId)
    {
        echo $this->getProposalRepository()->getClientProposalCount($clientId);
    }

    function getClientsProposalCount()
    {
        $client_ids = implode(',', $this->input->post('ids'));
        echo $this->getProposalRepository()->getClientsProposalCount($client_ids);
    }

    public function ajaxGetAccountBusinessTypes($account_id)
    {
        $businessTypes = $this->account()->getAccountBusinessTypesTableData($account_id);

        $filteredBusinessTypes = $this->account()->getAccountBusinessTypesTableData($account_id, true);
        $data = [];
        $businessTypesData = [];

        foreach ($businessTypes as $businessType) {

            $percent_td = ($businessType->percent_total > 0) ? '<a href="' . base_url() . 'proposals/account_stats/' . $account_id . '/type_' . $businessType->id . '/won_rate" title="View Proposals" class="tiptip "  >' . round($businessType->percent_total, 2) . ' %</a>' : round($businessType->percent_total, 2) . ' %';
            $actual_percent = ($businessType->totalBid > 0) ? (($businessType->totalSold * 100) / $businessType->totalBid) : 0;
            if ($actual_percent > $businessType->percent_total) {
                $percent_td .= ' <i class="fa fa-fw fa-info-circle  tiptipleft right" style="margin-top: 1px;" title="This % does not match the Won $ amount.</br></br>This is because you have won a proposal that was created before the time range you selected.</br></br>The Win Rate is only for proposals you created AND won in the time range."></i>';
            } else if ($actual_percent < $businessType->percent_total) {
                $percent_td .= ' <i class="fa fa-fw fa-info-circle  tiptipleft right" style="margin-top: 1px;" title="This % does not match the Won $ amount.</br></br>This is because you have some proposals marked as won, but do not have a win date saved which means they are not included in the Won $. </br></br>Update the win rate of your won proposals and this number will update automatically."></i>';
            }

            $businessTypesData[] = [

                $businessType->type_name,
                ($businessType->numProposals > 0) ? '<a href="' . base_url() . 'proposals/account_stats/' . $account_id . '/type_' . $businessType->id . '" title="View Proposals" class="tiptip show_stats_proposals"  >' . $businessType->numProposals . '</a>' : $businessType->numProposals,
                ($businessType->totalBid > 0) ? '<a href="' . base_url() . 'proposals/account_stats/' . $account_id . '/type_' . $businessType->id . '" title="View Proposals" class="tiptip show_stats_proposals"  >$' . number_format($businessType->totalBid) . '</a>' : '$' . number_format($businessType->totalBid),
                ($businessType->totalOpen > 0) ? '<a href="' . base_url() . 'proposals/account_stats/' . $account_id . '/type_' . $businessType->id . '/open" title="View Proposals" class="tiptip "  >$' . number_format($businessType->totalOpen) . '</a>' : '$' . number_format($businessType->totalOpen),
                ($businessType->totalOther > 0) ? '<a href="' . base_url() . 'proposals/account_stats/' . $account_id . '/type_' . $businessType->id . '/other" title="View Proposals" class="tiptip "  >$' . number_format($businessType->totalOther) . '</a>' : '$' . number_format($businessType->totalOther),
                ($businessType->totalSold > 0) ? '<a href="' . base_url() . 'proposals/account_stats/' . $account_id . '/type_' . $businessType->id . '/won" title="View Proposals" class="tiptip "  >$' . number_format($businessType->totalSold) . '</a>' : '$' . number_format($businessType->totalSold),
                $percent_td,

            ];
        }

        $data['aaData'] = $businessTypesData;
        $data['sEcho'] = $this->input->get('sEcho');
        $data["iTotalRecords"] = count($filteredBusinessTypes);
        $data["iTotalDisplayRecords"] = count($filteredBusinessTypes);
        echo json_encode($data);
    }

    public function accountBusinessTypeBreakdownTable($account_id)
    {

        $businessTypes = $this->account()->getAccountBusinessTypesTableData($account_id, true);

        $bid_total = 0;
        $win_total = 0;
        foreach ($businessTypes as $businessType) {
            $bid_total = $bid_total + $businessType->totalBid;
            $win_total = $win_total + $businessType->totalSold;
        }

        $data = [];
        $businessTypesData = [];

        foreach ($businessTypes as $businessType) {


            $win_final = ($win_total > 0) ? round(($businessType->totalSold / $win_total) * 100, 2) : 0;
            $bid_final = ($bid_total > 0) ? round(($businessType->totalBid / $bid_total) * 100, 2) : 0;

            $businessTypesData[] = [

                $businessType->type_name,

                ($businessType->totalBid > 0) ? round(($businessType->totalBid / $bid_total) * 100, 2) . ' %' : '0.0%',
                ($businessType->totalBid > 0) ? round(($businessType->totalBid / $bid_total) * 100, 2) : '0',
                ($businessType->totalSold > 0) ? round(($businessType->totalSold / $win_total) * 100, 2) . ' %' : '0.0%',
                ($businessType->totalSold > 0) ? round(($businessType->totalSold / $win_total) * 100, 2) : '0',
                $win_final - $bid_final,

            ];
        }

        $data['aaData'] = $businessTypesData;
        $data['sEcho'] = $this->input->get('sEcho');
        $data["iTotalRecords"] = count($businessTypes);
        $data["iTotalDisplayRecords"] = count($businessTypes);
        echo json_encode($data);
    }

    public function businessTypeAccountInfoPie()
    {
        $this->load->library('stats/MyQueryServlet');
        $servlet = new MyQueryServlet();

        // $cAccount = $this->em->findClientAccount($this->input->post('accountId'));
        // $userId = $this->input->post('user_id');
        $time = array();
        $time['start'] = strtotime($this->input->post('from'));
        $time['finish'] = strtotime("11:59:59pm " . $customFrom = $this->input->post('to'));

        $business_types = $this->getCompanyRepository()->getCompanyBusinessTypes($this->account()->getCompany());
        $totalVal = 0;

        // Create the datatable
        $data = new DataTable();
        // Colums for pie chart
        $data->addColumn(new ColumnDescription('type', ValueType::STRING, 'Type'));
        $data->addColumn(new ColumnDescription('value', ValueType::NUMBER, 'Value'));

        foreach ($business_types as $business_type) {
            $val = $business_type->getRangeCreatedProposalsAccountBusinessType($time, $this->input->post('accountId'), $business_type->getId());
            $totalVal += $val;
            $theVal = (int)$val;

            // Only add the status if it has a value
            if ($theVal > 0) {
                $row = new TableRow(array($business_type->getTypeName(), $theVal));
                $data->addRow($row);
            }
        }

        if ($totalVal > 0) {
            $servlet->setDataTable($data);
            $servlet->execute();
        } else {
            echo json_encode(array('empty' => 1));
        }
    }

    public function businessTypeSalesAccountInfoPie()
    {
        $this->load->library('stats/MyQueryServlet');
        $servlet = new MyQueryServlet();


        $accountId = $this->input->post('accountId');
        $time = array();
        $time['start'] = strtotime($this->input->post('from'));
        $time['finish'] = strtotime("11:59:59pm " . $customFrom = $this->input->post('to'));

        $business_types = $this->getCompanyRepository()->getCompanyBusinessTypes($this->account()->getCompany());
        $totalVal = 0;

        // Create the datatable
        $data = new DataTable();
        // Colums for pie chart
        $data->addColumn(new ColumnDescription('type', ValueType::STRING, 'Type'));
        $data->addColumn(new ColumnDescription('value', ValueType::NUMBER, 'Value'));

        foreach ($business_types as $business_type) {
            $val = $business_type->getRangeCreatedProposalsSalesAccountBusinessType($time, $accountId, $business_type->getId());
            $totalVal += $val;
            $theVal = (int)$val;

            // Only add the status if it has a value
            if ($theVal > 0) {
                $row = new TableRow(array($business_type->getTypeName(), $theVal));
                $data->addRow($row);
            }
        }

        if ($totalVal > 0) {
            $servlet->setDataTable($data);
            $servlet->execute();
        } else {
            echo json_encode(array('empty' => 1));
        }
    }


    public function groupWinDateChange()
    {

        $this->load->library('JsonResponse');

        $ids = $this->input->post('ids');
        $givenDate = explode('/', $this->input->post('changeDate'));

        $changeDate = $start = mktime(12, 0, 0, $givenDate[0], $givenDate[1], $givenDate[2]);
        $openStatus = $this->account()->getCompany()->getOpenStatus();

        $response = new JsonResponse();
        $count = 0;

        foreach ($ids as $id) {


            // Load proposal
            $proposal = $this->em->find('\models\Proposals', $id);
            /* @var $proposal \models\Proposals */

            // Change the status update time if open
            if ($proposal->getProposalStatus()->isSales()) {
                

                // Old date for logging
                $oldDate = $proposal->getWinDate(true);

                $proposal->setWinDate($changeDate);

                // Save
                $this->em->persist($proposal);
                if ($oldDate) {
                    $log_msg = "[Group Action] - Proposal Win Date updated from " . date('m/d/Y', $oldDate) . ' to ' . $this->input->post('changeDate');
                } else {
                    $log_msg = "[Group Action] - Proposal Win Date added " . $this->input->post('changeDate');
                }

                // Log each one
                $this->log_manager->add(\models\ActivityAction::GROUP_CHANGE_PROPOSAL_WIN_DATE,
                    $log_msg,
                    $proposal->getClient(),
                    $proposal,
                    null,
                    $this->account()
                );

                $count++;
            }

        }

        $this->em->flush();

        $response->success = true;
        $response->count = $count;

        $response->send();

    }

    function findExistingContact()
    {
        $data = [];

        $accountId = $this->input->get('accountId') ?: null;
        $accountName = $this->input->get('accountname') ?: null;
        $firstname = $this->input->get('firstname') ?: null;
        $lastname = $this->input->get('lastname');
        $email = $this->input->get('email');

        // $clients = $this->account()->getExistingContact($accountId, $accountName, $firstname, $lastname, $email);
        // $clients_count = $this->account()->getExistingContact($accountId, $accountName, $firstname, $lastname, $email, true);
        // $clientsData = array();
        // $k = 0;
        // foreach ($clients as $clientData) {
        //     $k++;
        //     $clientsData[] = array(
        //         $clientData->clientCompanyName ?: '',
        //         $clientData->fullName,
        //         $clientData->email,
        //         '<a href="' . site_url('clients/edit/' . $clientData->clientId) . '" class="tiptip btn " title="Edit Contact"><i class="fa fa-fw fa-pencil"></i></a>
        //         <a href="' . site_url('proposals/add/' . $clientData->clientId) . '" class="tiptip btn " title="Add Proposal"><i class="fa fa-fw fa-plus"></i></a>'
        //     );
        // }

        // $data['aaData'] = $clientsData;
        // $data['sEcho'] = $this->input->get('sEcho');
        // $data["iTotalRecords"] = count($clients_count);
        // $data["iTotalDisplayRecords"] = count($clients_count);
        // echo json_encode($data);
        try {
            // Check if $this->account() returns a valid object
            $accountObject = $this->account();
            if ($accountObject !== null) {
                    $clients = $this->account()->getExistingContact($accountId, $accountName, $firstname, $lastname, $email);
                    $clients_count = $this->account()->getExistingContact($accountId, $accountName, $firstname, $lastname, $email, true);
                    $clientsData = array();
                    $k = 0;
                    foreach ($clients as $clientData) {
                        $k++;
                        $clientsData[] = array(
                            $clientData->clientCompanyName ?: '',
                            $clientData->fullName,
                            $clientData->email,
                            '<a href="' . site_url('clients/edit/' . $clientData->clientId) . '" class="tiptip btn " title="Edit Contact"><i class="fa fa-fw fa-pencil"></i></a>
                            <a href="' . site_url('proposals/add/' . $clientData->clientId) . '" class="tiptip btn " title="Add Proposal"><i class="fa fa-fw fa-plus"></i></a>'
                        );
                    }
                    $data['aaData'] = $clientsData;
                    $data['sEcho'] = $this->input->get('sEcho');
                    $data["iTotalRecords"] = count($clients_count);
                    $data["iTotalDisplayRecords"] = count($clients_count);
                    echo json_encode($data);
            } else {
                // Handle case when $this->account() returns null
                throw new Exception('Error: $this->account() returned null.');
            }
        } catch (Exception $e) {
            // Handle the exception, e.g., log the error or display a message to the user
            echo 'Error: ' . $e->getMessage();
        }

    }

    // public function searchClientAccountsOject()
    // {

    //     $this->load->database();

    //     $sql = 'SELECT cc.* FROM client_companies cc
    //         LEFT JOIN accounts a ON cc.owner_user = a.accountId
    //         WHERE cc.owner_company = ' . $this->account()->getCompany()->getCompanyId();

    //     if ((!$this->account()->isAdministrator() && $this->account()->hasFullAccess()) && $this->account()->isUser()) {
    //         $sql .= ' AND cc.owner_user = ' . $this->account()->getAccountId();
    //     }

    //     if ($this->account()->isBranchAdmin()) {
    //         $sql .= ' AND a.branch = ' . $this->account()->getBranch();
    //     }

    //     $sql .= " AND cc.name LIKE '%" . $this->input->get('searchVal') . "%'";

    //     $sql .= ' LIMIT 30';

    //     $companies = $this->db->query($sql)->result();

    //     $jsonAccounts = array();
    //     foreach ($companies as $company) {
    //         $jsonAccounts[] = array(
    //             'label' => $company->name,
    //             'value' => $company->id,
    //             'accountName' => $company->name,
    //             'address' => $company->address,
    //             'city' => $company->city,
    //             'state' => $company->state,
    //             'zip' => $company->zip,
    //             'businessPhone' => $company->phone,
    //             'website' => $company->website,
    //         );
    //     }
    //     echo json_encode($jsonAccounts);
    // }

    public function searchClientAccountsOject()
    {
        $this->load->database();
        $this->db->select('cc.*');
        $this->db->from('client_companies cc');
        $this->db->join('accounts a', 'cc.owner_user = a.accountId', 'left');
        $this->db->where('cc.owner_company', $this->account()->getCompany()->getCompanyId());
        if ((!$this->account()->isAdministrator() && $this->account()->hasFullAccess()) && $this->account()->isUser()) {
            $this->db->where('cc.owner_user', $this->account()->getAccountId());
        }
        if ($this->account()->isBranchAdmin()) {
            $this->db->where('a.branch', $this->account()->getBranch());
        }
        $searchVal = $this->input->get('searchVal');
        $this->db->like('cc.name', $searchVal);
        $this->db->limit(30);
        $query = $this->db->get();
        $companies = $query->result();
        $jsonAccounts = array();

    foreach ($companies as $company) {
        $jsonAccounts[] = array(
            'label' => $company->name,
            'value' => $company->id,
            'accountName' => $company->name,
            'address' => $company->address,
            'city' => $company->city,
            'state' => $company->state,
            'zip' => $company->zip,
            'businessPhone' => $company->phone,
            'website' => $company->website,
        );
    }
    echo json_encode($jsonAccounts);
}


    public function searchClientAccountOject($accountId)
    {

        $this->load->database();

        $sql = 'SELECT cc.* FROM client_companies cc
           
            WHERE cc.owner_company = ' . $this->account()->getCompany()->getCompanyId();
        $sql .= ' AND cc.id = ' . $accountId;


        $companies = $this->db->query($sql)->result();
        $company = $companies[0];
        $jsonAccounts = array();

        $jsonAccounts[] = array(
            'label' => $company->name,
            'value' => $company->id,
            'accountName' => $company->name,
            'address' => $company->address,
            'city' => $company->city,
            'state' => $company->state,
            'zip' => $company->zip,
            'businessPhone' => $company->phone,
            'website' => $company->website,
        );

        echo json_encode($jsonAccounts);
    }

    function save_proposal_filter()
    {
        $this->load->library('JsonResponse');
        $response = new JsonResponse();

        try {

            $spf = new SavedProposalFilter();
            $spf->setUserId($this->account()->getAccountId());
            $spf->setCompanyId($this->account()->getCompany()->getCompanyId());
            $spf->setFilterName($this->input->post('filterName'));

            $spf->setFilterData(json_encode($this->input->post('proposal_filter'), JSON_HEX_APOS));
            $spf->setFilterPage('Proposal');
            $spf->setCreatedAt(Carbon::now());
            $spf->setUpdatedAt(Carbon::now());

            $this->em->persist($spf);
            $this->em->flush();

            $response->success = true;
            $response->filter_data = $spf->getFilterData();
            $response->filter_id = $spf->getId();
            $response->send();


        } catch (\Exception $e) {
            // Don't populate result
            $response->success = false;
            $response->send();
        }

    }

    function save_client_filter()
    {
        $this->load->library('JsonResponse');
        $response = new JsonResponse();

        try {

            $spf = new SavedProposalFilter();
            $spf->setUserId($this->account()->getAccountId());
            $spf->setCompanyId($this->account()->getCompany()->getCompanyId());
            $spf->setFilterName($this->input->post('filterName'));

            $spf->setFilterData(json_encode($this->input->post('client_filter'), JSON_HEX_APOS));
            $spf->setFilterPage('Client');
            $spf->setCreatedAt(Carbon::now());
            $spf->setUpdatedAt(Carbon::now());

            $this->em->persist($spf);
            $this->em->flush();

            $response->success = true;
            $response->filter_data = $spf->getFilterData();
            $response->filter_id = $spf->getId();
            $response->send();


        } catch (\Exception $e) {
            // Don't populate result
            $response->success = false;
            $response->send();
        }

    }

    function save_account_filter()
    {
        $this->load->library('JsonResponse');
        $response = new JsonResponse();

        try {

            $spf = new SavedProposalFilter();
            $spf->setUserId($this->account()->getAccountId());
            $spf->setCompanyId($this->account()->getCompany()->getCompanyId());
            $spf->setFilterName($this->input->post('filterName'));

            $spf->setFilterData(json_encode($this->input->post('account_filter'), JSON_HEX_APOS));
            $spf->setFilterPage('Account');
            $spf->setCreatedAt(Carbon::now());
            $spf->setUpdatedAt(Carbon::now());

            $this->em->persist($spf);
            $this->em->flush();

            $response->success = true;
            $response->filter_data = $spf->getFilterData();
            $response->filter_id = $spf->getId();
            $response->send();


        } catch (\Exception $e) {
            // Don't populate result
            $response->success = false;
            $response->send();
        }

    }

    function save_lead_filter()
    {
        $this->load->library('JsonResponse');
        $response = new JsonResponse();

        try {

            $spf = new SavedProposalFilter();
            $spf->setUserId($this->account()->getAccountId());
            $spf->setCompanyId($this->account()->getCompany()->getCompanyId());
            $spf->setFilterName($this->input->post('filterName'));

            $spf->setFilterData(json_encode($this->input->post('lead_filter'), JSON_HEX_APOS));
            $spf->setFilterPage('Lead');
            $spf->setCreatedAt(Carbon::now());
            $spf->setUpdatedAt(Carbon::now());

            $this->em->persist($spf);
            $this->em->flush();

            $response->success = true;
            $response->filter_data = $spf->getFilterData();
            $response->filter_id = $spf->getId();
            $response->send();


        } catch (\Exception $e) {
            // Don't populate result
            $response->success = false;
            $response->send();
        }

    }

    function save_prospect_filter()
    {
        $this->load->library('JsonResponse');
        $response = new JsonResponse();

        try {

            $spf = new SavedProposalFilter();
            $spf->setUserId($this->account()->getAccountId());
            $spf->setCompanyId($this->account()->getCompany()->getCompanyId());
            $spf->setFilterName($this->input->post('filterName'));

            $spf->setFilterData(json_encode($this->input->post('prospect_filter'), JSON_HEX_APOS));
            $spf->setFilterPage('Prospect');
            $spf->setCreatedAt(Carbon::now());
            $spf->setUpdatedAt(Carbon::now());

            $this->em->persist($spf);
            $this->em->flush();

            $response->success = true;
            $response->filter_data = $spf->getFilterData();
            $response->filter_id = $spf->getId();
            $response->send();


        } catch (\Exception $e) {
            // Don't populate result
            $response->success = false;
            $response->send();
        }

    }


    public function updateFilterOrder()
    {
        $i = 0;
        $filterIds = $this->input->post('filter');

        if (is_array($filterIds)) {

            foreach ($filterIds as $filterId) {

                $filter = $this->em->find('models\SavedProposalFilter', $filterId);
                if ($filter) {
                    $filter->setOrd($i);
                    $this->em->persist($filter);
                    $i++;
                }
            }
            $this->em->flush();
        }
    }


    public function checkEditFilterName()
    {
        $response = new JsonResponse();
        $name = $this->input->post('name');
        $filter_id = $this->input->post('id');
        $type = $this->input->post('type');
        $sql = "SELECT filter_name FROM saved_proposal_filter WHERE filter_name = '$name' AND filter_page ='$type' AND id !='$filter_id'";
        $query = $this->db->query($sql);
        $data = $query->result_array();
        if (count($data) > 0) {
            $response->success = true;
            $response->send();
        } else {
            $response->success = false;
            $response->send();
        }
    }

    public function checkFilterName()
    {
        $response = new JsonResponse();
        $name = $this->input->post('name');
        $type = $this->input->post('type');
        $sql = "SELECT filter_name FROM saved_proposal_filter WHERE filter_name = '$name' AND filter_page ='$type'";
        $query = $this->db->query($sql);
        $data = $query->result_array();
        if (count($data) > 0) {
            $response->success = true;
            $response->send();
        } else {
            $response->success = false;
            $response->send();
        }
    }


    public function edit_proposal_filter()
    {
        $response = new JsonResponse();
        $name = $this->input->post('filterName');
        $filterid = $this->input->post('filterId');
        $filter = $this->em->find('models\SavedProposalFilter', $filterid);
        if ($filter) {
            $filter->setFilterName($name);
            $filter->setUpdatedAt(Carbon::now());
            $this->em->persist($filter);
            $this->em->flush();
            $response->success = true;
            $response->filter_id = $filterid;
            $response->updatedAt = date('m/d/y g:ia', strtotime($filter->getUpdatedAt()));
            $response->send();
        } else {
            $response->success = false;
            $response->send();
        }


    }

    public function groupDeleteSavedFilter()
    {
        $ids = $this->input->post('filterIds');

        foreach ($ids as $id) {
            $mod_id = $this->em->find('models\SavedProposalFilter', $id);
            if ($mod_id) {
                $this->em->remove($mod_id);
                $this->em->flush();
            }
        }
    }

    public function proposalFilterTooltipData()
    {
        $response = new JsonResponse();
        $filterid = $this->input->post('tiptipFilterId');
        //echo "SELECT * FROM saved_proposal_filter WHERE id = '$filterid'";
        $data = $this->db->query("SELECT * FROM saved_proposal_filter WHERE id = '$filterid'");
        $filter_data = $data->result();
        //print_r($filter_data);die;
        if ($filter_data) {
            foreach ($filter_data as $d) {
                $response->filterData = json_decode($d->filter_data);
            }
            $response->send();
        }
    }

    public function dashboardStatusTable()
    {

        $companyRepo = $this->getCompanyRepository();

        $from = $this->session->userdata('pStatusFilterFrom');
        $to = $this->session->userdata('pStatusFilterTo');

        $startTime = new Carbon($from . '00:00:00');
        $endTime = new Carbon($to);

        $weekdays = $startTime->diffInWeekdays($endTime);

        // If 'all', we're on the user breakdown table and show all users based on permissions
        if ($this->input->post('all')) {
            if ($this->account()->hasFullAccess()) {
                $accounts = $companyRepo->getSalesAccounts($this->account()->getCompanyId());
            } else {
                if ($this->account()->isBranchAdmin()) {
                    $accounts = $companyRepo->getSalesAccounts($this->account()->getCompanyId(),
                        $this->account()->getBranch());

                } else {
                    $accounts[] = $this->em->findAccount($this->input->post('accountId'));
                }
            }
        } else {
            // Otherwise, the user/branch is being specified and we need to load the relevant accounts
            switch ($this->input->post('user')) {

                case 'user':

                    if ($this->input->post('accountId')) {
                        $accounts = [
                            $this->em->findAccount($this->input->post('accountId')),
                        ];
                    } else {
                        // If it's just a user logged in, there's no account ID
                        $accounts = [
                            $this->account(),
                        ];
                    }
                    break;

                case 'branch':
                    $accounts = $companyRepo->getSalesAccounts($this->account()->getCompanyId(),
                        $this->input->post('branchId'));
                    break;

                case 'company':
                    $accounts = $companyRepo->getSalesAccounts($this->account()->getCompanyId());
                    break;
            }
        }

        // Now we have the account(s) and can process the data in the same way for all
        $data = array();
        $data['sEcho'] = 1;
        $data['iTotalRecords'] = count($accounts);
        $data['iTotalDisplayRecords'] = count($accounts);
        $data['aaData'] = array();

        foreach ($accounts as $account) {
            /* @var $account \models\Accounts */


            // Dates now have to be calculate per user in case of varying start times
            $startTime = new Carbon($from);
            $startTime = $startTime->startOfDay();
            $endTime = new Carbon($to);
            $endTime = $endTime->endOfDay();
            $time = [
                'start' => $startTime->timestamp,
                'finish' => $endTime->timestamp
            ];
            $row = [
                '<a href="' . site_url('account/stats/' . $account->getAccountId()) . '" class="tiptipright" title="View User Statistics">' . $account->getFullName() . '</a>'

            ];
            $Statuses = $this->account()->getCompany()->getStatuses();

            foreach ($Statuses as $Status) {
                $proposals_count = $account->getNumRangeCreatedProposalsStatus($time, $Status);
                if ($proposals_count > 0) {
                    $row[] = '<a href="' . site_url('proposals/status/' . $Status->getStatusId() . '/user/' . $account->getAccountId()) . '" class="tiptip" title="View these Proposals" >' . $proposals_count . '</a>';
                } else {
                    $row[] = $proposals_count;
                }

            }

            $email_off_count = $account->getNumRangeCreatedProposalsEmailOff($time);
            if ($email_off_count > 0) {
                $row[] = '<a href="' . site_url('proposals/status/emailoff/user/' . $account->getAccountId()) . '" class="tiptip" title="View these Proposals" >' . $email_off_count . '</a>';
            } else {
                $row[] = $email_off_count;
            }


            // Content needs to be style dependent on comparison vs performance


            $data['aaData'][] = $row;
        }

        // Return as JSON
        echo json_encode($data);
    }

    public function userStatusTable($userId)
    {

        $from = $this->session->userdata('pStatsFilterFrom');
        $to = $this->session->userdata('pStatsFilterTo');
        $time = [
            'start' => '0',
            'finish' => Carbon::create()->endOfDay()->timestamp
        ];

        if ($from != '' && $to != '') {

            // Dates now have to be calculate per user in case of varying start times
            $startTime = new Carbon($from);
            $startTime = $startTime->startOfDay();
            $endTime = new Carbon($to);
            $endTime = $endTime->endOfDay();

            $time = [
                'start' => $startTime->timestamp,
                'finish' => $endTime->timestamp
            ];
        }

        $accounts = [
            $this->em->findAccount($userId),
        ];

        // Now we have the account(s) and can process the data in the same way for all
        $data = array();
        $data['sEcho'] = 1;

        $data['aaData'] = array();
        //$row = [];
        $data_row = [];
        $proposals_total_count = 0;
        $proposals_total_value = 0;
        $i = 0;
        foreach ($accounts as $account) {
            /* @var $account \models\Accounts */


            $Statuses = $this->account()->getCompany()->getStatuses();
            $data['iTotalRecords'] = count($Statuses) + 1;
            $data['iTotalDisplayRecords'] = count($Statuses) + 1;

            foreach ($Statuses as $Status) {
                // $statusObject[$i]['status_name'] = $status->getText();
                // $statusObject[$i]['status_color'] = $status->getColor();

                $proposals_count = $account->getNumRangeCreatedProposalsStatus($time, $Status);
                $proposals_value = $account->getRangeCreatedProposalsUserStatusPrice($time, $Status->getStatusId());
                if ($proposals_count > 0) {
                    // $row[]= array('id'=>$Status->getStatusId(),'proposal_count'=>$proposals_count);
                    // $p_count = '<a href="' . site_url('proposals/status/'. $Status->getStatusId().'/user/'. $account->getAccountId() ) . '" class="tiptip" title="View these Proposals" style="float: right;" ><span  class="new badge" style="cursor: pointer;">'.$proposals_count.'</span></a>';
                    $p_count = '<a href="' . site_url('proposals/status/' . $Status->getStatusId() . '/user/' . $account->getAccountId()) . '" class="tiptip" title="View these Proposals"  ><span  class="" style="cursor: pointer;">' . $proposals_count . '</span></a>';

                } else {
                    // $p_count = '<span  class="new badge grey" style="cursor: pointer;float: right;">'.$proposals_count.'</span>';
                    $p_count = '<span  class="" style="cursor: pointer;">' . $proposals_count . '</span>';
                }


                $proposals_total_count = $proposals_total_count + $proposals_count;

                $proposals_total_value = $proposals_total_value + $proposals_value;
                $data_row[] = array(0 => '<span>' . $Status->getText() . '</span>', 1 => $proposals_count, 2 => $proposals_value, 3 => $p_count);


            }

            foreach ($data_row as $data_r) {
                $percentage_count = 0;
                $percentage_value = 0;
                if ($proposals_total_count > 0) {

                    $percentage_count = ($data_r[1] / $proposals_total_count) * 100;
                }
                if ($proposals_total_value > 0) {
                    $percentage_value = ($data_r[2] / $proposals_total_value) * 100;
                }


                $data['aaData'][] = array($data_r[0], $data_r[3], number_format($percentage_count, 1) . '%', '$' . number_format($data_r[2]), number_format($percentage_value, 1) . '%');
            }

            //$row[]= $account->getNumRangeCreatedProposalsEmailOff($time);;
            $email_off_count = $account->getNumRangeCreatedProposalsEmailOff($time);
            if ($email_off_count > 0) {
                $data['emailOffData'][] = array('<strong>Email Off</strong>', '<a style="color: #25AAE1;" href="' . site_url('proposals/status/emailoff/user/' . $account->getAccountId()) . '" class="tiptip" title="View these Proposals" >' . $email_off_count . '</a>');

            }
            $data['footerData'][] = array('<strong>Total</strong>', $proposals_total_count, '-', '$' . number_format($proposals_total_value), '-');
            // Content needs to be style dependent on comparison vs performance
            //echo json_encode($row);


        }

        // Return as JSON
        echo json_encode($data);
    }

    public function userStatsStatusdPie()
    {

        $this->load->library('stats/MyQueryServlet');
        $servlet = new MyQueryServlet();
        $from = $this->session->userdata('pStatsFilterFrom');
        $to = $this->session->userdata('pStatsFilterTo');
        $time = [
            'start' => '0',
            'finish' => Carbon::create()->endOfDay()->timestamp
        ];

        if ($from != '' && $to != '') {

            // Dates now have to be calculate per user in case of varying start times
            $startTime = new Carbon($from);
            $startTime = $startTime->startOfDay();
            $endTime = new Carbon($to);
            $endTime = $endTime->endOfDay();

            $time = [
                'start' => $startTime->timestamp,
                'finish' => $endTime->timestamp
            ];
        }


        $statuses = $this->account()->getCompany()->getStatuses();
        $totalVal = 0;

        // Create the datatable
        $data = new DataTable();
        // Colums for pie chart
        $data->addColumn(new ColumnDescription('status', ValueType::STRING, 'Status'));
        $data->addColumn(new ColumnDescription('value', ValueType::NUMBER, 'Value'));
        $data->addColumn(new ColumnDescription('count', ValueType::NUMBER, 'Count'));
        $data->addColumn(new ColumnDescription('status_id', ValueType::NUMBER, 'Status Id'));

        $account = $this->em->findAccount($this->input->post('accountId'));
        foreach ($statuses as $status) {
            $val = $account->getRangeCreatedProposalsStatusPrice($time, $status->getStatusId());
            $proposals_count = $account->getNumRangeCreatedProposalsStatus($time, $status);
            $totalVal = $totalVal + $val;
            $row = new TableRow(array($status->getText(), (float)$val, $proposals_count, $status->getStatusId()));
            $data->addRow($row);
        }


        if ($totalVal > 0) {
            $servlet->setDataTable($data);
            $servlet->execute();
        } else {
            echo json_encode(array('empty' => 1));
        }
    }

    public function userStatsStatusdProposalCountPie()
    {

        $this->load->library('stats/MyQueryServlet');
        $servlet = new MyQueryServlet();
        $from = $this->session->userdata('pStatsFilterFrom');
        $to = $this->session->userdata('pStatsFilterTo');
        $time = [
            'start' => '0',
            'finish' => Carbon::create()->endOfDay()->timestamp,
        ];

        if ($from != '' && $to != '') {

            // Dates now have to be calculate per user in case of varying start times
            $startTime = new Carbon($from);
            $startTime = $startTime->startOfDay();
            $endTime = new Carbon($to);
            $endTime = $endTime->endOfDay();

            $time = [
                'start' => $startTime->timestamp,
                'finish' => $endTime->timestamp
            ];
        }


        $statuses = $this->account()->getCompany()->getStatuses();
        $totalVal = 0;

        // Create the datatable
        $data = new DataTable();
        // Colums for pie chart
        $data->addColumn(new ColumnDescription('status', ValueType::STRING, 'Status'));
        $data->addColumn(new ColumnDescription('count', ValueType::NUMBER, 'Count'));
        $data->addColumn(new ColumnDescription('value', ValueType::NUMBER, 'Value'));
        $data->addColumn(new ColumnDescription('status_id', ValueType::NUMBER, 'Status Id'));

        $account = $this->em->findAccount($this->input->post('accountId'));
        foreach ($statuses as $status) {
            $val = $account->getRangeCreatedProposalsStatusPrice($time, $status->getStatusId());
            $val = '$' . number_format($val);
            $proposals_count = $account->getNumRangeCreatedProposalsStatus($time, $status);
            $totalVal += $proposals_count;
            $row = new TableRow(array($status->getText(), (int)$proposals_count, $val, $status->getStatusId()));
            $data->addRow($row);
        }


        if ($totalVal > 0) {
            $servlet->setDataTable($data);
            $servlet->execute();
        } else {
            echo json_encode(array('empty' => 1));
        }
    }

    public function loginStatus()
    {
        if ($this->account()) {
            $userData = $this->session->all_userdata();
            $sessionExpires = Carbon::createFromTimestamp($userData['last_activity'])
                ->addSeconds($this->config->item('sess_expiration'))
                ->toAtomString();

            $data = [
                'loggedIn' => 1,
                'session_expiry' => $sessionExpires
            ];
        } else {
            $data = [
                'loggedIn' => 0
            ];
        }
        echo json_encode($data);
    }


    public function refreshLogin()
    {
        if ($this->account()) {
            $userData = $this->session->all_userdata();
            $sessionExpires = Carbon::now()
                ->addSeconds($this->config->item('sess_expiration'))
                ->toAtomString();

            $this->session->set_userdata('last_activity', Carbon::now()->addSeconds($this->config->item('sess_expiration'))->timestamp);
            
            $data = [
                'loggedIn' => 1,
                'session_expiry' => $sessionExpires
            ];
        } else {
            $data = [
                'loggedIn' => 0
            ];
        }

        echo json_encode($data);
    }

    // Edit email address in proposal table
    public function changeContactEmailAddress()
    {

        $response = new JsonResponse();
        $email = $this->input->post('email');
        $id = $this->input->post('id');
        $contact = $this->em->find('models\Clients', $id);
        if ($contact) {
            $previousEmail = $contact->getEmail();
            $name = $contact->getFullName();
            $contact->setEmail($email);
            $this->log_manager->add(\models\ActivityAction::CONTACT_EMAIL_CHANGED,
                '<strong>' . $name . '</strong> contact Email Address changed from ' . $previousEmail . ' to ' . $email,
                null,
                null,
                null,
                $this->account()
            );
            $this->em->persist($contact);
            $this->em->flush();
            $response->success = true;
            $response->send();
        } else {
            $response->success = false;
            $response->send();
        }
    }

    public function fiveSeconds()
    {
        $response = new JsonResponse();
        $proposal_link_id = $this->input->post('proposal_link_id');
        $proposal_view = $this->em->getRepository('models\ProposalView')->findOneBy(array('proposal_link_id' => $proposal_link_id));
        $response->succes = true;
        $response->ViewCount = $proposal_view->getViewCount();
        $response->send();
    }

    public function twentySeconds()
    {
        $response = new JsonResponse();
        $proposal_link_id = $this->input->post('proposal_link_id');
        $proposal_view = $this->em->getRepository('models\ProposalView')->findOneBy(array('proposal_link_id' => $proposal_link_id));
        $response->succes = true;
        $response->proposalId = $proposal_view->getProposalId();
        $response->send();
    }

    public function findPreviewLink()
    {
        $response = new JsonResponse();
        $proposal_link_id = $this->input->post('proposal_link_id');
        $proposal_id = $this->input->post('proposal_id');
        $proposal_view = $this->em->getRepository('models\ProposalView')->findOneBy(array('proposal_link_id' => $proposal_link_id));

        if (!$proposal_view) {


            $proposal_view = new \models\ProposalView();
            $proposal_view->setProposalId($proposal_id);
            $proposal_view->setProposalLinkId($proposal_link_id);
            $proposal_view->setCreatedAt(Carbon::now());
            $this->em->persist($proposal_view);
            $this->em->flush();

        }

        $response->succes = true;
        $response->proposalId = $proposal_view->getProposalId();
        $response->send();

    }

    public function proposalViews($proposalId)
    {

 
        $CI = &get_instance();
        $proposal = $this->em->find('models\Proposals', $proposalId);
        $dql = "SELECT ppl.*, count(pv.id) as vcount, pv.updated_at as last_viewed,CONCAT(c.firstName,' ',c.lastName) as client_name,ppl.old_link FROM proposal_preview_links ppl
                LEFT JOIN proposal_views AS pv ON  ppl.id  = pv.proposal_link_id
                LEFT JOIN proposals p  ON  ppl.proposal_id = p.proposalId  
                LEFT JOIN clients c  ON  p.client = c.clientId
                WHERE ppl.no_tracking = 0 AND ppl.proposal_id =  " . $proposalId;

        // Searching
        $searchVal = $this->input->get('search')['value'];
        if ($searchVal) {
            $dql .= " AND (" .
                "(ppl.email LIKE '%" . $searchVal . "%'))";
        }

        // Sorting
        $sort = $this->input->get('order')[0];
        $sortDir = $sort['dir'];

        switch ($this->input->get($sort['column'])) {
            case 0:
                $sortCol = 'ppl.created_at';
                break;
            case 1:
                $sortCol = 'ppl.expires';
                break;
            case 3:
                $sortCol = 'ppl.updated_at';
                break;
        }
        $dql .= ' group by ppl.id ';
        $dql .= " ORDER BY " . $sortCol . ' ' . $sortDir;
        $dql .= ' LIMIT ' . $this->input->get('length');
        $dql .= ' OFFSET ' . $this->input->get('start');


        $proposalPreviewLink = $this->db->query($dql)->result();

 
        $tableData = [];

        foreach ($proposalPreviewLink as $preview) {
            $action = '<div class="dropdownButton">
                        <a class="dropdownToggle" href="#">Actions</a>
                        <div class="dropdownMenuContainer single" style="right: 0px;left: auto;">
                            <ul class="dropdownMenu">
                            <li>
                                <a data-preview-id="' . $preview->id . '" data-proposal-id="' . $preview->proposal_id . '" href="javascript:void(0);" class="set_expiry "><i class="fa fa-fw fa-calendar"></i> Set Expiry</a>
                            </li>';

            if ($preview->active == 1) {
                $action .= '<li>
                                <a href="javascript:void(0);" data-preview-id="' . $preview->id . '" data-proposal-id="' . $preview->proposal_id . '" data-preview-active="' . $preview->active . '" class="preview_active_inactive " ><i class="fa fa-fw fa-ban" ></i> Disable Link</a>
                            </li>';
            } else {
                $action .= '<li>
                                <a href="javascript:void(0);" data-preview-id="' . $preview->id . '" data-proposal-id="' . $preview->proposal_id . '" data-preview-active="' . $preview->active . '" class="preview_active_inactive "><i class="fa fa-fw fa-check-circle"></i> Enable Link</a>
                            </li>';
            }

            if ($preview->signature_link == 1) {
                $action .= '<li>
                                <a href="javascript:void(0);" data-preview-id="' . $preview->id . '" data-proposal-id="' . $preview->proposal_id . '" data-preview-signature="' . $preview->signature_link . '" class="preview_signature_enable_disable " ><i class="fa fa-fw fa-ban" ></i> Disable Signature</a>
                            </li>';
               
               $signature_icon = '<i class="fa fa-pencil-square-o tiptip pull-right" title="This link Allow Client Signature" style=""></i>';            
            } else {
                $action .= '<li>
                                <a href="javascript:void(0);" data-preview-id="' . $preview->id . '" data-proposal-id="' . $preview->proposal_id . '" data-preview-signature="' . $preview->signature_link . '" class="preview_signature_enable_disable "><i class="fa fa-fw fa-check-circle"></i> Enable Signature</a>
                            </li>';
                $signature_icon = '';
            }
            $action .= '<li>
                            <a href="javascript:void(0);" data-preview-link="' . site_url('proposal/'.$preview->uuid)  . '" class="copy_proposal_link "><i class="fa fa-fw fa-copy"></i> Copy Link</a>
                        </li>
                        </ul>
                        </div>
                    </div>';


            if ($preview->active == 1) {
                if ($preview->expires != '' && $preview->expires < Carbon::now()) {
                    $status = '<i class="fa fa-exclamation-circle tiptip" title="This link has expired" style=""></i>';
                } else {
                    $status = '<i class="fa fa-check-circle tiptip" title="This link is active" style=""></i>';
                }
            } else {
                $status = '<i class="fa fa-ban tiptip" title="This link is disabled" ></i>';
            }
            $viewExpired = 0;
            if ($preview->expires != '') {
                if ($preview->expires < Carbon::now()) {
                    $viewExpired = 1;
                    $expiry_date = '<span style="color:red">' . date_format(date_create($preview->expires), "m/d/y g:i A") . '</span>';
                } else {
                    $expiry_date = '<span >' . date_format(date_create($preview->expires), "m/d/y g:i A") . '</span>';
                }
            } else {
                $expiry_date = '-';
            }
            $view_count = 0;
            if ($preview->vcount > 0 && $preview->no_tracking == 0) {
                $view_count = '<a href="javascript:void(0);" class="proposalViewDetails"  data-link-id="' . $preview->id . '">' . $preview->vcount . '</a>';
            }

            $client_icon = '<i class="fa fa-fw fa-envelope"></i> ';
            $old_link_icon = '';
            if ($preview->log_id) {
                $log = $this->em->find('models\Log', $preview->log_id);
                $client_icon = '<i class="fa fa-fw fa-file-pdf-o"></i> ';
                $view_time = 'NA';
                $action = '<a class="fancybox btn fancybox.iframe tiptip" title="View Location" href="' . site_url('account/ipMap/' . $log->GetIp()) . '"><i class="fa fa-fw fa-map-marker"></i> View Map</a>';
                $view_count = 0;
            }
            

            $viewer = $client_icon . $preview->email;
            if ($preview->client_link) {
                $client_icon = '<i class="fa fa-fw fa-user"></i> ';
                if($preview->old_link){
                    $old_link_icon = '<i class="fa fa-fw fa-info tiptip pull-right" title="View was from a proposal sent before '.$_ENV['WEB_PROPOSAL_LAUNCH_DATE'].'"></i> '; 
                }
                if ($preview->log_id) {
                    $client_icon = '<i class="fa fa-fw fa-file-pdf-o"></i> ';
                }
                $viewer = $client_icon . $preview->client_name.$old_link_icon;
            }

            
           
            $viewer =  $viewer . $signature_icon;

                // Check if $preview->last_viewed is not blank
                if (!empty($preview->last_viewed)) {
                      $timestamp = strtotime($preview->last_viewed) + TIMEZONE_OFFSET;
                } else {
                // Apply the offset to the current timestamp
                     $timestamp = time() + TIMEZONE_OFFSET;
                }
                // Format the timestamp as desired
                  $formatted_date = date('m/d/Y g:i A', $timestamp);
             
            $tableData[] = [
                '<input type="checkbox" class="previewGroupSelect" value="' . $preview->id . '" data-preview-id="' . $preview->id . '"  />',
                $status,
                $viewer,
                //date_format(date_create($preview->created_at), "m/d/y g:i A"),
                date('m/d/Y g:i A', strtotime($preview->created_at) + TIMEZONE_OFFSET),
                $expiry_date,
                $view_count,
                //date_format(date_create($preview->last_viewed), "m/d/y g:i A"),
                $formatted_date,
                $action,
                $viewExpired
            ];

         }

        $data = [];
        $data['aaData'] = $tableData;
        $data['sEcho'] = $this->input->get('sEcho');
        $data["iTotalRecords"] = $this->getProposalRepository()->numProposalPreview($proposalId);
        $data["iTotalDisplayRecords"] = $this->getProposalRepository()->numProposalPreview($proposalId);
        echo json_encode($data);
    }


    public function proposal_preview_active_inactive()
    {
        $response = new JsonResponse();
        $proposal_link_id = $this->input->post('preview_id');
        $is_active = $this->input->post('is_active');
        $proposal_preview = $this->em->find('models\ProposalPreviewLink', $proposal_link_id);

        if (!$proposal_preview) {

            $response->succes = false;
            $response->send();

        }
        $proposal_preview->setActive($is_active);
        $this->em->persist($proposal_preview);
        $this->em->flush();
        $response->succes = true;
        $response->proposalId = $proposal_preview->getProposalId();
        //create a history log for active inactive link start
        $proposal = $this->em->findProposal($response->proposalId);
        $ActiveDeactive = ($is_active==1) ? "Activated": "Deactivated";
        $this->log_manager->add(\models\ActivityAction::UPDATE_PROPOSAL_SETTING,
        "Proposal link $ActiveDeactive",
        $proposal->getClient(),
        $proposal,
        $proposal->getClient()->getCompany(),
        $this->account()
    );
        //create a history log for active inactive link close
        $response->send();

    }

    public function proposal_preview_signature_active_inactive()
    {
        $response = new JsonResponse();
        $proposal_link_id = $this->input->post('preview_id');
        $is_active = $this->input->post('is_active');
        $proposal_preview = $this->em->find('models\ProposalPreviewLink', $proposal_link_id);

        if (!$proposal_preview) {

            $response->succes = false;
            $response->send();

        }
        $proposal_preview->setSignatureLink($is_active);

         $msg = 'Disabled';
        if ($is_active == 1) {
            $msg = 'Enabled';
        }
        $proposal = $this->em->findProposal($proposal_preview->getProposalId());

        $this->log_manager->add(
            // 'preview_signature_update',
            \models\ActivityAction::UPDATE_PROPOSAL_SETTING,
            "Proposal Preview for <strong>" . $proposal_preview->getEmail() . "</strong> updated. Signature " . $msg,
            $proposal->getClient(),
            $proposal,
            $proposal->getClient()->getCompany(),
            $this->account()
        );
        $this->em->persist($proposal_preview);
        $this->em->flush();
        $response->succes = true;
        $response->proposalId = $proposal_preview->getProposalId();
        $response->send();

    }

    public function set_proposal_preview_expiry()
    {
        $response = new JsonResponse();
        $proposal_link_id = $this->input->post('expiry_preview_id');
        $expiryDate = Carbon::parse($this->input->post('expiryDate'))->endOfDay();
        $proposal_preview = $this->em->find('models\ProposalPreviewLink', $proposal_link_id);

        if (!$proposal_preview) {

            $response->succes = false;
            $response->send();

        }
        $proposal_preview->setExpires($expiryDate);
        $this->em->persist($proposal_preview);
        $this->em->flush();
        $response->succes = true;
        $response->proposalId = $proposal_preview->getProposalId();
        //create a history log for update expiry start
        $proposal = $this->em->findProposal($response->proposalId);
        $this->log_manager->add(\models\ActivityAction::WEB_PROPOSAL_LINK_ENABLE,
                "Proposal link for <strong>" . $proposal_preview->getEmail() . "</strong> updated. Expiry set to <strong>" . date_format($expiryDate, "m/d/y g:i A") . "</strong>",
                $proposal->getClient(),
                $proposal,
                $proposal->getClient()->getCompany(),
                $this->account()
            );
        //create a history log for update expiry close
        $response->send();
    }


    public function updateProposalPreviewData()
    {

        //Check Header for Beacon
        //if ($_SERVER["CONTENT_TYPE"] == 'application/json') {
            if (isset($_SERVER["CONTENT_TYPE"]) && $_SERVER["CONTENT_TYPE"] == 'application/json') {
            $data = json_decode(file_get_contents('php://input'));
            } else {
                $data = json_decode(json_encode($_POST));
            }
            $this->saveProposalPreviewData($data);
    }

    //Update the Page Data
    function saveProposalPreviewData($data)
    {
        // $lastUpdatedTime = Carbon::parse($data->lastUpdatedTime);
        // $lastActionTime = Carbon::parse($data->lastActionTime);
        // $lastUpdateCheckTime = Carbon::parse($data->lastUpdateCheckTime);
        // $proposalViewId = $data->proposalViewId;
        // $auditClicked = $data->auditClicked;         
        $lastUpdatedTime = isset($data->lastUpdatedTime) ? Carbon::parse($data->lastUpdatedTime) : null;
        $lastActionTime = isset($data->lastActionTime) ? Carbon::parse($data->lastActionTime) : null;
        $lastUpdateCheckTime = isset($data->lastUpdateCheckTime) ? Carbon::parse($data->lastUpdateCheckTime) : null;
        $proposalViewId = isset($data->proposalViewId) ? $data->proposalViewId : null;
        $auditClicked = isset($data->auditClicked) ? $data->auditClicked : null;
        // Page Data - sort this first
        // $pageData = (array)$data->pageData;
        $pageData = isset($data->pageData) ? (array)$data->pageData : null;
        arsort($pageData);
        //$videoType = $data->videoType;
        $videoType = isset($data->videoType) ? $data->videoType : null;
        // $screenCastPlayPercent = $data->screenCastPlayPercent;
        $screenCastPlayPercent = isset($data->screenCastPlayPercent) ? $data->screenCastPlayPercent : null;
        $imagesViewed = false;
        if (isset($data->imagesViewed)) {
            $imagesViewed = $data->imagesViewed;
        }
        $serviceSpecClicked = false;
        if (isset($data->serviceSpecClicked)) {
            $serviceSpecClicked = $data->serviceSpecClicked;
        }
        $signed = $data->signed;
        $printed = false;
        if (isset($data->printed)) {
            $printed = $data->printed;
        }
        $downloaded = false;
        if (isset($data->downloaded)) {
            $downloaded = $data->downloaded;
        }
       // $videoPlayed = $data->videoPlayed;
          $videoPlayed = isset($data->videoPlayed) ? $data->videoPlayed : null;
        // $videoDuration = $data->videoDuration;
         $videoDuration = isset($data->videoDuration) ? $data->videoDuration : null;
        // $totalActivityDuration = $data->totalActivityDuration;
         $totalActivityDuration = isset($data->totalActivityDuration) ? $data->totalActivityDuration : null;
         $service_text_links = false;
        if (isset($data->serviceTextLinks)) {
            $service_text_links = $data->serviceTextLinks;
        }
       // $auditIframeViewedTime = $data->auditIframeOpenTime;
        $auditIframeOpenTime = isset($data->auditIframeOpenTime) ? $data->auditIframeOpenTime : null;
        $viewedImagesData = false;
        if (isset($data->viewedImagesData)) {
            $viewedImagesData = $data->viewedImagesData;
        }
        $viewedVideosData = false;
        if (isset($data->viewedVideosData)) {
            $viewedVideosData = $data->viewedVideosData;
        }


        $viewServiceText = false;
        if (isset($data->viewServiceText)) {
            $viewServiceText = $data->viewServiceText;
        }
        // Calculate Duration

        //Find ProposalView
        $proposalView = $this->em->find('models\ProposalView', $proposalViewId);

        $proposalView->setTotalDuration($totalActivityDuration);

        if ($auditClicked) {
            $proposalView->setAuditViewed($auditClicked);
        }

        if ($imagesViewed) {
            $proposalView->setImagesClicked(json_encode($imagesViewed));
        }

        if ($serviceSpecClicked) {
            $proposalView->setServiceSpecClicked(json_encode($serviceSpecClicked));
        }

        if ($signed) {
            $proposalView->setSigned(1);
        }

        if ($printed) {
            $timeNow = strval(Carbon::now());
            $printData = json_encode(array('click' => 1, 'printed_at' => $timeNow));
            $proposalView->setPrinted($printData);

            $proposal = $this->em->findProposal($proposalView->getProposalId());
            $proposal_preview = $this->em->find('models\ProposalPreviewLink', $proposalView->getProposalLinkId());

            $proposalUrl = site_url('proposal/' . $proposal_preview->getUuid());
            $this->log_manager->add(\models\ActivityAction::WEB_PROPOSAL_PRINTED,
                "Web Proposal Printed <br/> Proposal Recipient: <a href='mailto:" . $proposal_preview->getEmail() . "'>" . $proposal_preview->getEmail() . "</a>",
                $proposal->getClient(),
                $proposal,
                $proposal->getClient()->getCompany(),
                NULL
            );
        }

        if ($downloaded) {


            $proposal = $this->em->findProposal($proposalView->getProposalId());
            $proposal_preview = $this->em->find('models\ProposalPreviewLink', $proposalView->getProposalLinkId());

            $proposalUrl = site_url('proposal/' . $proposal_preview->getUuid());
            $this->log_manager->add(\models\ActivityAction::WEB_PROPOSAL_DOWNLOAD,
                "Web Proposal Downloaded <br/> Proposal Recipient: <a href='mailto:" . $proposal_preview->getEmail() . "'>" . $proposal_preview->getEmail() . "</a>",
                $proposal->getClient(),
                $proposal,
                $proposal->getClient()->getCompany(),
                NULL
            );
        }



        if (isset($data->screencastViewedData)) {

            foreach ($data->screencastViewedData as $screencastVideo) {

                $proposal_screencast_video = $this->em->getRepository('models\ProposalVideo')->findOneBy(array('screencast_video_id' => $screencastVideo->videoId));
                $screencastVideoDuration = round(($screencastVideo->percent / 100) * ($proposal_screencast_video->getDuration()));
                $videoObject = ['videoId' => $proposal_screencast_video->getId(), 'duration' => $screencastVideoDuration, 'clicks' => 1];
                if ($viewedVideosData) {
                    $j = 0;
                    $isfound = false;
                    foreach ($viewedVideosData as $viewedData) {
                        //print_r($viewedData);
                        if ($viewedData->videoId == $proposal_screencast_video->getId()) {
                            $viewedVideosData[$j]->duration = $screencastVideoDuration;
                            $isfound = true;
                        }
                        $j++;
                    }
                    if (!$isfound) {
                        $viewedVideosData[] = $videoObject;
                    }


                } else {
                    $viewedVideosData[] = $videoObject;
                }

            }

        }

        if ($service_text_links) {
            $proposalView->setServiceLinksViewed(json_encode($service_text_links));
        }

        if ($viewedImagesData) {
            $proposalView->setViewedImageData(json_encode($viewedImagesData));
        }
        if ($viewedVideosData) {
            $proposalView->setViewedVideoData(json_encode($viewedVideosData));
        }

        if ($viewServiceText) {
            $proposalView->setServiceTextViewedTime(json_encode($viewServiceText));
        }

        if ($auditIframeViewedTime) {
            $proposalView->setAuditViewedTime($auditIframeViewedTime);
        }

        $proposalView->setViewData(json_encode($pageData));
        $proposalView->setUpdatedAt(Carbon::now());
        $this->em->persist($proposalView);
        $this->em->flush();

        $response = new JsonResponse();

        $response->success = true;
        $response->duration = $proposalView->getTotalDuration();
        $response->view_id = $proposalView->getId();
        $response->send();
    }

    public function getProposalViewData()
    {
        $response = new JsonResponse();
        $proposalLinkId = $this->input->post('proposalLinkId');
        $sql = "SELECT * FROM proposal_views WHERE proposal_link_id = " . $proposalLinkId;
        $proposal_view = $this->db->query($sql)->result();
        if ($proposal_view) {
            $response->success = true;
            $response->proposalView = $proposal_view;
            $response->send();
        } else {
            $response->success = false;
            $response->send();
        }

    }

    public function getScreencastVideoPlayTime($proposalId, $playPercent)
    {
        $proposal = $this->em->findProposal($proposalId);
        $matches = [];
        $regex = "/xmpDM:duration xmpDM:scale=\"(.*)\/(.*)\" xmpDM:value=\"(.*)\" \/>/";
        $client = new GuzzleHttp\Client();
        $newuri = str_replace("www", "content", $proposal->getVideoURL());
        $newuri = str_replace("embed", "", $proposal->getVideoURL());
        $response = $client->get($newuri . 'sc.xmp');
        preg_match($regex, $response->getBody(), $matches);

        array_shift($matches);

        if (!empty($matches)) {
            $total = (($matches[0] / $matches[1]) * $matches[2]);
            return round(($playPercent / 100) * ($total));
        } else {
            return 0;
        }


    }

    public function checkXFrameOption()
    {
        $response = new JsonResponse();
        $url = $this->input->post('link');
        $header = get_headers($url, 1);
        $headerCheck = '';

        if (isset($header["X-Frame-Options"])) {
            $headerCheck = $header["X-Frame-Options"];

        } else if (isset($header["x-frame-options"])) {
            $headerCheck = $header["x-frame-options"];

        } else {
            $response->success = true;
            $response->send();
            exit;
        }

        if ($headerCheck == 'SAMEORIGIN' || $headerCheck == 'DENY' || $headerCheck == 'ALLOW-FROM' || $headerCheck == '') {
            $response->success = false;
            $response->send();
        } else {
            $response->success = false;
            $response->send();
        }
    }


    public function getProposalViewDataById($viewId)
    {
        $data = [];
        // View Data
        $viewData = [];
        
        // Load Check
        $proposalView = $this->em->find('models\ProposalView', $viewId);
        /* @var \models\ProposalView $proposalView */
        if (!$proposalView) {
            $data['success'] = false;
            $data['error_msg'] = 'Proposal View Not Found';
            echo json_encode($data);
            exit;
        }
        $proposal_preview = $this->em->find('models\ProposalPreviewLink', $proposalView->getProposalLinkId());

        

        if (!$proposal_preview) {
            $data['success'] = false;
            $data['error_msg'] = 'Proposal Preview Not Found';
            echo json_encode($data);
            exit;
        }
        $proposal = $this->em->findProposal($proposalView->getProposalId());
        if (!$proposal) {
            $data['success'] = false;
            $data['error_msg'] = 'Proposal Not Found';
            echo json_encode($data);
            exit;
        }
        // Permission Check

        //check if current account can edit proposal
        if (!$this->account()->isAdministrator() && ($this->account()->getFullAccess() == 'no')) { //check if user is not an admin
            //if user is branch manager and the proposal is in a differnet branch
            if (($this->account() != $proposal->getClient()->getAccount()) && ($this->account() != $proposal->getOwner()) && ($this->account()->getUserClass() == 1) && ($this->account()->getBranch() != $proposal->getClient()->getAccount()->getBranch())) {
                $data['success'] = false;
                $data['error_msg'] = 'Permission Denied!';
                echo json_encode($data);
                exit;
            }
        }
        //check if the proposal is in the same company as the user who is editing

        if ($this->account()->getCompany() != $proposal->getClient()->getCompany()) {

            $data['success'] = false;
            $data['error_msg'] = 'Permission Denied!';
            echo json_encode($data);
            exit;
        }

        $linkViews = $this->getProposalRepository()->getProposalLinkViews($proposalView->getProposalLinkId());
        
        $data['linkId'] = $proposalView->getProposalLinkId();

        foreach ($linkViews as $linkView) {
            /* @var \models\ProposalView $linkView */

            $data['created_at'] = Carbon::createFromFormat(
                'Y-m-d H:i:s',
                $linkView->getCreatedAt())->format('m/d/y g:iA');
            // Populate the link view data
            $viewData[] = [
                'id' => $linkView->getId(),
                'duration' => 0,
                'date' => $this->get_preset_from_date($linkView->getCreatedAt()). ' | '.secondsToTime($linkView->getTotalDuration()).' | '.$linkView->getPlatform().' | '.$linkView->getDevice().' | '.$linkView->getBrowser()
            ];

        }


        // Assemble Data
        try {

            $data['created_at'] = Carbon::createFromFormat('Y-m-d H:i:s', $proposalView->getCreatedAt())->format('m/d/y g:iA');
            $data['formattedDuration'] = secondsToTime($proposalView->getTotalDuration());
            $data['duration'] = $proposalView->getTotalDuration();

            $data['email'] = $proposal_preview->getEmail();

            //status btn
            $status = 'Complete';
            $viewStatusClass = "view-complete";

            $now = Carbon::now();
            $viewTime = Carbon::parse($proposalView->getUpdatedAt());
            $diffInMinutes = $viewTime->diffInMinutes($now);

            if ($diffInMinutes < 1) {
                $status = 'Active';
                $viewStatusClass = "view-active";
            } else if ($diffInMinutes < 61) {
                $status = 'Inactive';
                $viewStatusClass = "view-inactive";
            }

            $data['statusBadge'] = '<span class="view_status ' . $viewStatusClass . '" >' . $status . '</span>';
            $data['statusText'] = $status;

            // Proposal
            $proposalData = [];
            $proposalData['projectName'] = $proposal->getProjectName();
            $proposalData['address'] = [
                'address' => $proposal->getProjectAddress(),
                'city' => $proposal->getProjectCity(),
                'state' => $proposal->getProjectState(),
                'zip' => $proposal->getProjectZip(),
            ];

            // CLient
            $clientData = [];
            $clientData['accountName'] = $proposal->getClient()->getClientAccount()->getName();
            $clientData['firstName'] = $proposal->getClient()->getFirstName();
            $clientData['lastName'] = $proposal->getClient()->getLastName();
            // Belongs to the proposal
            $proposalData['client'] = $clientData;
            $data['viewer'] = '<i class="fa fa-fw fa-envelope"></i> ' . $proposal_preview->getEmail();
            if ($proposal->getClient()->getEmail() == $proposal_preview->getEmail()) {
                $data['viewer'] = '<i class="fa fa-fw fa-user"></i> ' . $clientData['firstName'] . ' ' . $clientData['lastName'];

            }

            $data['proposalData'] = $proposalData;

            // View Data
            $data['userAgent'] = [
                'os' => $proposalView->getPlatform(),
                'os_version' => $proposalView->getPlatformVersion(),
                'device' => $proposalView->getDevice(),
                'browser' => $proposalView->getBrowser(),
            ];

            $pageViewData = json_decode($proposalView->getViewData());

            $pageViewTimes = [];
            $serviceViewTimes = [];
            if ($pageViewData) {
                $checkService=0;
                foreach ($pageViewData as $k => $v) {
                    if ($k !== 'service_section') {
                        if ($v > 0) {
                            if($k == 'intro_video'){
                                $pageViewTimes['Intro Video'] = $v;
                            }else{
                                $pageViewTimes[ucfirst($k)] = $v;
                            }
                            
                        }
                    } else {


                        $proposalServices = $proposal->getServices();

                        $serviceIds = [];
                        foreach ($proposalServices as $proposalService) {
                            $duration = 0;
                            $clicks = 0;

                            foreach ($v as $kk => $vv) {
                                if ($vv->id == $proposalService->getServiceId()) {
                                    $duration = $vv->duration;
                                    if(isset($vv->clicks)){
                                        $clicks = $vv->clicks;
                                    };

                                }
                            }

                            if($clicks>0){
                                $checkService=1;
                            }
                            $serviceIds[] = $proposalService->getServiceId();

                            $serviceViewTimes[] = [
                                'serviceTitle' => $proposalService->getServiceName(),
                                'duration' => $duration,
                                'clicks' => $clicks
                            ];

                        }


                        foreach ($v as $kk => $vv) {

                            if (!in_array($vv->id, $serviceIds)) {
                                $serviceViewTimes[] = [
                                    'serviceTitle' => 'Deleted Service',
                                    'duration' => $vv->duration
                                ];
                            }
                        }
                    }
                }

                if ($checkService==1 && !array_key_exists('Services', $pageViewTimes)) {
                    $pageViewTimes['Services'] = 0;
                } 


            }

            $data['pageData'] = $pageViewTimes;
            $data['servicePageViewData'] = $serviceViewTimes;

            if ($proposal->getAuditKey()) {
                $auditHasLink = true;
            } else {
                $auditHasLink = false;
            }

            $data['audit'] = [
                'viewed' => $proposalView->getAuditViewed(),
                'viewTime' => $proposalView->getAuditViewedTime(),
                'auditHasLink' => $auditHasLink
            ];

            $data['signed'] = [];


            $clientSignature = $this->getProposalRepository()->getClientSignature($proposal);
            if ($clientSignature && $proposalView->getSigned()==1) {

                $data['signed'] = [
                    'signed_at' => date_format(date_create($clientSignature->getCreatedAt()), "n/d/Y g:i A"),
                    'full_name' => $clientSignature->getFirstName() . ' ' . $clientSignature->getLastName(),
                    'title' => $clientSignature->getTitle(),
                ];
            }


            $data['service_link_viewed'] = json_decode($proposalView->getServiceLinksViewed());
            $data['service_text_viewed'] = $proposalView->getServiceTextViewedTime();
            if ($proposal->getVideoURL() <> '') {
                $videoHasLink = true;
            } else {
                $videoHasLink = false;
            }
            $data['videoHasLink'] = $videoHasLink;

            $data['video_played'] = json_decode($proposalView->getVideoPlayed());
            $data['image_viewed'] = $proposalView->getViewedImageData();

            $imageDurationData = [];
            $mapDurationData = [];

            if ($proposalView->getViewedImageData()) {
                $imageViewData = json_decode($proposalView->getViewedImageData());

                foreach ($imageViewData as $s => $imageData) {
                    //var_dump($imageData->imageId);die;
                    $image = $this->em->findProposalImage($imageData->imageId);
                    if ($image) {
                        if($image->getMap()){
                            $mapDurationData[] = [
                                'imagepath' => $image->getFullWebPath(),
                                'title' => $image->getTitle(),
                                'duration' => $imageData->duration,
                                'clicks' => $imageData->clicks,
                            ];
                        }else{
                            $imageDurationData[] = [
                                'imagepath' => $image->getFullWebPath(),
                                'title' => $image->getTitle(),
                                'duration' => $imageData->duration,
                                'clicks' => $imageData->clicks
                            ];
                        }
                        
                    }

                }
            }
            $data['imageDurationData'] = $imageDurationData;
            $data['mapDurationData'] = $mapDurationData;

            //Video Data
            $videoDurationData = [];

            if ($proposalView->getViewedVideoData()) {
                $videoViewData = json_decode($proposalView->getViewedVideoData());

                foreach ($videoViewData as $s => $videoData) {

                    if(isset($videoData->videoId)){
                        $video = $this->em->find('models\ProposalVideo', $videoData->videoId);
                        if ($video) {

                            $companyThumbImage = false;
                            $thumbImageURL = site_url('static/images/video-play-icon-transparent.jpg');
                            if ($video->getCompanyVideoId() != 0 && $video->getCompanyCoverImage() != '') {
                                $companyThumbImage = $video->getCompanyCoverImage();
                            }

                            if ($video->getThumbnailImage() || $companyThumbImage) {
                                if ($video->getThumbnailImage()) {
                                    $thumbImageURL = $proposal->getSitePathUploadDir() . '/' . $video->getThumbnailImage();
                                } else {
                                    $thumbImageURL = $companyThumbImage;
                                }
                            } else {

                                $videoType = $video->getVideoType();
                                $url = $video->getVideoUrl();

                                if ($videoType == 'youtube') {

                                    parse_str(parse_url($url, PHP_URL_QUERY), $my_array_of_vars);
                                    $video_id = $my_array_of_vars['v'];
                                    $thumbImageURL = "https://img.youtube.com/vi/" . $video_id . "/0.jpg";
                                } else if ($videoType == 'vimeo') {
                                    $urlParts = explode("/", parse_url($url, PHP_URL_PATH));
                                    $video_id = (int)$urlParts[count($urlParts) - 1];
                                    $thumbImageURL = "https://vumbnail.com/" . $video_id . ".jpg";
                                } else if ($videoType == 'screencast') {
                                    $newThumbImageURL = str_replace('www', 'content', $url);
                                    $thumbImageURL = str_replace('embed', 'FirstFrame.jpg', $newThumbImageURL);
                                }
                            }


                            $videoDurationData[$s] = [
                                'videopath' => $video->getEmbedVideoUrl(),
                                'thumbImageURL' => $thumbImageURL,
                                'title' => $video->getTitle(),
                                'duration' => $videoData->duration,
                                'clicks' => $videoData->clicks
                            ];
                        }
                    }

                }
            }

            $data['videoDurationData'] = $videoDurationData;
            $data['viewData']          = $viewData;

            // $data['signed'] = $proposalView->getSigned();
            $data['printed'] = false;
            if ($proposalView->getPrinted()) {

                $printedData = json_decode($proposalView->getPrinted());
                $data['printed'] = [
                    'printed_at' => date_format(date_create($printedData->printed_at), "n/d/Y g:i A"),

                ];
            }

            $data['ipAddress'] = $proposalView->getIpAddress();

            $data['success'] = true;

            header('Content-Type: application/json');
            echo json_encode($data);

        } catch (\Exception $e) {

            $data['success'] = false;
            $data['error_msg'] = 'An error Occurred, Message: ' . $e->getMessage();
            echo json_encode($data);
            exit;
        }

    }

    

    public function getProposalViewDataByLinkId($linkId)
    {

        // Load Check
        $proposalLink = $this->em->find(models\ProposalPreviewLink::class, $linkId);
        /* @var \models\ProposalPreviewLink $proposalLink */
        if (!$proposalLink) {
            $data['success'] = false;
            $data['error_msg'] = 'Proposal Link Not Found';
            echo json_encode($data);
            exit;
        }
        $proposal = $this->em->find(models\Proposals::class, $proposalLink->getProposalId());
        /* @var models\Proposals $proposal */
        
        if (!$proposal) {
            $data['success'] = false;
            $data['error_msg'] = 'Proposal Not Found';
            echo json_encode($data);
            exit;
        }
        // Permission Check

        //check if current account can edit proposal
        if (!$this->account()->isAdministrator() && ($this->account()->getFullAccess() == 'no')) { //check if user is not an admin
            //if user is branch manager and the proposal is in a differnet branch
            if (($this->account() != $proposal->getClient()->getAccount()) && ($this->account() != $proposal->getOwner()) && ($this->account()->getUserClass() == 1) && ($this->account()->getBranch() != $proposal->getClient()->getAccount()->getBranch())) {
                $data['success'] = false;
                $data['error_msg'] = 'Permission Denied!';
                echo json_encode($data);
                exit;
            }
        }
        //check if the proposal is in the same company as the user who is editing

        if ($this->account()->getCompany() != $proposal->getClient()->getCompany()) {

            $data['success'] = false;
            $data['error_msg'] = 'Permission Denied!';
            echo json_encode($data);
            exit;
        }

    
        // Assemble Data
        try {

        $linkViews = $this->getProposalRepository()->getProposalLinkViews($linkId);

        // Set up data
        $data = [
            'email' => $proposalLink->getEmail(),
            'duration' => 0
        ];

        // View Data
        $viewData = [];
        $data['service_link_viewed'] =[];
        // Proposal
        $proposalData = [];
        $proposalData['projectName'] = $proposal->getProjectName();
        $proposalData['address'] = [
            'address' => $proposal->getProjectAddress(),
            'city' => $proposal->getProjectCity(),
            'state' => $proposal->getProjectState(),
            'zip' => $proposal->getProjectZip(),
        ];

        // Client Data
        $clientData = [];
        $clientData['accountName'] = $proposal->getClient()->getClientAccount()->getName();
        $clientData['firstName'] = $proposal->getClient()->getFirstName();
        $clientData['lastName'] = $proposal->getClient()->getLastName();
        // Belongs to the proposal
        $proposalData['client'] = $clientData;
        $data['viewer'] = '<i class="fa fa-fw fa-envelope"></i> ' . $proposalLink->getEmail();
        if ($proposal->getClient()->getEmail() == $proposalLink->getEmail()) {
            $data['viewer'] = '<i class="fa fa-fw fa-user"></i> ' .
                $clientData['firstName'] . ' ' . $clientData['lastName'];
        }

        $data['proposalData'] = $proposalData;

        // Arrays for later
        $pageViewTimes = [];
        $serviceViewTimes = [];
        $imageDurationData = [];
        $mapDurationData = [];
        $videoDurationData = [];
        $serviceLinkViewedData = [];
        $audit = [
            'viewed'            => 0,
            'viewTime'    => 0,
            'auditHasLink'        => false,
            
        ];

        $userAgentData = [
            'os'            => [],
            'os_version'    => [],
            'device'        => [],
            'browser'       => []
        ];



        // Keep this outside of the loop
        $proposalServices = $proposalServices = $proposal->getServices();
        $serviceIds = [];

        foreach ($linkViews as $linkView) {
            /* @var \models\ProposalView $linkView */

           
           // $data['created_at'] = Carbon::createFromFormat('Y-m-d H:i:s',$linkView->getCreatedAt())->format('m/d/y g:iA');
           $data['created_at'] =    date('m/d/Y g:i A', strtotime($linkView->getCreatedAt()) + TIMEZONE_OFFSET);;

            
            // Populate the link view data
            $viewData[] = [
                'id' => $linkView->getId(),
                'duration' => 0,
                'date' => $this->get_preset_from_date($linkView->getCreatedAt()). ' | '.secondsToTime($linkView->getTotalDuration()).' | '.$linkView->getPlatform().' | '.$linkView->getDevice().' | '.$linkView->getBrowser()
            ];

            // Increment the duration
            $data['duration'] += $linkView->getTotalDuration();

            // User Agent Data - add if not already there

            // OS
            if (!in_array($linkView->getPlatform(), $userAgentData['os'])) {
                $userAgentData['os'][] = $linkView->getPlatform();
            }

            // Device
            if (!in_array($linkView->getPlatformVersion(), $userAgentData['os_version'])) {
                $userAgentData['os_version'][] = $linkView->getPlatformVersion();
            }

            // Device
            if (!in_array($linkView->getDevice(), $userAgentData['device'])) {
                $userAgentData['device'][] = $linkView->getDevice();
            }

            // Browser
            if (!in_array($linkView->getBrowser(), $userAgentData['browser'])) {
                $userAgentData['browser'][] = $linkView->getBrowser();
            }


            // Page and service view times
            $pageViewData = json_decode($linkView->getViewData());

            if ($pageViewData) {
                $checkService = 0;
                foreach ($pageViewData as $k => $v) {
                    if ($k !== 'service_section') {
                        if ($v > 0) {

                            // Increment if exists, create if not
                            if (array_key_exists(ucfirst($k), $pageViewTimes)) {
                                $pageViewTimes[ucfirst($k)] += $v;
                            } else {
                                $pageViewTimes[ucfirst($k)] = $v;
                            }
                        }
                    } else {

                        foreach ($proposalServices as $proposalService) {
                            /* @var \models\Proposal_services $proposalService */

                            $duration = 0;
                            $clicks = 0;

                            foreach ($v as $kk => $vv) {
                                if ($vv->id == $proposalService->getServiceId()) {
                                    $duration = $vv->duration;
                                    if(isset($vv->clicks)){
                                        $clicks = $vv->clicks;
                                    };

                                }
                            }
                            if($clicks > 0){

                                $checkService = 1;

                            }
                            $serviceIds[] = $proposalService->getServiceId();

                            // Increment the value if we have a key. Create anew key if not
                            if (array_key_exists($proposalService->getServiceId(), $serviceViewTimes)) {
                                $serviceViewTimes[$proposalService->getServiceId()]['clicks'] += $clicks;
                                $serviceViewTimes[$proposalService->getServiceId()]['duration'] += $duration;
                            } else {
                                $serviceViewTimes[$proposalService->getServiceId()] = [
                                    'serviceTitle' => $proposalService->getServiceName(),
                                    'duration' => $duration,
                                    'clicks' => $clicks
                                ];
                            }
                        }

                        foreach ($v as $kk => $vv) {

                            if (!in_array($vv->id, $serviceIds)) {

                                if(array_key_exists('deleted', $serviceViewTimes)) {
                                    $serviceViewTimes['deleted']['duration'] += $vv->duration;
                                    $serviceViewTimes['deleted']['clicks'] += $vv->clicks;
                                } else {
                                    $serviceViewTimes['deleted'] = [
                                        'serviceTitle' => 'Deleted Service(s)',
                                        'duration' => $vv->duration,
                                        'clicks' => $vv->clicks
                                    ];
                                }
                            }
                        }
                    }
                }

                if ($checkService==1 && !array_key_exists('Services', $pageViewTimes)) {
                    $pageViewTimes['Services'] = 0;
                } 
            }

            if($linkView->getServiceLinksViewed()){
                $serviceLinkData = json_decode($linkView->getServiceLinksViewed());

                foreach ($serviceLinkData as $s => $serviceData) {

                    
                    if ($serviceData->url) {

                        if (array_key_exists($serviceData->url, $serviceLinkViewedData)) {
                            $serviceLinkViewedData[$serviceData->url]['clicks'] += $serviceData->clicks;
                        } else {
                            $serviceLinkViewedData[$serviceData->url] = [
                                'url' => $serviceData->url,
                                
                                'clicks' => $serviceData->clicks
                            ];
                        }
                    }

                }
            }

            if ($proposal->getAuditKey()) {
                $auditHasLink = true;
            } else {
                $auditHasLink = false;
            }
            
            $audit['viewed'] += $linkView->getAuditViewed();
            $audit['viewTime'] += $linkView->getAuditViewedTime();
            $audit['auditHasLink'] = $auditHasLink;
                
            // Image View Data
            if ($linkView->getViewedImageData()) {

                $imageViewData = json_decode($linkView->getViewedImageData());

                foreach ($imageViewData as $s => $imageData) {

                    $image = $this->em->findProposalImage($imageData->imageId);
                    if ($image) {

                        if (array_key_exists($imageData->imageId, $imageDurationData)) {
                            $imageDurationData[$imageData->imageId]['duration'] += $imageData->duration;
                            $imageDurationData[$imageData->imageId]['clicks'] += $imageData->clicks;
                        }else if(array_key_exists($imageData->imageId, $mapDurationData)){
                            $mapDurationData[$imageData->imageId]['duration'] += $imageData->duration;
                            $mapDurationData[$imageData->imageId]['clicks'] += $imageData->clicks;
                        } else {
                            if($image->getMap()){
                                $mapDurationData[$imageData->imageId] = [
                                    'imagepath' => $image->getFullWebPath(),
                                    'title' => $image->getTitle(),
                                    'duration' => $imageData->duration,
                                    'clicks' => $imageData->clicks
                                ];
                            }else{
                                $imageDurationData[$imageData->imageId] = [
                                    'imagepath' => $image->getFullWebPath(),
                                    'title' => $image->getTitle(),
                                    'duration' => $imageData->duration,
                                    'clicks' => $imageData->clicks
                                ];
                            }
                            
                        }
                    }

                }
            }


            //Video Data
            

            if ($linkView->getViewedVideoData()) {
                $videoViewData = json_decode($linkView->getViewedVideoData());

              //  echo "<pre>";print_r($videoViewData);die;
                foreach ($videoViewData as $s => $videoData) {
                    if(isset($videoData->videoId)){
                    $video = $this->em->find('models\ProposalVideo', $videoData->videoId);
                    if ($video) {

                        $companyThumbImage = false;
                        $thumbImageURL = site_url('static/images/video-play-icon-transparent.jpg');
                        if ($video->getCompanyVideoId() != 0 && $video->getCompanyCoverImage() != '') {
                            $companyThumbImage = $video->getCompanyCoverImage();
                        }

                        if ($video->getThumbnailImage() || $companyThumbImage) {
                            if ($video->getThumbnailImage()) {
                                $thumbImageURL = $proposal->getSitePathUploadDir() . '/' . $video->getThumbnailImage();
                            } else {
                                $thumbImageURL = $companyThumbImage;
                            }
                        } else {

                            $videoType = $video->getVideoType();
                            $url = $video->getVideoUrl();

                            if ($videoType == 'youtube') {

                                parse_str(parse_url($url, PHP_URL_QUERY), $my_array_of_vars);
                                $video_id = $my_array_of_vars['v'];
                                $thumbImageURL = "https://img.youtube.com/vi/" . $video_id . "/0.jpg";
                            } else if ($videoType == 'vimeo') {
                                $urlParts = explode("/", parse_url($url, PHP_URL_PATH));
                                $video_id = (int)$urlParts[count($urlParts) - 1];
                                $thumbImageURL = "https://vumbnail.com/" . $video_id . ".jpg";
                            } else if ($videoType == 'screencast') {
                                $newThumbImageURL = str_replace('www', 'content', $url);
                                $thumbImageURL = str_replace('embed', 'FirstFrame.jpg', $newThumbImageURL);
                            }
                        }


    
                        if (array_key_exists($videoData->videoId, $videoDurationData)) {
                            $videoDurationData[$videoData->videoId]['duration'] += $videoData->duration;
                            $videoDurationData[$videoData->videoId]['clicks'] += $videoData->clicks;
                        } else {
                            $videoDurationData[$videoData->videoId] = [
                                'videopath' => $video->getEmbedVideoUrl(),
                                'thumbImageURL' => $thumbImageURL,
                                'title' => $video->getTitle(),
                                'duration' => $videoData->duration,
                                'clicks' => $videoData->clicks
                            ];
                        }
                    

                    }
                }
                }
            }


            $now = Carbon::now();
            $viewTime = Carbon::parse($linkView->getUpdatedAt());
            $diffInMinutes = $viewTime->diffInMinutes($now);

            $status = 'Complete';
            $viewStatusClass = "view-complete";

            if ($diffInMinutes < 1) {
                $status = 'Active';
                $viewStatusClass = "view-active";
            } else if ($diffInMinutes < 61) {
                $status = 'Inactive';
                $viewStatusClass = "view-inactive";
            }

            $data['statusBadge'] = '<span class="view_status ' . $viewStatusClass . '" >' . $status . '</span>';
            $data['statusText'] = $status;
            

        }

        $data['signed'] = [];

            $clientSignature = $this->getProposalRepository()->getClientSignature($proposal);
            if ($clientSignature) {

                $data['signed'] = [
                    // 'signed_at' => date_format(date_create($clientSignature->getCreatedAt()), "n/d/Y g:i A"),
                    'signed_at' =>  date('m/d/Y g:i A', strtotime($clientSignature->getCreatedAt()) + TIMEZONE_OFFSET),
                    'full_name' => $clientSignature->getFirstName() . ' ' . $clientSignature->getLastName(),
                    'title' => $clientSignature->getTitle(),
                ];
            }

        $data['user_signed'] = [];
        $userSignature = $this->getProposalRepository()->getCompanySignature($proposal);
        if ($userSignature) {

            $data['user_signed'] = [
                //'signed_at' => date_format(date_create($userSignature->getCreatedAt()), "n/d/Y g:i A"),
                'signed_at' =>  date('m/d/Y g:i A', strtotime($userSignature->getCreatedAt()) + TIMEZONE_OFFSET),
                'full_name' => $userSignature->getFirstName() . ' ' . $userSignature->getLastName(),
                'title' => $userSignature->getTitle(),
            ];
        }

        $data['pageData']               = $pageViewTimes;
        $data['servicePageViewData']    = $serviceViewTimes;
        $data['viewData']               = $viewData;
        $data['imageDurationData']      = $imageDurationData;
        $data['mapDurationData']      = $mapDurationData;
        $data['videoDurationData']      = $videoDurationData;
        $data['userAgentData']          = $userAgentData;
        $data['service_link_viewed']    = $serviceLinkViewedData;
        $data['audit']    = $audit;

        $pageViewTimes = [];
        $serviceViewTimes = [];
        $data['success'] = true;

        header('Content-Type: application/json');
        echo json_encode($data);

    } catch (\Exception $e) {

        $data['success'] = false;
        $data['error_msg'] = 'An error Occurred, Message: ' . $e->getMessage();
        echo json_encode($data);
        exit;
    }

    }

    public function client_signature_form_submit()
    {

        $response = new JsonResponse();
        try {
            $imageData = $this->input->post('signature');
            $firstName = $this->input->post('signature_firstname');
            $lastName = $this->input->post('signature_lastname');
            $signature_title = $this->input->post('signature_title');
            $company = $this->input->post('signature_company');
            $email = $this->input->post('signature_email');
            $proposal_id = $this->input->post('proposal_id');
            $proposal_link_id = $this->input->post('proposal_link_id');
            $proposal = $this->em->findProposal($proposal_id);
            $signature_address = $this->input->post('signature_address');
            $signature_city = $this->input->post('signature_city');
            $signature_state = $this->input->post('signature_state');
            $signature_zip = $this->input->post('signature_zip');
            $signature_cell_phone = $this->input->post('signature_cell_phone');
            $signature_office_phone = $this->input->post('signature_office_phone');
            $signature_type = $this->input->post('signature_type');

            $comments = $this->input->post('signature_comments');

            if ($signature_type == 'company') {
                $signature_file_name = 'company_signature_'.time().'.png';
                $sigType = models\ProposalSignature::COMPANY;
            } else {
                $signature_file_name = 'client_signature_'.time().'.png';
                $sigType = models\ProposalSignature::CLIENT;
            }

            $upload_dir = "uploads/proposal_signature/" . $proposal_id . '/';

            if (!is_dir($upload_dir)) {
                mkdir($upload_dir, 0775, true);
                chmod($upload_dir, 0775);
            }

            if ($imageData) {
                $reviewerSigImage = $this->imageManager->make($imageData);

                $reviewerSigImage->resize(230, 70, function ($constraint) {
                    $constraint->aspectRatio();
                });
                $reviewerSigImage->save($upload_dir . $signature_file_name);
                chmod($upload_dir . $signature_file_name, 0775);
            }

            //$this->db->query('DELETE FROM proposal_signatures WHERE sig_type = ' . $sigType . ' AND proposal_id=' . $proposal_id);

            $p_signature = new models\ProposalSignature();
            $p_signature->setProposalId($proposal_id);
            $p_signature->setFirstName($firstName);
            $p_signature->setLastName($lastName);
            $p_signature->setCompany($company);
            $p_signature->setEmail($email);
            $p_signature->setTitle($signature_title);
            $p_signature->setSignatureFile($signature_file_name);
            $p_signature->setCreatedAt(Carbon::now());
            $p_signature->setIpAddress($_SERVER['REMOTE_ADDR']);
            $p_signature->setComments($comments);
            $p_signature->setSigType($sigType);
            $p_signature->setProposalLinkId($proposal_link_id);
            $p_signature->setAddress($signature_address);
            $p_signature->setCity($signature_city);
            $p_signature->setState($signature_state);
            $p_signature->setZip($signature_zip);
            $p_signature->setCellPhone($signature_cell_phone);
            $p_signature->setOfficePhone($signature_office_phone);
            

            $this->em->persist($p_signature);
            $this->em->flush();
            $proposal->setRebuildFlag(1);
            if ($signature_type == 'company') {
                $proposal->setCompanySignatureId($p_signature->getId());
            }else{
                $proposal->setSignatureId($p_signature->getId());
            }
            
            

            $this->em->persist($proposal);
            $this->em->flush();

            $this->log_manager->add(\models\ActivityAction::WEB_PROPOSAL_USER_SIGN, 'Proposal Signed By: ' . $firstName . '  ' . $lastName . '-' . $signature_title, $proposal->getClient(), $proposal);

            $client_job_array = [
                'proposal_id' => $proposal_id,
                'p_signature_email' => $email,
                'p_signature_firstname' => $firstName,
                'p_signature_lastname' => $lastName,
                'p_signature_company' => $company,
                'p_signature_title' => $signature_title,
                'p_signature_comment' => $comments,
                // 'p_signature_created_at' => date_format(date_create($p_signature->getCreatedAt()), "n/j/y g:i A"),
                'p_signature_created_at' => date('m/d/Y g:i A', strtotime($p_signature->getCreatedAt()) + TIMEZONE_OFFSET),
                'p_signature_ip_address' => mapIP($p_signature->getIpAddress(),'',true),
                'p_signature_ip_address_text' => $p_signature->getIpAddress(),
                'p_signature_type' => $signature_type,

            ];

            $this->load->library('jobs');

            if ($signature_type == 'company') {

                $checkSign = $this->db->query("SELECT COUNT(proposal_signatures.id) as ncount FROM proposal_signatures WHERE sig_type = " . models\ProposalSignature::CLIENT . " AND proposal_id=" . $proposal_id)->result()[0];

                //$checkSignee = $this->db->query("SELECT COUNT(proposal_signees.id) as ncount FROM proposal_signees WHERE signee_type = " . models\ProposalSignee::CLIENT . " AND proposal_id=" . $proposal_id)->result()[0];


                if ($checkSign->ncount > 0 ) {
                    $this->jobs->create($_ENV['QUEUE_EMAIL'], 'jobs', 'proposal_company_final_signature_email_send', $client_job_array, 'test job');
                }
            } else {

                // Update the proposal status if not already sold
                if (!$proposal->getProposalStatus()->isSales()) {
                    $signedStatus = $this->em->findStatus(\models\Status::SIGNED);
                    $proposal->setProposalStatus($signedStatus);

                    // Also set it as won
                    if (!$proposal->getWinDate()) {
                        $proposal->setWinDate(Carbon::now()->timestamp);
                    }

                    $this->em->persist($proposal);
                    $this->em->flush();

                    // Log the change
                    $this->log_manager->add(
                            \models\ActivityAction::WEB_PROPOSAL_CLIENT_SIGN,
                            'Proposal Status Automatically Updated to ' . $signedStatus->getText(),
                            $proposal->getClient(),
                            $proposal
                    );
                }

                // Check to see if there is a company signature
                $checkSign = $this->db->query("SELECT COUNT(proposal_signatures.id) as ncount FROM proposal_signatures WHERE sig_type = " . models\ProposalSignature::COMPANY . " AND proposal_id=" . $proposal_id)->result()[0];

                
                // If company signture
                if ($checkSign->ncount > 0) {
                    $this->jobs->create($_ENV['QUEUE_EMAIL'], 'jobs', 'proposal_client_final_signature_email_send', $client_job_array, 'test job');
                } else {

                    $checkSignee = $this->db->query("SELECT COUNT(proposal_signees.id) as ncount FROM proposal_signees WHERE signee_type = " . models\ProposalSignee::COMPANY . " AND proposal_id=" . $proposal_id)->result()[0];
                    
                    //Check if there is a signee
                    if ($checkSignee->ncount > 0) {
                        $this->jobs->create($_ENV['QUEUE_EMAIL'], 'jobs', 'proposal_signature_email_send', $client_job_array, 'test job');
                    } 
                    // else if ($proposal->getOwner()->hasSignatureFile()) {

                    //     $this->jobs->create($_ENV['QUEUE_EMAIL'], 'jobs', 'proposal_client_final_signature_email_send', $client_job_array, 'test job');
                    
                    // } 
                    else {
                        $this->jobs->create($_ENV['QUEUE_EMAIL'], 'jobs', 'proposal_signature_email_send', $client_job_array, 'test job');
                    }
                }
            }

            $response->src = site_url($upload_dir . $signature_file_name);
            //$response->signed = date_format(date_create($p_signature->getCreatedAt()), "m/d/y g:i A");
            $response->signed = date('m/d/Y g:i A', strtotime($p_signature->getCreatedAt()) + TIMEZONE_OFFSET);
           // $response->signed_date = date_format(date_create($p_signature->getCreatedAt()), "n/d/Y");
            $response->signed_date = date('m/d/Y g:i A', strtotime($p_signature->getCreatedAt()) + TIMEZONE_OFFSET);
            $response->sign_id = $p_signature->getId();
            $response->success = true;
            $response->send();
        } catch (\Exception $e) {
            $response->success = false;
            $response->send();
        }
    }

    public function proposal_table_signature()
    {

        $response = new JsonResponse();
        try {
            $imageData = $this->input->post('signature');
            $firstName = $this->input->post('signature_firstname');
            $lastName = $this->input->post('signature_lastname');
            $signature_title = $this->input->post('signature_title');
            $company = $this->input->post('signature_company');
            $email = $this->input->post('signature_email');
            $comments = $this->input->post('signature_comments');
            $proposal_id = $this->input->post('proposal_id');
            $proposal = $this->em->findProposal($proposal_id);
            $signature_address = $this->input->post('signature_address');
            $signature_city = $this->input->post('signature_city');
            $signature_state = $this->input->post('signature_state');
            $signature_zip = $this->input->post('signature_zip');
            $signature_cell_phone = $this->input->post('signature_cell_phone');
            $signature_office_phone = $this->input->post('signature_office_phone');

                $signature_file_name = 'company_signature_'.time().'.png';
                $sigType = models\ProposalSignature::COMPANY;
            

            $upload_dir = "uploads/proposal_signature/" . $proposal_id . '/';

            if (!is_dir($upload_dir)) {
                mkdir($upload_dir, 0775, true);
                chmod($upload_dir, 0775);
            }

            if ($imageData) {
                $reviewerSigImage = $this->imageManager->make($imageData);

                $reviewerSigImage->resize(230, 70, function ($constraint) {
                    $constraint->aspectRatio();
                });
                $reviewerSigImage->save($upload_dir . $signature_file_name);
                chmod($upload_dir . $signature_file_name, 0775);
            }

            //$this->db->query('DELETE FROM proposal_signatures WHERE sig_type = ' . $sigType . ' AND proposal_id=' . $proposal_id);

            $p_signature = new models\ProposalSignature();
            $p_signature->setProposalId($proposal_id);
            $p_signature->setFirstName($firstName);
            $p_signature->setLastName($lastName);
            $p_signature->setCompany($company);
            $p_signature->setEmail($email);
            $p_signature->setTitle($signature_title);
            $p_signature->setSignatureFile($signature_file_name);
            $p_signature->setCreatedAt(Carbon::now());
            $p_signature->setIpAddress($_SERVER['REMOTE_ADDR']);
            $p_signature->setSigType($sigType);
            $p_signature->setComments($comments);
            $p_signature->setAddress($signature_address);
            $p_signature->setCity($signature_city);
            $p_signature->setState($signature_state);
            $p_signature->setZip($signature_zip);
            $p_signature->setCellPhone($signature_cell_phone);
            $p_signature->setOfficePhone($signature_office_phone);

            $this->em->persist($p_signature);
            $this->em->flush();
            $proposal->setRebuildFlag(1);
            $proposal->setCompanySignatureId($p_signature->getId());

           

            $this->em->persist($proposal);
            $this->em->flush();

            $this->log_manager->add(\models\ActivityAction::WEB_PROPOSAL_USER_SIGN, 'Proposal Signed ', $proposal->getClient(), $proposal);


            $this->load->library('jobs');

            

                


                $checkSign = $this->db->query("SELECT COUNT(proposal_signatures.id) as ncount FROM proposal_signatures WHERE sig_type = " . models\ProposalSignature::CLIENT . " AND proposal_id=" . $proposal_id)->result()[0];

                //$checkSignee = $this->db->query("SELECT COUNT(proposal_signees.id) as ncount FROM proposal_signees WHERE signee_type = " . models\ProposalSignee::CLIENT . " AND proposal_id=" . $proposal_id)->result()[0];


                if ($checkSign->ncount > 0 ) {
                    $client_job_array = [
                        'proposal_id' => $proposal_id,
                        'p_signature_email' => $email,
                        'p_signature_firstname' => $firstName,
                        'p_signature_lastname' => $lastName,
                        'p_signature_company' => $company,
                        'p_signature_title' => $signature_title,
                        'p_signature_comment' => $comments,
                        'p_signature_created_at' => date_format(date_create($p_signature->getCreatedAt()), "n/j/y g:i A"),
                        'p_signature_ip_address' => mapIP($p_signature->getIpAddress(),'',true),
                        'p_signature_ip_address_text' => $p_signature->getIpAddress(),
                        'p_signature_type' => 'company',
        
                    ];
                    $this->jobs->create($_ENV['QUEUE_EMAIL'], 'jobs', 'proposal_company_final_signature_email_send', $client_job_array, 'test job');
                }
            

            
            $response->success = true;
            $response->send();
        } catch (\Exception $e) {
            $response->success = false;
            $response->send();
        }
    
    }




    public function group_proposal_table_signature()
    {

        $response = new JsonResponse();
        $proposal_ids = $this->input->post('proposal_ids');
        $firstName = $this->input->post('signature_firstname');
        $lastName = $this->input->post('signature_lastname');
        $signature_title = $this->input->post('signature_title');
        $company = $this->input->post('signature_company');
        $email = $this->input->post('signature_email');
        $comments = $this->input->post('signature_comments');

        $signature_address = $this->input->post('signature_address');
        $signature_city = $this->input->post('signature_city');
        $signature_state = $this->input->post('signature_state');
        $signature_zip = $this->input->post('signature_zip');
        $signature_cell_phone = $this->input->post('signature_cell_phone');
        $signature_office_phone = $this->input->post('signature_office_phone');
        
        $total_proposals = count($proposal_ids);
        $signed_proposals = 0; 
        $reject_permission_proposals = 0; 
        $reject_signed_proposals = 0; 
        try {
            $imageData = $this->input->post('signature');

            if ($imageData) {
                $reviewerSigImage = $this->imageManager->make($imageData);

                $reviewerSigImage->resize(230, 70, function ($constraint) {
                    $constraint->aspectRatio();
                });
                
            }

            foreach($proposal_ids as $proposal_id){
            
                
                
            
                $proposal = $this->em->findProposal($proposal_id);

                if($proposal->getCompanySignatureId()){
                    $reject_signed_proposals++;
                    continue;
                }

                if (!$this->account()->isAdministrator() && ($this->account()->getFullAccess() == 'no')) { //check if user is not an admin
                    //if user is branch manager and the proposal is in a differnet branch
                    if (($this->account() != $proposal->getOwner()) && ($this->account()->getUserClass() == 1) && ($this->account()->getBranch() != $proposal->getClient()->getAccount()->getBranch())) {
                        
                        $reject_permission_proposals++;
                        continue;
                    }
                }
                $signature_file_name = 'company_signature_'.time().'.png';
                $sigType = models\ProposalSignature::COMPANY;
                

                $upload_dir = "uploads/proposal_signature/" . $proposal_id . '/';

                if (!is_dir($upload_dir)) {
                    mkdir($upload_dir, 0775, true);
                    chmod($upload_dir, 0775);
                }

                if ($imageData) {
                    
                    $reviewerSigImage->save($upload_dir . $signature_file_name);
                    chmod($upload_dir . $signature_file_name, 0775);
                }

                //$this->db->query('DELETE FROM proposal_signatures WHERE sig_type = ' . $sigType . ' AND proposal_id=' . $proposal_id);

                $p_signature = new models\ProposalSignature();
                $p_signature->setProposalId($proposal_id);
                $p_signature->setFirstName($firstName);
                $p_signature->setLastName($lastName);
                $p_signature->setCompany($company);
                $p_signature->setEmail($email);
                $p_signature->setTitle($signature_title);
                $p_signature->setSignatureFile($signature_file_name);
                $p_signature->setCreatedAt(Carbon::now());
                $p_signature->setIpAddress($_SERVER['REMOTE_ADDR']);
                $p_signature->setSigType($sigType);
                $p_signature->setComments($comments);

                $p_signature->setAddress($signature_address);
                $p_signature->setCity($signature_city);
                $p_signature->setState($signature_state);
                $p_signature->setZip($signature_zip);
                $p_signature->setCellPhone($signature_cell_phone);
                $p_signature->setOfficePhone($signature_office_phone);

            
                $this->em->persist($p_signature);
                $this->em->flush();
                $proposal->setRebuildFlag(1);
                $proposal->setCompanySignatureId($p_signature->getId());

                $signed_proposals++;

                $this->em->persist($proposal);
                $this->em->flush();

                $this->log_manager->add(\models\ActivityAction::WEB_PROPOSAL_USER_SIGN, 'Proposal Signed ', $proposal->getClient(), $proposal);


                $this->load->library('jobs');


                    // Update the proposal status if not already sold
                    

                    $checkSign = $this->db->query("SELECT COUNT(proposal_signatures.id) as ncount FROM proposal_signatures WHERE sig_type = " . models\ProposalSignature::CLIENT . " AND proposal_id=" . $proposal_id)->result()[0];
    
                    if ($checkSign->ncount > 0 ) {
                        $client_job_array = [
                            'proposal_id' => $proposal_id,
                            'p_signature_email' => $email,
                            'p_signature_firstname' => $firstName,
                            'p_signature_lastname' => $lastName,
                            'p_signature_company' => $company,
                            'p_signature_title' => $signature_title,
                            'p_signature_comment' => $comments,
                            'p_signature_created_at' => date_format(date_create($p_signature->getCreatedAt()), "n/j/y g:i A"),
                            'p_signature_ip_address' => mapIP($p_signature->getIpAddress(),'',true),
                            'p_signature_ip_address_text' => $p_signature->getIpAddress(),
                            'p_signature_type' => 'company',
            
                        ];
                        $this->jobs->create($_ENV['QUEUE_EMAIL'], 'jobs', 'proposal_company_final_signature_email_send', $client_job_array, 'test job');
                    }
                
                }

                $response->success = true;
                $response->total_proposals = $total_proposals;
                $response->signed_proposals = $signed_proposals;
                $response->reject_permission_proposals = $reject_permission_proposals;
                $response->reject_signed_proposals = $reject_signed_proposals;
                $response->send();
            } catch (\Exception $e) {
                $response->success = false;
                $response->send();
            }
        
    
    }

    
    public function deleteProposalSignature()
    {
        $response = new JsonResponse();
        $proposal_id = $this->input->post('proposal_id');
        unlink("uploads/proposal_signature/" . $proposal_id . '/client_signature.png');
        unlink("uploads/proposal_signature/" . $proposal_id . '/company_signature.png');
        $this->db->query('DELETE FROM proposal_signatures WHERE proposal_id=' . $proposal_id);
        $response->success = true;
        $response->send();
    }

    public function deleteProposalClientSignature()
    {
        $response = new JsonResponse();
        $proposal_id = $this->input->post('proposal_id');
        $signature_id = $this->input->post('signature_id');
        $ProposalClientSignature = $this->em->find('models\ProposalSignature', $signature_id);
        $ProposalClientSignature->setIsDeleted(1);
        $this->em->persist($ProposalClientSignature);
        $this->em->flush();
        $proposal = $this->em->findProposal($proposal_id);
        
        $proposal->setSignatureId(NULL);
        $this->em->persist($proposal);
        $this->em->flush();
        $this->log_manager->add(\models\ActivityAction::WEB_PROPOSAL_USER_SIGN, 'Proposal Client Signature Deleted', $proposal->getClient(), $proposal);





        $clientSig = $this->getProposalRepository()->getClientSignee($proposal);
        if($clientSig){
            $response->first_name = $clientSig->getFirstName();
            $response->last_name = $clientSig->getLastName();
            $response->title = $clientSig->getTitle();
            $response->company_name = $clientSig->getCompanyName();
            $response->address = $clientSig->getAddress();
            $response->city = $clientSig->getCity();
            $response->state = $clientSig->getState();
            $response->zip = $clientSig->getZip();
            $response->email = $clientSig->getEmail();
            $response->cell_phone = $clientSig->getCellPhone();
            $response->office_phone = $clientSig->getOfficePhone();
            
            
        }else{
            $response->first_name = $proposal->getClient()->getFirstName();
            $response->last_name = $proposal->getClient()->getLastName();
            $response->title = $proposal->getClient()->getTitle();
            $response->company_name = $proposal->getClient()->getClientAccount()->getName();
            $response->address = $proposal->getClient()->getAddress();
            $response->city = $proposal->getClient()->getCity();
            $response->state = $proposal->getClient()->getState();
            $response->zip = $proposal->getClient()->getZip();
            $response->email = $proposal->getClient()->getEmail();
            $response->cell_phone = $proposal->getClient()->getCellPhone();
            $response->office_phone = $proposal->getClient()->getBusinessPhone();
            

        }


        $response->success = true;
        $response->send();
    }

    public function deleteProposalCompanySignature()
    {
        $response = new JsonResponse();
        $proposal_id = $this->input->post('proposal_id');
        $signature_id = $this->input->post('signature_id');
        $ProposalCompanySignature = $this->em->find('models\ProposalSignature', $signature_id);
        $ProposalCompanySignature->setIsDeleted(1);
        $this->em->persist($ProposalCompanySignature);
        $this->em->flush();
        $proposal = $this->em->findProposal($proposal_id);
        $proposal->setCompanySignatureId(NULL);
        $this->em->persist($proposal);
        $this->em->flush();


        $this->log_manager->add(\models\ActivityAction::WEB_PROPOSAL_USER_SIGN, 'Proposal Company Signature Deleted', $proposal->getClient(), $proposal);

        $companySig = $this->getProposalRepository()->getCompanySignee($proposal);
        if($companySig){
            $response->first_name = $companySig->getFirstName();
            $response->last_name = $companySig->getLastName();
            $response->title = $companySig->getTitle();
            $response->company_name = $companySig->getCompanyName();
            $response->address = $companySig->getAddress();
            $response->city = $companySig->getCity();
            $response->state = $companySig->getState();
            $response->zip = $companySig->getZip();
            $response->email = $companySig->getEmail();
            $response->cell_phone = $companySig->getCellPhone();
            $response->office_phone = $companySig->getOfficePhone();
            $response->fax = '';
            $response->website = '';
            
        }else{
            $response->first_name = $proposal->getOwner()->getFirstName();
            $response->last_name = $proposal->getOwner()->getLastName();
            $response->title = $proposal->getOwner()->getTitle();
            $response->company_name = $proposal->getOwner()->getCompany()->getCompanyName();
            $response->address = $proposal->getOwner()->getAddress();
            $response->city = $proposal->getOwner()->getCity();
            $response->state = $proposal->getOwner()->getState();
            $response->zip = $proposal->getOwner()->getZip();
            $response->email = $proposal->getOwner()->getEmail();
            $response->cell_phone = $proposal->getOwner()->getCellPhone();
            $response->office_phone = $proposal->getOwner()->getOfficePhone();
            $response->fax = ($proposal->getOwner()->getFax()) ? $proposal->getOwner()->getFax() : $proposal->getClient()->getCompany()->getFax();
            $response->website = $proposal->getClient()->getCompany()->getCompanyWebsite();

        }
        
        $response->success = true;
        $response->send();
    }
    
    public function web_proposal_question_form_submit()
    {

        $response = new JsonResponse();
        try {

            $firstName = $this->input->post('ask_question_firstname');
            $lastName = $this->input->post('ask_question_lastname');
            $title = $this->input->post('ask_question_title');
            $company = $this->input->post('ask_question_company');
            $email = $this->input->post('ask_question_email');
            $proposal_id = $this->input->post('proposal_id');
            $proposal = $this->em->findProposal($proposal_id);
            $question = $this->input->post('ask_question');


            $this->log_manager->add(\models\ActivityAction::WEB_PROPOSAL_ASK_QUESTION, 'Proposal Client Ask Question : ' . $question, $proposal->getClient(), $proposal);

            $client_job_array = [
                'proposal_id' => $proposal_id,
                'p_question_email' => $email,
                'p_question_firstname' => $firstName,
                'p_question_lastname' => $lastName,
                'p_question_company' => $company,
                'p_question_title' => $title,
                'p_question_text' => $question,
                'p_question_ip_address' => $_SERVER['REMOTE_ADDR'],

            ];


            $this->load->library('jobs');

            // Save the opaque image
            $this->jobs->create($_ENV['QUEUE_EMAIL'], 'jobs', 'proposal_question_email_send', $client_job_array, 'test job');


            $response->success = true;
            $response->send();
        } catch (\Exception $e) {
            $response->success = false;
            $response->send();
        }


    }

    public function proposalVideoThumbImageUpload()
    {
        set_time_limit(120);
        include('src/class.fileuploader.php');
        //$this->load->library('FileUploader');

        //print_r($_FILES);die;
        $customName = md5(microtime());
        $proposal = $this->em->findProposal($this->input->post('proposalId'));
        $proposalVideo = $this->em->find('models\ProposalVideo', $this->input->post('proposalVideoId'));

        if (!$proposal) {
            $data['error'] = 1;
            $data['isSuccess'] = false;
            $data['message'] = "Unable to load proposal. Proposal ID: " . $this->input->post('proposalId');
            echo json_encode($data);
            return;
        }

        $companyFolder = $proposal->getCompanyUploadDir();

        if (!is_dir($companyFolder)) {
            mkdir($companyFolder, 0777, true);
        }

        $folder = $proposal->getUploadDir();
        if (!is_dir($folder)) {
            mkdir($folder, 0777, true);
        }

        // initialize FileUploader
        $FileUploader = new FileUploader('files', array(
            'limit' => null,
            'maxSize' => null,
            'fileMaxSize' => null,
            'extensions' => null,
            'required' => false,
            'uploadDir' => $folder . '/',
            'title' => $customName ? $customName : 'name',
            'replace' => false,
            'listInput' => true,
            'files' => null
        ));

        // call to upload the files
        $data = $FileUploader->upload();

        if ($data['isSuccess']) {
            $fileName = $data['files'][0]['name'];

            $proposal->setRebuildFlag(1);
            $proposalVideo->setThumbnailImage($fileName);
            $this->em->persist($proposal);
            $this->em->persist($proposalVideo);
            $this->em->flush();
            $this->getLogRepository()->add([
                'action' => 'proposal_set_video_thumb_image',
                'details' => "Proposal Video Overlay Image Set",
                'proposal' => $proposal->getProposalId(),
                'account' => $this->account()->getAccountId(),
                'company' => $this->account()->getCompanyId(),
            ]);
            $data['error'] = 0;
            $data['isSuccess'] = true;
            $data['path'] = $fileName;
            $data['video_id'] = $this->input->post('proposalVideoId');

            //Log Proposal video add
            $this->log_manager->add(\models\ActivityAction::ADD_COVER_IMAGE_PROPOSAL_VIDEO, 'Proposal video Thumnail Added' , $proposal->getClient(), $proposal);

        } else {
            $data['error'] = 1;
            echo json_encode($data);
            exit;
        }


        echo json_encode($data);
    }


    public function companyVideoThumbImageUpload()
    {
        set_time_limit(120);
        include('src/class.fileuploader.php');
        //$this->load->library('FileUploader');

        //print_r($_FILES);die;
        $customName = md5(microtime());
        $company = $this->account()->getCompany();
        $companyVideo = $this->em->find('models\CompanyVideo', $this->input->post('companyVideoId'));


        $companyFolder = $company->getCompanyVideoCoverImagePath();

        if (!is_dir($companyFolder)) {
            mkdir($companyFolder, 0777, true);
        }


        // initialize FileUploader
        $FileUploader = new FileUploader('files', array(
            'limit' => null,
            'maxSize' => null,
            'fileMaxSize' => null,
            'extensions' => null,
            'required' => false,
            'uploadDir' => $companyFolder . '/',
            'title' => $customName ? $customName : 'name',
            'replace' => false,
            'listInput' => true,
            'files' => null
        ));

        // call to upload the files
        $data = $FileUploader->upload();

        if ($data['isSuccess']) {
            $fileName = $data['files'][0]['name'];

            $companyVideo->setThumbnailImage($fileName);
            $this->em->persist($companyVideo);
            $this->em->flush();

            $data['error'] = 0;
            $data['isSuccess'] = true;
            $data['path'] = $fileName;
            $data['video_id'] = $this->input->post('companyVideoId');

        } else {
            $data['error'] = 1;
            echo json_encode($data);
            exit;
        }

        //Log video thumb 
        $this->log_manager->add(\models\ActivityAction::COMPANY_ADD_COVER_IMAGE_PROPOSAL_VIDEO, 'Company Video Overlay Image added');

        echo json_encode($data);
    }

    public function showProposalViews($entityType, $entityId)
    {

                   
        $CI = &get_instance();
        if ($entityType == 'proposal') {
            $total_duration = 'SUM(pv.total_duration) as total_duration,MAX(pv.created_at) as max_created_at';
        }else{
            $total_duration = 'pv.total_duration,pv.created_at as max_created_at';
        }
        $dql = "SELECT ppl.email,
                ".$total_duration.",pv.proposal_link_id,pv.ip_address,ppl.client_link,ppl.old_link,ppl.log_id,ppl.created_at,
            IF(c.email = ppl.email, CONCAT(c.firstName,' ',c.lastName) , ppl.email) as client_name, 
            ppl.id as link_id,ppl.no_tracking FROM proposal_preview_links AS ppl
                LEFT JOIN proposal_views pv  ON ppl.id = pv.proposal_link_id  
                LEFT JOIN proposals p  ON  ppl.proposal_id = p.proposalId  
                LEFT JOIN clients c  ON  p.client = c.clientId";

        if ($entityType == 'proposal') {
            $dql .= " WHERE ppl.no_tracking = 0 AND  ppl.proposal_id =  " . $entityId;
        } else {
            $dql .= " WHERE ppl.no_tracking = 0 AND ppl.id =  " . $entityId;
        }


        // Searching
        $searchVal = $this->input->get('search')['value'];
        if ($searchVal) {
            $dql .= " HAVING (" .
                "(client_name LIKE '%" . $searchVal . "%'))";
        }

        // Sorting
        $sort = $this->input->get('order')[0];

        $sortDir = $sort['dir'];

        switch ($sort['column']) {
            case 0:
                $sortCol = 'client_name';
                break;
            case 1:
                $sortCol = 'max_created_at';
                break;
            case 2:
                $sortCol = 'pv.total_duration';
                break;

        }
        if ($entityType == 'proposal') {
         $dql .= ' group by ppl.id ';
        }
        $dql .= " ORDER BY " . $sortCol . ' ' . $sortDir;
        $dql .= ' LIMIT ' . $this->input->get('length');
        $dql .= ' OFFSET ' . $this->input->get('start');


        $proposalView = $this->db->query($dql)->result();

        $tableData = [];


        foreach ($proposalView as $preview) {
            $status = 'Complete';
            $viewStatusClass = "view-complete";

            $now = Carbon::now();
            $viewTime = Carbon::parse($preview->max_created_at);
            $diffInMinutes = $viewTime->diffInMinutes($now);
            
                if ($diffInMinutes < 1) {
                    $status = 'Active';
                    $viewStatusClass = "view-active";
                } else if ($diffInMinutes < 61) {
                    $status = 'Inactive';
                    $viewStatusClass = "view-inactive";
                }
            

            $statusBadge = '<span class="view_status ' . $viewStatusClass . '" >' . $status . '</span>';

            $client_icon = '<i class="fa fa-fw fa-envelope"></i> ';
            $pdf_icon = '';

            $old_link_icon = '';
            $viewer = $client_icon . $preview->email;
            if ($preview->client_link) {
                $client_icon = '<i class="fa fa-fw fa-user"></i> ';
                if($preview->old_link){
                    
                    $old_link_icon = '<i class="fa fa-fw fa-info tiptip pull-right" title="View was from a proposal sent before '.$_ENV['WEB_PROPOSAL_LAUNCH_DATE'].'"></i> '; 
                }
                
            }

           
            $view_time = secondsToTime($preview->total_duration);

           

            $created_at = '-';
            
            if($preview->max_created_at){
               // $created_at = date_format(date_create($preview->max_created_at), "m/d/y g:i A");
                  $created_at = date('m/d/Y g:i A', strtotime($preview->max_created_at) + TIMEZONE_OFFSET);

            }
            
            $click_view = '<a href="javascript:void(0);" class="proposalViewDetails tiptip  btn blue-button" title="Click to view details" data-link-id="' . $preview->link_id . '" ><i class="fa fa-fw fa-bar-chart-o"></i> View Details</a>';
            if ($preview->log_id) {
                $log = $this->em->find('models\Log', $preview->log_id);
                $pdf_icon = '<i class="fa fa-fw fa-file-pdf-o"></i> ';
                $client_icon = '';
                $view_time = 'NA';
                if($preview->created_at){
                   // $created_at = date_format(date_create($preview->created_at), "m/d/y g:i A");
                   $created_at = date('m/d/Y g:i A', strtotime($preview->created_at) + TIMEZONE_OFFSET);

                }
                
                $click_view = '<a class="fancybox btn fancybox.iframe tiptip" title="View Location" href="' . site_url('account/ipMap/' . $log->GetIp()) . '"><i class="fa fa-fw fa-map-marker"></i> View Map</a>';
            }
            $viewer = $pdf_icon . $client_icon . $preview->client_name.$old_link_icon;
            
            if ($entityType == 'proposal') {
                $tableData[] = [
                    $viewer,
                    $created_at,
                    $view_time,
                    // $statusBadge,
                    $click_view
                ];
            }else{
                $tableData[] = [
                    $viewer,
                    $created_at,
                    $view_time,
                     //$statusBadge,
                    $click_view
                ];
            }
            
        }

        $data = [];
        $data['aaData'] = $tableData;
        $data['sEcho'] = $this->input->get('sEcho');

        if ($entityType == 'proposal') {

            $data["iTotalRecords"] = $this->getProposalRepository()->numProposalView($entityId);
            $data["iTotalDisplayRecords"] = $this->getProposalRepository()->numProposalView($entityId);

        } else {
            $data["iTotalRecords"] = $this->getProposalRepository()->numEditProposalView($entityId);
            $data["iTotalDisplayRecords"] = $this->getProposalRepository()->numEditProposalView($entityId);
        }

        echo json_encode($data);
    }

    public function set_group_proposal_preview_expiry()
    {
        $response = new JsonResponse();
        $proposal_link_ids = $this->input->post('preview_ids');
        $proposal_id = $this->input->post('proposal_id');
        $expiryDate = Carbon::parse($this->input->post('expiryDate'))->endOfDay();
        $proposal = $this->em->findProposal($proposal_id);
        foreach ($proposal_link_ids as $proposal_link_id) {


            $proposal_preview = $this->em->find('models\ProposalPreviewLink', $proposal_link_id);


            $proposal_preview->setExpires($expiryDate);
            $this->em->persist($proposal_preview);

            $this->log_manager->add(\models\ActivityAction::WEB_PROPOSAL_LINK_SET_EXPIRED,
                "Proposal link for <strong>" . $proposal_preview->getEmail() . "</strong> updated. Expiry set to <strong>" . date_format($expiryDate, "m/d/y g:i A") . "</strong>",
                $proposal->getClient(),
                $proposal,
                $proposal->getClient()->getCompany(),
                $this->account()
            );

        }

        $this->em->flush();
        $response->succes = true;
        $response->proposalId = $proposal_preview->getProposalId();
        $response->send();
    }

    public function remove_group_proposal_preview_expiry()
    {
        $response = new JsonResponse();
        $proposal_link_ids = $this->input->post('preview_ids');
        $proposal_id = $this->input->post('proposal_id');

        $proposal = $this->em->findProposal($proposal_id);
        foreach ($proposal_link_ids as $proposal_link_id) {


            $proposal_preview = $this->em->find('models\ProposalPreviewLink', $proposal_link_id);


            $proposal_preview->setExpires(NULL);
            $this->em->persist($proposal_preview);

            $this->log_manager->add(\models\ActivityAction::WEB_PROPOSAL_LINK_REMOVE_EXPIRED,
                "Proposal link for <strong>" . $proposal_preview->getEmail() . "</strong> updated. Expiry Removed ",
                $proposal->getClient(),
                $proposal,
                $proposal->getClient()->getCompany(),
                $this->account()
            );

        }

        $this->em->flush();
        $response->succes = true;
        $response->proposalId = $proposal_preview->getProposalId();
        $response->send();
    }

    public function group_enable_disable_proposal_preview()
    {
        $response = new JsonResponse();

        $proposal_link_ids = $this->input->post('preview_ids');
        $proposal_id = $this->input->post('proposal_id');
        $proposal = $this->em->findProposal($proposal_id);
        $is_enable = $this->input->post('is_enable');
        $msg = 'Disabled';
        $logid = \models\ActivityAction::WEB_PROPOSAL_LINK_DISABLE;
        if ($is_enable == 1) {
            $msg = 'Enabled';
            $logid = \models\ActivityAction::WEB_PROPOSAL_LINK_ENABLE;
        }
        foreach ($proposal_link_ids as $proposal_link_id) {
            $proposal_preview = $this->em->find('models\ProposalPreviewLink', $proposal_link_id);

            $proposal_preview->setActive($is_enable);
            $this->em->persist($proposal_preview);
            $this->log_manager->add($logid,
                "Proposal link for <strong>" . $proposal_preview->getEmail() . "</strong> updated. Link " . $msg,
                $proposal->getClient(),
                $proposal,
                $proposal->getClient()->getCompany(),
                $this->account()
            );
        }
        $this->em->flush();

        $response->succes = true;
        $response->proposalId = $proposal_preview->getProposalId();
        $response->send();

    }

    public function group_enable_disable_proposal_signature()
    {
        $response = new JsonResponse();

        $proposal_link_ids = $this->input->post('preview_ids');
        $proposal_id = $this->input->post('proposal_id');
        $proposal = $this->em->findProposal($proposal_id);
        $is_enable = $this->input->post('is_enable');
        $msg = 'Disabled';
        if ($is_enable == 1) {
            $msg = 'Enabled';
        }
        foreach ($proposal_link_ids as $proposal_link_id) {
            $proposal_preview = $this->em->find('models\ProposalPreviewLink', $proposal_link_id);

            $proposal_preview->setSignatureLink($is_enable);
            $this->em->persist($proposal_preview);
            $this->log_manager->add('preview_signature_update',
                "Proposal Preview for <strong>" . $proposal_preview->getEmail() . "</strong> updated. Signature " . $msg,
                $proposal->getClient(),
                $proposal,
                $proposal->getClient()->getCompany(),
                $this->account()
            );
        }
        $this->em->flush();

        $response->succes = true;
        $response->proposalId = $proposal_preview->getProposalId();
        $response->send();

    }

    
    function dontShowPreProposalPopup()
    {
        $response = new JsonResponse();
        $uuid = $this->input->post('uuid');
        $proposal_preview = $this->em->getRepository('models\ProposalPreviewLink')->findOneBy(array('uuid' => $uuid));
        // print_r($proposal_preview->getProposalId());die;
        if ($proposal_preview) {

            $p_popup = new models\PreProposalPopupHide();
            $p_popup->setEmail($proposal_preview->getEmail());
            $p_popup->setProposalId($proposal_preview->getProposalId());
            $p_popup->setProposalLinkId($proposal_preview->getId());

            $this->em->persist($p_popup);
            $this->em->flush();
            $response->success = true;
            $response->send();
        } else {
            $response->succes = false;
            $response->send();
        }
    }

    public function saveProposalVideos()
    {
        $response = new JsonResponse();
        $proposal_id = $this->input->post('proposalId');
        $videoUrl = $this->input->post('videoUrl');
        $video_duration = 0;
        $buttonShow = 0;
        $screencastVideoId = 0;
        if (strpos($this->input->post('videoUrl'), 'screencast.com')) {
            $embed = $this->get_screencast_embed($this->input->post('videoUrl'));


            if ($embed) {
                $videoUrl = $embed;
                $duration = $this->get_screencast_duration($videoUrl);
                preg_match('~media/(.*?)/~', $videoUrl, $output);
                if (isset($output[1])) {
                    $screencastVideoId = $output[1];
                };
                if ($duration > 0) {
                    $video_duration = $duration;
                }
            }

        }


        $videoType = 'NA';
        $url = $videoUrl;
        $finalUrl = '';
        if (strpos($url, 'facebook.com/') !== false) {
            //it is FB video
            $videoType = 'facebook';
            $finalUrl .= 'https://www.facebook.com/plugins/video.php?href=' . rawurlencode($url) . '&show_text=1&width=200';
        } else if (strpos($url, 'vimeo.com/') !== false) {
            //it is Vimeo video
            $videoId = explode("vimeo.com/", $url)[1];
            if (strpos($videoId, '&') !== false) {
                $videoId = explode("&", $videoId)[0];
            }
            $videoType = 'vimeo';
            $finalUrl .= 'https://player.vimeo.com/video/' . $videoId;
        } else if (strpos($url, 'youtube.com/') !== false) {
            if (strpos($url, 'embed') > 0) {
                $finalUrl = $url;
            } else {
                //it is Youtube video
                $videoId = explode("v=", $url)[1];
                if (strpos($videoId, '&') !== false) {
                    $videoId = explode("&", $videoId)[0];
                }
                $finalUrl .= 'https://www.youtube.com/embed/' . $videoId . '?enablejsapi=1';
            }
            $videoType = 'youtube';
        } else if (strpos($url, 'youtu.be/') !== false) {
            //it is Youtube video
            $videoId = explode("youtu.be/", $url)[1];
            if (strpos($videoId, '&') !== false) {
                $videoId = explode("&", $videoId)[0];
            }
            //convert the url 
            preg_match('/youtu\.be\/([^?]+)/', $url, $matches);
             $videoId = isset($matches[1]) ? $matches[1] : null;
            //convert the url
            $finalUrl .= 'https://www.youtube.com/embed/' . $videoId . '?enablejsapi=1';
            $videoType = 'youtube';
        } else if (strpos($url, 'screencast.com/') !== false) {
            $finalUrl = $url;
            $videoType = 'screencast';
        } else if (strpos($url, 'dropbox.com') !== false) {
            $finalUrl = str_replace('dl=0', 'raw=1', $url);
            $videoType = 'dropbox';
        } else {
            $buttonShow = 1;
            $finalUrl = $url;
        }

 
        $proposalVideos = new models\ProposalVideo();
        $proposalVideos->setProposalId($proposal_id);
        $proposalVideos->setVideoType($videoType);
        $proposalVideos->setVideoUrl($videoUrl);
        $proposalVideos->setEmbedVideoUrl($finalUrl);
        $proposalVideos->setTitle('Video');
        $proposalVideos->setDuration($video_duration);
        $proposalVideos->setScreencastVideoId($screencastVideoId);


        $this->em->persist($proposalVideos);
        $this->em->flush();

        $proposal = $this->em->findProposal($proposal_id);
        //Log Proposal video add
        $this->log_manager->add(\models\ActivityAction::ADD_PROPOSAL_VIDEO, 'Proposal video added' , $proposal->getClient(), $proposal);

        $response->error = 0;
        $response->videoUrl = $finalUrl;
        $response->id = $proposalVideos->getId();
        $response->title = $proposalVideos->getTitle();
        $response->buttonShow = $buttonShow;
        $response->send();
    }


    public function saveSelectedCompanyProposalVideos()
    {
        $response = new JsonResponse();
        $proposal_id = $this->input->post('proposalId');
        $videoIds = $this->input->post('videoIds');

        $data = [];
        $i = 0;
        $buttonShow = 0;
        foreach ($videoIds as $videoId) {
            $buttonShow = 0;
            $thumbImagePath = '';
            $companylVideo = $this->em->find('models\CompanyVideo', $videoId);

            $proposalVideos = new models\ProposalVideo();
            $proposalVideos->setProposalId($proposal_id);
            $proposalVideos->setVideoType($companylVideo->getVideoType());
            $proposalVideos->setVideoUrl($companylVideo->getVideoUrl());
            $proposalVideos->setEmbedVideoUrl($companylVideo->getEmbedVideoUrl());
            $proposalVideos->setTitle($companylVideo->getTitle());
            $proposalVideos->setDuration($companylVideo->getDuration());
            $proposalVideos->setScreencastVideoId($companylVideo->getScreencastVideoId());
            $proposalVideos->setCompanyVideoId($videoId);
            $proposalVideos->setPlayerIconHide($companylVideo->getPlayerIconHide());
            $proposalVideos->setIsIntro($companylVideo->getIsIntro());
            
            if($companylVideo->getIsIntro()){
                $proposalVideos->setIsLargePreview(1);
                $this->getProposalRepository()->getProposalIntroVideoReset($proposal_id); 
            }
            
            $this->em->persist($proposalVideos);
            $this->em->flush();

            if ($companylVideo->getThumbnailImage()) {
                $thumbImagePath = $this->account()->getCompany()->getSitePathCompanyVideoCoverImage() . '/' . $companylVideo->getThumbnailImage();
            }
            if ($companylVideo->getVideoUrl() == $companylVideo->getEmbedVideoUrl()) {
                $buttonShow = 1;
            }
            $data[$i]['videoUrl'] = $companylVideo->getEmbedVideoUrl();
            $data[$i]['id'] = $proposalVideos->getId();
            $data[$i]['title'] = $proposalVideos->getTitle();
            $data[$i]['videoIsIntro'] = $proposalVideos->getIsIntro();
            $data[$i]['player_icon'] = $proposalVideos->getPlayerIconHide();
            $data[$i]['buttonShow'] = $buttonShow;
            $data[$i]['thumbImagePath'] = $thumbImagePath;
            $data[$i]['companyVideoId'] = $videoId;
            $i++;

            $proposal = $this->em->findProposal($proposal_id);
            //Log Proposal video add
            $this->log_manager->add(\models\ActivityAction::ADD_PROPOSAL_VIDEO, 'Proposal video added' , $proposal->getClient(), $proposal);

        }


        $response->error = 0;
        // $response->videoUrl = $finalUrl;
        // $response->id = $proposalVideos->getId();
        // $response->title = $proposalVideos->getTitle();
        $response->videoDetails = $data;
        $response->send();
    }

    public function updateCompanyVideoTitle()
    {
        $response = new JsonResponse();
        $video_id = $this->input->post('videoId');
        $videoTitle = $this->input->post('videoTitle');
        $videoNote = $this->input->post('videoNote');
        $include_in_proposal = $this->input->post('include_in_proposal');
        $is_update_all_proposals = $this->input->post('is_update_all_proposals');
        $intro_video = $this->input->post('intro_video');
        $player_icon_hide = $this->input->post('player_icon_hide');

        $companylVideo = $this->em->find('models\CompanyVideo', $video_id);
        $companylVideo->setTitle($videoTitle);
        $companylVideo->setVideoNote($videoNote);
        $companylVideo->setIncludeInProposal($include_in_proposal);
        $companylVideo->setIsIntro($intro_video);

        if($intro_video){
            $this->getCompanyRepository()->companyIntroVideoReset($this->account()->getCompany()->getCompanyId()); 
        }
        

        $companylVideo->setPlayerIconHide($player_icon_hide);
        $this->em->persist($companylVideo);
        $this->em->flush();

        //Check and Update all proposals
        if ($is_update_all_proposals) {
            $this->getProposalRepository()->updateAllCompanyProposalsVideo($this->account()->getCompany()->getCompanyId(), $video_id);
        }

        //Log Update video
        $this->log_manager->add(\models\ActivityAction::COMPANY_PROPOSAL_VIDEO_EDIT, 'Company video Updated');

        $response->error = 0;
        $response->send();
    }

    public function updateProposalVideoTitle()
    {
        $response = new JsonResponse();
        $video_id = $this->input->post('videoId');
        $videoTitle = $this->input->post('videoTitle');
        
        $videoBigPreview = $this->input->post('videoBigPreview');
        $visible_proposal = $this->input->post('visible_proposal');
        $visible_work_order = $this->input->post('visible_work_order');
        $is_intro = $this->input->post('is_intro');
        $player_icon_hide = $this->input->post('player_icon_hide');
        $player_icon_color = $this->input->post('player_icon_color');
        
        
        $proposalVideo = $this->em->find('models\ProposalVideo', $video_id);

        if($is_intro){
            $this->getProposalRepository()->getProposalIntroVideoReset($proposalVideo->getProposalId()); 
        }
        $proposalVideo->setTitle($videoTitle);
        $proposalVideo->setIsLargePreview($videoBigPreview);
        $proposalVideo->setVisibleProposal($visible_proposal);
        $proposalVideo->setVisibleWorkOrder($visible_work_order);
        $proposalVideo->setIsIntro($is_intro);
        $proposalVideo->setPlayerIconHide($player_icon_hide);
        $proposalVideo->setPlayerIconColor($player_icon_color);
        $this->em->persist($proposalVideo);
        $this->em->flush();

        $proposal = $this->em->findProposal($proposalVideo->getProposalId());
        //Log Proposal video add
        $this->log_manager->add(\models\ActivityAction::UPDATE_PROPOSAL_VIDEO, 'Proposal video Updated' , $proposal->getClient(), $proposal);

        $proposal->setRebuildFlag(1);
        $this->em->persist($proposal);
        $this->em->flush();

        $response->error = 0;
        $response->send();
    }

    

    function update_proposal_video_proposal_setting()
    {
        $response = new JsonResponse();
        $video_ids = $this->input->post('videos_ids');
        $proposal_id = $this->input->post('proposal_id');
        $visible_proposal = $this->input->post('visible_proposal');

        $proposal = $this->em->findProposal($proposal_id);

        $log_msg = '<ul class="video_delete_log">';
        foreach ($video_ids as $video_id) {

            $proposal_video = $this->em->find('models\ProposalVideo', $video_id);

            $log_msg .= '<li>' . $proposal_video->getTitle() . '</li>';

            $proposal_video->setVisibleProposal($visible_proposal);
            $this->em->persist($proposal_video);
            
        }
        $this->em->flush();
        $log_msg .= '</ul>';

        if($visible_proposal){
            $log_msg = "Video(s) Visible in proposal <br/>" . $log_msg;
        }else{
            $log_msg = "Video(s) Not Visible in proposal <br/>" . $log_msg;
        }

        $proposal = $this->em->findProposal($proposal_id);

        $this->log_manager->add(\models\ActivityAction::VISIBLE_PROPOSAL_VIDEO_IN_PROPOSAL,
            $log_msg,
            $proposal->getClient(),
            $proposal,
            $proposal->getClient()->getCompany(),
            $this->account()
        );

        $proposal->setRebuildFlag(1);
        $this->em->persist($proposal);
        $this->em->flush();


        $response->succes = true;

        $response->send();
    }

    function update_proposal_video_player_icon_setting()
    {
        $response = new JsonResponse();
        $video_ids = $this->input->post('videos_ids');
        $proposal_id = $this->input->post('proposal_id');
        $visible_player_icon = $this->input->post('visible_player_icon');

        $proposal = $this->em->findProposal($proposal_id);

        $log_msg = '<ul class="video_delete_log">';
        foreach ($video_ids as $video_id) {

            $proposal_video = $this->em->find('models\ProposalVideo', $video_id);

            $log_msg .= '<li>' . $proposal_video->getTitle() . '</li>';

            $proposal_video->setPlayerIconHide($visible_player_icon);
            $this->em->persist($proposal_video);
            
        }
        $this->em->flush();
        $log_msg .= '</ul>';

        if($visible_player_icon){
            $log_msg = "Video(s) Player Icon hide in proposal <br/>" . $log_msg;
        }else{
            $log_msg = "Video(s) Player Icon show proposal <br/>" . $log_msg;
        }

        $proposal = $this->em->findProposal($proposal_id);

        $this->log_manager->add(\models\ActivityAction::VISIBLE_PROPOSAL_VIDEO_IN_PROPOSAL,
            $log_msg,
            $proposal->getClient(),
            $proposal,
            $proposal->getClient()->getCompany(),
            $this->account()
        );

        $proposal->setRebuildFlag(1);
        $this->em->persist($proposal);
        $this->em->flush();


        $response->succes = true;

        $response->send();
    }
    

    

    function update_proposal_video_work_setting_setting()
    {
        $response = new JsonResponse();
        $video_ids = $this->input->post('videos_ids');
        $proposal_id = $this->input->post('proposal_id');
        $visible_work_order = $this->input->post('visible_work_order');

        $proposal = $this->em->findProposal($proposal_id);

        $log_msg = '<ul class="video_delete_log">';
        foreach ($video_ids as $video_id) {

            $proposal_video = $this->em->find('models\ProposalVideo', $video_id);

            $log_msg .= '<li>' . $proposal_video->getTitle() . '</li>';

            $proposal_video->setVisibleWorkOrder($visible_work_order);
            $this->em->persist($proposal_video);
            
        }
        $this->em->flush();
        $log_msg .= '</ul>';

        if($visible_work_order){
            $log_msg = "Video(s) Visible in Work order <br/>" . $log_msg;
        }else{
            $log_msg = "Video(s) Not Visible in Work order <br/>" . $log_msg;
        }

        $proposal = $this->em->findProposal($proposal_id);

        $this->log_manager->add(\models\ActivityAction::VISIBLE_PROPOSAL_VIDEO_IN_WORKORDER,
            $log_msg,
            $proposal->getClient(),
            $proposal,
            $proposal->getClient()->getCompany(),
            $this->account()
        );

        $proposal->setRebuildFlag(1);
        $this->em->persist($proposal);
        $this->em->flush();


        $response->succes = true;

        $response->send();
    }

    


    function update_proposal_video_large_player_setting()
    {
        $response = new JsonResponse();
        $video_ids = $this->input->post('videos_ids');
        $proposal_id = $this->input->post('proposal_id');
        $enable_large_player = $this->input->post('enable_large_player');

        $proposal = $this->em->findProposal($proposal_id);

        $log_msg = '<ul class="video_delete_log">';
        foreach ($video_ids as $video_id) {

            $proposal_video = $this->em->find('models\ProposalVideo', $video_id);

            $log_msg .= '<li>' . $proposal_video->getTitle() . '</li>';

            $proposal_video->setIsLargePreview($enable_large_player);
            $this->em->persist($proposal_video);
            
        }
        $this->em->flush();
        $log_msg .= '</ul>';

        if($enable_large_player){
            $log_msg = "Video(s) set large player <br/>" . $log_msg;
        }else{
            $log_msg = "Video(s) set small player <br/>" . $log_msg;
        }

        $proposal = $this->em->findProposal($proposal_id);

        $this->log_manager->add(\models\ActivityAction::UPDATE_PROPOSAL_VIDEO,
            $log_msg,
            $proposal->getClient(),
            $proposal,
            $proposal->getClient()->getCompany(),
            $this->account()
        );

        $proposal->setRebuildFlag(1);
        $this->em->persist($proposal);
        $this->em->flush();


        $response->succes = true;

        $response->send();
    }

    public function deleteProposalVideo()
    {
        $response = new JsonResponse();
        $video_id = $this->input->post('id');

        $proposalVideo = $this->em->find('models\ProposalVideo', $video_id);
        $proposal = $this->em->findProposal($proposalVideo->getProposalId());

        $this->getProposalRepository()->deleteProposalVideoById($video_id);

        //Log Proposal video add
        $this->log_manager->add(\models\ActivityAction::DELETE_PROPOSAL_VIDEO, 'Proposal video Deleted' , $proposal->getClient(), $proposal);

        $proposal->setRebuildFlag(1);
        $this->em->persist($proposal);
        $this->em->flush();

        $response->error = 0;
        $response->send();
    }

    public function deleteCompanyVideo()
    {
        $response = new JsonResponse();
        $video_id = $this->input->post('id');
        $is_removed_proposals = $this->input->post('is_removed_proposals');

        $this->getCompanyRepository()->deleteCompanyVideoById($video_id);
        if ($is_removed_proposals == 1) {
            $this->load->library('jobs');
            $job_array = [
                'video_id' => $video_id,
                'accountId' => $this->account()->getAccountId()
            ];

            $this->jobs->create($_ENV['QUEUE_EMAIL'], 'jobs', 'company_video_delete', $job_array, 'test job');
        }

        //Log video Deleted 
        $this->log_manager->add(\models\ActivityAction::COMPANY_PROPOSAL_VIDEO_DELETE, 'Company video Removed');
        $response->error = 0;
        $response->send();
    }


    public function saveProposalVideoNote()
    {
        $response = new JsonResponse();
        $video_id = $this->input->post('id');
        $content = $this->input->post('content');

        $proposalVideo = $this->em->find('models\ProposalVideo', $video_id);
        $proposalVideo->setVideoNote($content);
        $this->em->persist($proposalVideo);
        $this->em->flush();

        $response->error = 0;
        $response->send();
    }

    public function getProposalVideoNote()
    {
        $response = new JsonResponse();
        $video_id = $this->input->post('id');


        $proposalVideo = $this->em->find('models\ProposalVideo', $video_id);
        $response->succes = 1;
        $response->video_note = $proposalVideo->getVideoNote();


        $response->error = 0;
        $response->send();
    }

    function get_screencast_duration($url)
    {

        $matches = [];
        $client = new GuzzleHttp\Client();
        $newuri = str_replace("www", "content", $url);
        $newuri = str_replace("embed", "", $url);

        $response = $client->get($newuri . 'sc.xmp');
        
        $pattern = '/xmpDM:value="(\d+)"/';
        preg_match($pattern, $response->getBody(), $matches);
        
        if(isset($matches[1])){
            return $total = ($matches[1]/1000);
        }else{
            return $total = 0;
        }

       // return $total = (($matches[0] / $matches[1]) * $matches[2]);
        //return round(($playPercent / 100) * ($total) );
    }

    function remove_group_proposal_videos()
    {
        $response = new JsonResponse();
        $video_ids = $this->input->post('videos_ids');
        $proposal_id = $this->input->post('proposal_id');

        $proposal = $this->em->findProposal($proposal_id);

        $log_msg = '<ul class="video_delete_log">';
        foreach ($video_ids as $video_id) {

            $proposal_video = $this->em->find('models\ProposalVideo', $video_id);

            $log_msg .= '<li>' . $proposal_video->getTitle() . '</li>';

            $this->em->remove($proposal_video);

        }

        $log_msg .= '</ul>';

        $this->log_manager->add(\models\ActivityAction::DELETE_PROPOSAL_VIDEO,
            "Proposal Video(s) Deleted from proposal <br/>" . $log_msg,
            $proposal->getClient(),
            $proposal,
            $proposal->getClient()->getCompany(),
            $this->account()
        );


        $this->em->flush();


        $response->succes = true;

        $response->send();
    }


    function remove_group_company_videos()
    {
        $response = new JsonResponse();
        $video_ids = $this->input->post('videos_ids');
        $company_id = $this->account()->getCompany()->getCompanyId();
        $is_removed_proposals = $this->input->post('is_removed_proposals');

        $log_msg = '<ul class="video_delete_log">';
        foreach ($video_ids as $video_id) {

            $company_video = $this->em->find('models\CompanyVideo', $video_id);

            $log_msg .= '<li>' . $company_video->getTitle() . '</li>';

            if ($is_removed_proposals == 1) {
                $this->load->library('jobs');
                $job_array = [
                    'video_id' => $video_id,
                    'accountId' => $this->account()->getAccountId()
                ];

                $this->jobs->create($_ENV['QUEUE_EMAIL'], 'jobs', 'company_video_delete', $job_array, 'test job');
            }

            $this->em->remove($company_video);

        }

        $log_msg .= '</ul>';

        $this->log_manager->add(\models\ActivityAction::COMPANY_PROPOSAL_VIDEO_DELETE,
            "Company Video(s) Deleted from Setting <br/>" . $log_msg,
            '',
            '',
            $this->account()->getCompany(),
            $this->account()
        );


        $this->em->flush();


        $response->succes = true;

        $response->send();
    }

    public function proposalServiceSaveImage()
    {
        set_time_limit(120);
        include('src/class.fileuploader.php');
        //$this->load->library('FileUploader');

        //print_r($_FILES);die;
        $customName = md5(microtime());
        $proposalServiceId = $this->input->post('proposalServiceId');
        $map = $this->input->post('map');
        $proposal = $this->em->findProposal($this->input->post('proposalId'));

        if (!$proposal) {
            $data['error'] = 1;
            $data['isSuccess'] = false;
            $data['message'] = "Unable to load proposal. Proposal ID: " . $this->input->post('proposalId');
            echo json_encode($data);
            return;
        }

        $companyFolder = $proposal->getCompanyUploadDir();

        if (!is_dir($companyFolder)) {
            mkdir($companyFolder, 0777, true);
        }

        $folder = $proposal->getUploadDir();
        if (!is_dir($folder)) {
            mkdir($folder, 0777, true);
        }

        // initialize FileUploader
        $FileUploader = new FileUploader('files', array(
            'limit' => null,
            'maxSize' => null,
            'fileMaxSize' => null,
            'extensions' => null,
            'required' => false,
            'uploadDir' => $folder . '/',
            'title' => $customName ? $customName : 'name',
            'replace' => false,
            'listInput' => true,
            'files' => null
        ));

        // call to upload the files
        $data = $FileUploader->upload();

        if ($data['isSuccess']) {
            $fileName = $data['files'][0]['name'];
        } else {
            echo json_encode($data);
            exit;
        }


        $imgData = [
            'imgUrl' => '',
        ];

        $uploadedImage = $this->getProposalRepository()->saveProposalImage($proposal, $imgData, $fileName, $proposalServiceId,$map);

        $logString = 'New Image Uploaded';
        $this->log_manager->add(\models\ActivityAction::ADD_PROPOSAL_IMAGE, $logString, $proposal->getClient(), $proposal);

        $proposal->setRebuildFlag(1);
        $proposal->setImageCount($this->getProposalRepository()->getRealImageCount($proposal));
        $this->em->persist($proposal);
        $this->em->flush();

        if (!$uploadedImage) {
            $data['error'] = 1;
            $data['isSuccess'] = false;
        } else {
            $data['error'] = 0;
            $data['isSuccess'] = true;
            $data['id'] = $uploadedImage->getImageId();
            $data['path'] = $uploadedImage->getImage();
        }

        echo json_encode($data);
    }


    public function saveCompanyVideos()
    {
        $response = new JsonResponse();
        $companyId = $this->input->post('companyId');
        $videoUrl = $this->input->post('videoUrl');
        $include_in_proposal = $this->input->post('include_in_proposal');
        $video_duration = 0;
        $buttonShow = 0;
        $screencastVideoId = 0;
        if (strpos($this->input->post('videoUrl'), 'screencast.com')) {
            $embed = $this->get_screencast_embed($this->input->post('videoUrl'));


            if ($embed) {
                $videoUrl = $embed;
                $duration = $this->get_screencast_duration($videoUrl);
                preg_match('~media/(.*?)/~', $videoUrl, $output);
                if (isset($output[1])) {
                    $screencastVideoId = $output[1];
                };
                if ($duration > 0) {
                    $video_duration = $duration;
                }
            }

        }


        $videoType = 'NA';
        $url = $videoUrl;
        $finalUrl = '';
        if (strpos($url, 'facebook.com/') !== false) {
            //it is FB video
            $videoType = 'facebook';
            $finalUrl .= 'https://www.facebook.com/plugins/video.php?href=' . rawurlencode($url) . '&show_text=1&width=200';
        } else if (strpos($url, 'vimeo.com/') !== false) {
            //it is Vimeo video
            $videoId = explode("vimeo.com/", $url)[1];
            if (strpos($videoId, '&') !== false) {
                $videoId = explode("&", $videoId)[0];
            }
            $videoType = 'vimeo';
            $finalUrl .= 'https://player.vimeo.com/video/' . $videoId;
        } else if (strpos($url, 'youtube.com/') !== false) {
            if (strpos($url, 'embed') > 0) {
                $finalUrl = $url;
            } else {
                //it is Youtube video
                $videoId = explode("v=", $url)[1];
                if (strpos($videoId, '&') !== false) {
                    $videoId = explode("&", $videoId)[0];
                }
                $finalUrl .= 'https://www.youtube.com/embed/' . $videoId . '?enablejsapi=1';
            }
            $videoType = 'youtube';
        } else if (strpos($url, 'youtu.be/') !== false) {
            //it is Youtube video
            $videoId = explode("youtu.be/", $url)[1];
            if (strpos($videoId, '&') !== false) {
                $videoId = explode("&", $videoId)[0];
            }
            $finalUrl .= 'https://www.youtube.com/embed/' . $videoId . '?enablejsapi=1';
            $videoType = 'youtube';
        } else if (strpos($url, 'screencast.com/') !== false) {
            $finalUrl = $url;
            $videoType = 'screencast';
        } else if (strpos($url, 'dropbox.com') !== false) {
            $finalUrl = str_replace('dl=0', 'raw=1', $url);
            $videoType = 'dropbox';
        } else {
            $buttonShow = 1;
            $finalUrl = $url;
        }


        $companyVideos = new models\CompanyVideo();
        $companyVideos->setCompanyId($companyId);
        $companyVideos->setVideoType($videoType);
        $companyVideos->setVideoUrl($videoUrl);
        $companyVideos->setEmbedVideoUrl($finalUrl);
        $companyVideos->setTitle('Video');
        $companyVideos->setDuration($video_duration);
        $companyVideos->setScreencastVideoId($screencastVideoId);
        $companyVideos->setIncludeInProposal($include_in_proposal);

        $this->em->persist($companyVideos);
        $this->em->flush();

        //Log add new video
        $this->log_manager->add(\models\ActivityAction::COMPANY_PROPOSAL_VIDEO_ADD, 'New Company video added');

        $response->error = 0;
        $response->videoUrl = $finalUrl;
        $response->id = $companyVideos->getId();
        $response->title = $companyVideos->getTitle();
        $response->buttonShow = $buttonShow;
        $response->send();
    }

    public function sort_companyVideos()
    {
        $items = array();


        foreach ($_POST['video'] as $ord => $item) {
            $companyVideo = $this->em->find('models\CompanyVideo', $item);
            $companyVideo->setOrd($ord);

            $this->em->persist($companyVideo);

        }

        $this->em->flush();
        $this->em->clear();
    }


    public function get_preset_from_date($date)
    {

        $preset = $date;
        $checkDate = Carbon::parse($date);
        $preset = $checkDate->format('m/d/Y g:i A');
        $yesterday = Carbon::now()->subDays(1)->format('m/d/Y');
        $today = Carbon::now()->format('m/d/Y');
        $now = Carbon::now();

        $diff = $checkDate->diffInDays($now);
        if ($checkDate->format('m/d/Y') == $yesterday) {
            $preset = 'Yesterday '.$checkDate->format('g:i A');
        } elseif ($checkDate->format('m/d/Y') == $today) {
            $preset = 'Today '.$checkDate->format('g:i A');
        } elseif ($diff < 7) {
            $preset = $checkDate->format('l m/d/Y g:i A');
        }

        return $preset;
    }

    public function proposalDuplicateTiptip()
    {
        $proposal = $this->em->findProposal($this->input->post('proposalId'));

        if ($proposal) {
            $parentProposal = $this->em->findProposal($proposal->getDuplicateOf());

            if ($parentProposal) {
                echo 'Duplicate Of: ' . $parentProposal->getProjectName();
                return;
            }
        }

        echo 'Original Proposal Not Found';
    }

    function checkProposalEmailApproval(){

        $response = new JsonResponse();

        $proposalId = $this->input->post('proposalId');

        $approval = 1;

        $proposal = $this->em->findProposal($proposalId);

        

        // Check if we're above the approval limit

        if ($this->account()->getApprovalLimit() <= $proposal->getPrice()) {

            // Has it been approved already

            if (!$proposal->getApproved()) {

                $approval = 0;

            }

        }



        $response->success = true;

        $response->approval = $approval;

        $response->send();

    }


    function getProposalUserPermissions(){
        $proposal_id = $this->input->post('proposal_id');
        $user_permissions = $this->getProposalRepository()->getProposalUserPermissions($proposal_id);

        $users = array();
        foreach($user_permissions as $user_permission){
            $users[] = $user_permission->getUserId();
        }
        $response = new JsonResponse();
        $response->success = true;

        $response->user_permissions = $users;

        $response->send();

    }

    function getProposalUserPermissionsWithUsers(){
        $proposal_id = $this->input->post('proposal_id');
        $proposal = $this->em->findProposal($proposal_id);
        $user_permissions = $this->getProposalRepository()->getProposalUserPermissions($proposal_id);
        $proposalOwnerBanch = $proposal->getOwner()->getBranch();
        
        $users = array();
        foreach($user_permissions as $user_permission){
            $users[] = $user_permission->getUserId();
        }
        $userAccounts = $this->account()->getCompany()->getActiveSortedUsersAndBranchAdminAccounts();
        $user_html = '';
        $owners = [];
        $accountsArray = [];
        foreach ($userAccounts as $userAccount) {
           

                $owner = '';
                $adminCheck = true;
                if($userAccount->getAccountId() == $proposal->getOwner()->getAccountId()){
                    $owner = ' [Proposal Owner]';
                    $adminCheck = false;
                    $owners[] = $userAccount;
                    continue;
                }

                if($adminCheck && ($userAccount->getUserClass() == 2 || $userAccount->getUserClass() == 3 || $userAccount->isAdministrator())){
                   
                    continue;

                }
                if($adminCheck && ($userAccount->getUserClass() == 1 && $userAccount->getBranch() == $proposalOwnerBanch)){
                    continue;
                }

                $accountsArray[] = $userAccount;
        
        }

        array_unshift($accountsArray, $owners[0]);

        $first = true;

        foreach ($accountsArray as $account) {
            $owner = '';
            if ($first) {
                $owner = ' [Proposal Owner]';
                $first = false;
            }
            
            $user_html .= '<label class="nice-label" style="width: 253px;" for="permission_user_'.$account->getAccountId().'"><input type="checkbox" value="'.$account->getAccountId().'" class="account_users"  name="account_users" id="account_users_'.$account->getAccountId().'"/><span class="user_label"><span style="font-weight: bold;">'.$account->getFullName().$owner.'</span><br/><span>'.$account->getUserClass(true,true).'</span></span></label>';
        }
      
        $response = new JsonResponse();
        $response->success = true;

        $response->user_permissions = $users;
        if($user_html == ''){
            $user_html = '<p>No users</p>';
        }
        $response->user_html = $user_html;
        $response->send();

    }


    function saveProposalUserPermission(){
        $proposal_id = $this->input->post('proposal_id');
        $permission_users = $this->input->post('permission_users');

        $old_user_permissions = $this->getProposalRepository()->getProposalUserPermissions($proposal_id);
        
        $old_users = array();
        foreach($old_user_permissions as $old_user_permission){
            $old_users[] = $old_user_permission->getUserId();
        }

        $missingValuesArray = array();
        $addingValuesArray = array();
        foreach($old_users as $old_user){
            if(!in_array($old_user,$permission_users)){
                $missingValuesArray[] = $old_user;
            }
        }

        
        

        $log_remove_msg = '';
        foreach($missingValuesArray as $remove_user){
            $account = $this->em->findAccount($remove_user);
            $log_remove_msg .= $account->getFullName().', ';
        }
        $proposal = $this->em->findProposal($proposal_id);

        $this->getProposalRepository()->deleteProposalUserPermissions($proposal_id,$proposal->getCompanyId());
        $log_add_msg = '';
        
        foreach($permission_users as $permission_user){
            $account = $this->em->findAccount($permission_user);
            if($account->getAccountId() != $proposal->getOwner()->getAccountId()){
                $permission = new models\ProposalUserPermission();
                $permission->setProposalId($proposal_id);
                $permission->setUserId($permission_user);
                $permission->setCompanyId($proposal->getCompanyId());
                $this->em->persist($permission);
               
                
                if(!in_array($permission_user,$old_users)){
                    $addingValuesArray[] = $permission_user;
                }
            }
        }

        $log_add_msg = '';
        foreach($addingValuesArray as $add_user){
            $this->load->library('jobs');
            $job_array = [
                'user_id' => $add_user,
                'proposal_id' => $proposal_id,
                'permissionGrantor' => $this->account()->getFirstName()
            ];
            // Save the opaque image
            $this->jobs->create($_ENV['QUEUE_EMAIL'], 'jobs', 'userProposalPermissionEmail', $job_array, 'test job');
            
            $account = $this->em->findAccount($add_user);
            $log_add_msg .= $account->getFullName().', ';
        }


        
        //start regular log
        $remove_msg = '';
        $add_msg = '';
        $logid = \models\ActivityAction::PROPOSAL_ADD_USER_PERMISSION;
        if($log_remove_msg){
            $remove_msg = 'Proposal permission removed from '.$log_remove_msg;
            $logid = \models\ActivityAction::PROPOSAL_REMOVE_USER_PERMISSION;
        }
        if($log_add_msg){
            $add_msg =  ' Proposal permission granted to ' .$log_add_msg.'<br/>';
            $logid = \models\ActivityAction::PROPOSAL_ADD_USER_PERMISSION;
        }
        $this->log_manager->add($logid,
        $add_msg .$remove_msg,
        $proposal->getClient(),
        $proposal,
        null,
        $this->account());

        $this->em->flush();
        $response = new JsonResponse();
        $response->success = true;

        
        $response->send();

    }

    function saveProposalSharing(){
        $proposal_id = $this->input->post('proposal_id');
        $share_user = $this->input->post('share_user');
        $account = $this->em->findAccount($share_user);

        $permission = new models\ProposalUserPermission();
        $permission->setProposalId($proposal_id);
        $permission->setUserId($share_user);
        $permission->setCompanyId($account->getCompany()->getCompanyId());
        $this->em->persist($permission);
        $this->em->flush();
        $proposal = $this->em->findProposal($proposal_id);
        
        $subject = 'Proposal Shared';
        $content = 'Hello <strong>'.$account->getFullName().'</strong>,<br/> <p>You currently now have access to work on this proposal:</p>
                    <p><span style="width:100px;float:left"><strong>Project Name:</strong></span><span><a href="' . site_url('proposals/edit/' . $proposal_id) . '">'.$proposal->getProjectName().'</a></span> </p>
                    <p><span style="width:100px;float:left"><strong>Project Owner:</strong></span><span>'.$proposal->getOwner()->getFullname().'</span> </p>
                    <p>If you have any questions, please contact your administrator</p>
                    <p>Thanks.</p>';

            $emailData = [
                'to' => $account->getEmail(),
                'fromName' => SITE_NAME,
                'fromEmail' => 'no-reply@' . SITE_EMAIL_DOMAIN,
                'subject' => $subject,
                'body' => $content,
            ];

            $this->getEmailRepository()->send($emailData);

           

            $this->log_manager->add(0,
            'Proposal Shared with '.$account->getFullname(),
            $proposal->getClient(),
            $proposal,
            null,
            $this->account());

        $response = new JsonResponse();
        $response->success = true;

        
        $response->send();
    }
    

    public function resend_lead(){
        $lead_id = $this->input->post('lead_id');
        $lead = $this->em->findLead($lead_id);
        $response = new JsonResponse();
        $response->success = false;
        if ($lead) {
            if ($lead->getAccount()) {

                $userAccount = $this->em->findAccount($lead->getAccount());

                if ($userAccount) {
                    $this->getLeadRepository()->sendLeadEmail($this->account(), $lead, false);
                    $response->success = true;
                }
            }
        }


        
        $response->send();
    }
    

    public function ajaxSelect2UniversalSearch()
    {
        
        if(!$this->account()){
            http_response_code(500);
        }
        //$search_keys = preg_split('/\s+/', $this->input->get('startsWith'));
        $checkKey = preg_split("/[:]/", $this->input->get('startsWith'));
        $noKey = true;
        if(count($checkKey) >1){
            $noKey = false;

            switch (strtolower($checkKey[0])) {
                case "lead":
                  
                    $search_key = $checkKey[1];



                    $sql = "(SELECT CONCAT(l.firstName, ' ', l.lastName) as entity_name,l.leadId as entity_id,'lead' as entity_type,'test' as client_name,CONCAT(la.firstName, ' ', la.lastName) as account_name,l.projectName as project_name,'email' as search_email,CONCAT(la.firstName, ' ', la.lastName) as owner_name,'job_number' as job_number,'created' as created_date,'price' as proposal_price,l.status as lead_status,
                    'proposal_count' as proposal_count,'total_bid' as total_bid,'contact_count' as contact_count
                     FROM leads l
                            LEFT JOIN accounts la on l.account = la.accountId 
                                WHERE l.company=" . $this->account()->getCompany()->getCompanyId();

                                if ($this->account()->getUserClass() < 1) {
                                    // $qb->andWhere('l.account = :accountId');
                                    // $qb->setParameter(':accountId', $this->getAccountId());
                                    $sql .= ' AND l.account = ' . $this->account()->getAccountId();
                                }
                        
                        
                                // For branch managers, join with accounts and branch id
                                if ($this->account()->isBranchAdmin()) {
                                    $sql .= ' AND accounts.branch = ' . $this->account()->getBranch();
                                }

                            $i = 0;
                            //foreach ($search_keys as $search_key) {
                    $sql .= ' AND (l.firstName LIKE "%' . $search_key . '%" OR l.lastName LIKE "%' . $search_key . '%" OR l.projectName LIKE "%' . $search_key . '%" OR l.companyName LIKE "%' . $search_key . '%" OR CONCAT(l.firstName, " ", l.lastName) LIKE "%' . $search_key . '%")  ';
                            //}
                    $sql .= ' LIMIT 25) ';




        $results =  $this->db->query($sql)->result();
       
        $jsonClients = array();
        $LeadsArray = [];
       
        $jsonClients['items'] = [];
        foreach ($results as $data) {

            try {

                
                    $LeadsArray[] = array(
                        'label' => $data->entity_name,
                        'id' => $data->entity_id,
                        'entity_id' => $data->entity_id,
                        'entity_name' => $data->entity_name,
                        'entity_type' => $data->entity_type,
                        'client_name' => $data->client_name,
                        'account_name' => $data->account_name,
                        'project_name' => $data->project_name,
                        'email' => $data->search_email,
                        'owner_name' => $data->owner_name,
                        'job_number' => $data->job_number,
                        'created_date' => $data->created_date,
                        'proposal_price' => $data->proposal_price,
                        'lead_status' => $data->lead_status,
                        'contact_count' => $data->contact_count,
                        'total_bid' => $data->total_bid,
                        'proposal_count' => $data->proposal_count,
                    );
                
                
            } catch (\Exception $e) {
                // Don't populate result
            }

        }
        
        $jsonClients['items'][0]['text'] = 'Leads';
        $jsonClients['items'][0]['children'] = $LeadsArray;
        $jsonClients['items'][0]['result_count'] = count($LeadsArray);


        $jsonClients['incomplete_results'] = false;
        $jsonClients['total_count'] = count($results);
        echo json_encode($jsonClients);



                  break;
                case "proposal":
                 
                    $search_key = $checkKey[1];

                    

                $sql = "(SELECT p.projectName as entity_name,p.proposalId as entity_id,'proposal' as entity_type,CONCAT(pc.firstName, ' ', pc.lastName) as client_name,pcc.name as account_name,p.projectName as project_name,'email' as search_email,CONCAT(pa.firstName, ' ', pa.lastName) as owner_name,p.jobNumber as job_number,p.created as created_date,p.price as proposal_price,'lead_status' as lead_status,
                'proposal_count' as proposal_count,'total_bid' as total_bid,'contact_count' as contact_count
                 FROM proposals p
                        LEFT JOIN clients pc ON p.client = pc.clientId
                        LEFT JOIN accounts pa on p.owner = pa.accountId
                        LEFT JOIN client_companies pcc on pc.client_account = pcc.id";

                        // Filter by user permissions
                        if ($this->account()->getUserClass() >= 2) {
                            //company admin or full access, access to all proposals
                            
                                $sql .= ' WHERE p.company_id =' . $this->account()->getCompany()->getCompanyId();
                            
                            
                        } else {
                            if ($this->account()->isBranchAdmin()) {
                                //branch admin, can access only his branch
                                $sql .= ' WHERE pa.branch = ' . $this->account()->getBranch();
                                
                                $sql .= ' AND p.company_id =' . $this->account()->getCompany()->getCompanyId();
                            
                            } else {
                                //regular user, can access only his proposals
                                $sql .= ' WHERE p.owner=' . $this->account()->getAccountId();
                            }
                        }

                        $i = 0;
                        //foreach ($search_keys as $search_key) {     
                $sql .= ' AND (p.projectName LIKE "%' . $search_key . '%" OR pc.firstName LIKE "%' . $search_key . '%" OR pc.lastName LIKE "%' . $search_key . '%" OR pcc.name LIKE "%' . $search_key . '%" OR pa.firstName LIKE "%' . $search_key . '%" OR pa.lastName LIKE "%' . $search_key . '%" OR CONCAT(pc.firstName, " ", pc.lastName) LIKE "%' . $search_key . '%" OR CONCAT(pa.firstName, " ", pa.lastName) LIKE "%' . $search_key . '%")  ';
                        //}
                        
                        
                $sql .= ' LIMIT 25) ';




                        $results =  $this->db->query($sql)->result();


                        $jsonClients = array();
                    
                        $ProposalsArray = [];

                        $jsonClients['items'] = [];
                        foreach ($results as $data) {

                            try {

                                
                                    $ProposalsArray[] = array(
                                        'label' => $data->entity_name,
                                        'id' => $data->entity_id,
                                        'entity_id' => $data->entity_id,
                                        'entity_name' => $data->entity_name,
                                        'entity_type' => $data->entity_type,
                                        'client_name' => $data->client_name,
                                        'account_name' => $data->account_name,
                                        'project_name' => $data->project_name,
                                        'email' => $data->search_email,
                                        'owner_name' => $data->owner_name,
                                        'job_number' => ($data->job_number) ? $data->job_number : '-',
                                        'created_date' => date('m/d/y', $data->created_date + TIMEZONE_OFFSET),
                                        'proposal_price' => number_format($data->proposal_price),
                                        'lead_status' => $data->lead_status,
                                        'contact_count' => $data->contact_count,
                                        'total_bid' => $data->total_bid,
                                        'proposal_count' => $data->proposal_count,
                                    );
                
                
                            } catch (\Exception $e) {
                                // Don't populate result
                            }

                        }
        $jsonClients['items'][0]['text'] = 'Proposals';
        $jsonClients['items'][0]['children'] = $ProposalsArray;
        $jsonClients['items'][0]['result_count'] = count($ProposalsArray);


        $jsonClients['incomplete_results'] = false;
        $jsonClients['total_count'] = count($results);
        echo json_encode($jsonClients);


                  break;
                case "contact":
                  
                    $search_key = $checkKey[1];


                    $sql = "(SELECT CONCAT(c.firstName, ' ', c.lastName) as entity_name,clientId as entity_id,'client' as entity_type,'test' as client_name,cc.name as account_name,'project' as project_name,c.email as search_email,CONCAT(cac.firstName, ' ', cac.lastName) as owner_name,'job_number' as job_number,'created' as created_date,'price' as proposal_price,'lead_status' as lead_status,
                    'proposal_count' as proposal_count,'total_bid' as total_bid,'contact_count' as contact_count
                     FROM clients c
                    LEFT JOIN client_companies cc ON c.client_account = cc.id
                    LEFT JOIN accounts cac ON c.account = cac.accountId
                        WHERE c.company=" . $this->account()->getCompany()->getCompanyId();


                            $i = 0;
                            //foreach ($search_keys as $search_key) {
                    $sql .= ' AND (c.firstName LIKE "%' . $search_key . '%" OR c.lastName LIKE "%' . $search_key . '%" OR c.email LIKE "%' . $search_key . '%" OR cc.name LIKE "%' . $search_key . '%" OR CONCAT(c.firstName, " ", c.lastName) LIKE "%' . $search_key . '%")  ';
                        // }
                    $sql .= ' LIMIT 25) ';



                $results =  $this->db->query($sql)->result();
       




        $jsonClients = array();
        
        $ContactsArray = [];
        
        $jsonClients['items'] = [];
        foreach ($results as $data) {

            try {

                
                    $ContactsArray[] = array(
                        'label' => $data->entity_name,
                        'id' => $data->entity_id,
                        'entity_id' => $data->entity_id,
                        'entity_name' => $data->entity_name,
                        'entity_type' => $data->entity_type,
                        'client_name' => $data->client_name,
                        'account_name' => $data->account_name,
                        'project_name' => $data->project_name,
                        'email' => $data->search_email,
                        'owner_name' => $data->owner_name,
                        'job_number' => $data->job_number,
                        'created_date' => $data->created_date,
                        'proposal_price' => $data->proposal_price,
                        'lead_status' => $data->lead_status,
                        'contact_count' => $data->contact_count,
                        'total_bid' => $data->total_bid,
                        'proposal_count' => $data->proposal_count,
                    );
                
                
            } catch (\Exception $e) {
                // Don't populate result
            }

        }


        $jsonClients['items'][0]['text'] = 'Contacts';
        $jsonClients['items'][0]['children'] = $ContactsArray;
        $jsonClients['items'][0]['result_count'] = count($ContactsArray);

        $jsonClients['incomplete_results'] = false;
        $jsonClients['total_count'] = count($results);
        echo json_encode($jsonClients);




                  break;
                case "prospect":
                    
                    




                    $search_key = $checkKey[1];

                    
                    
                    $sql = "(SELECT CONCAT(ps.firstName, ' ', ps.lastName) as entity_name,ps.prospectId as entity_id,'prospect' as entity_type,'test' as client_name,'test1' as account_name,'project' as project_name,'email' as search_email,CONCAT(psa.firstName, ' ', psa.lastName) as owner_name,'job_number' as job_number,'created' as created_date,'price' as proposal_price,'lead_status' as lead_status,
                    'proposal_count' as proposal_count,'total_bid' as total_bid,'contact_count' as contact_count
                     FROM prospects ps
                    LEFT JOIN accounts psa on ps.account = psa.accountId 
                                WHERE ps.company=" . $this->account()->getCompany()->getCompanyId();
                    
                                if (!$this->account()->hasFullAccess()) {
                    
                               
                                    $sql .= ' AND psa.branch = ' . $this->account()->getBranch();
                                   
                                    // For peons, add further restriction to their own account
                                    if ($this->account()->isUser()) {
                                       
                                        $sqlWhere .= ' AND ps.account = ' . $this->account()->getAccountId();
                                    }
                                }
                                $i = 0;
                            //foreach ($search_keys as $search_key) {
                    $sql .= ' AND (ps.firstName LIKE "%' . $search_key . '%" OR ps.lastName LIKE "%' . $search_key . '%" OR ps.companyName LIKE "%' . $search_key . '%" OR psa.firstName LIKE "%' . $search_key . '%" OR psa.lastName LIKE "%' . $search_key . '%" OR CONCAT(ps.firstName, " ", ps.lastName) LIKE "%' . $search_key . '%" OR CONCAT(psa.firstName, " ", psa.lastName) LIKE "%' . $search_key . '%") ';
                            //}
                    
                    $sql .= ' LIMIT 25) ';
 
                    
                            $results =  $this->db->query($sql)->result();
                           
                    
                    
                    
                            // }
                    
                            $jsonClients = array();
                            
                            $ProspectsArray = [];
                            $jsonClients['items'] = [];
                            foreach ($results as $data) {
                    
                                try {
                    
                                    
                                        $ProspectsArray[] = array(
                                            'label' => $data->entity_name,
                                            'id' => $data->entity_id,
                                            'entity_id' => $data->entity_id,
                                            'entity_name' => $data->entity_name,
                                            'entity_type' => $data->entity_type,
                                            'client_name' => $data->client_name,
                                            'account_name' => $data->account_name,
                                            'project_name' => $data->project_name,
                                            'email' => $data->search_email,
                                            'owner_name' => $data->owner_name,
                                            'job_number' => $data->job_number,
                                            'created_date' => $data->created_date,
                                            'proposal_price' => $data->proposal_price,
                                            'lead_status' => $data->lead_status,
                                            'contact_count' => $data->contact_count,
                                            'total_bid' => $data->total_bid,
                                            'proposal_count' => $data->proposal_count,
                                        );
                                    
                                    
                                } catch (\Exception $e) {
                                    // Don't populate result
                                }
                    
                            }
                            
                            $jsonClients['items'][0]['text'] = 'Prospects';
                            $jsonClients['items'][0]['children'] = $ProspectsArray;
                            $jsonClients['items'][0]['result_count'] = count($ProspectsArray);
                    
                            $jsonClients['incomplete_results'] = false;
                            $jsonClients['total_count'] = count($results);
                            echo json_encode($jsonClients);





                    break;
                    
                    case "account":
                    
                        $search_key = $checkKey[1];
        
                        $sql = "(SELECT acc.name as entity_name,acc.id as entity_id,'account' as entity_type,'test' as client_name,'test1' as account_name,'project' as project_name,'email' as search_email,CONCAT(acca.firstName, ' ', acca.lastName) as owner_name,'job_number' as job_number,'created' as created_date,'price' as proposal_price,'lead_status' as lead_status,
                                
                                (SELECT COUNT(proposalId) FROM proposals as ccp, clients clcc WHERE ccp.client = clcc.clientId AND clcc.client_account = acc.id ) as proposal_count,
                                (SELECT SUM(ccp2.price) FROM proposals ccp2, clients clcc2 WHERE ccp2.client = clcc2.clientId AND  ccp2.duplicateOf IS NULL AND clcc2.client_account = acc.id) AS total_bid,
                                (SELECT COUNT(clcc3.clientId) FROM clients clcc3 LEFT JOIN accounts ac3 ON clcc3.account = ac3.accountId  WHERE clcc3.client_account = acc.id ) AS contact_count

                                FROM client_companies acc
                                LEFT JOIN accounts acca on acc.owner_user = acca.accountId 
                                WHERE acc.owner_company=" . $this->account()->getCompany()->getCompanyId();


                                     // Permissions
                                    if (!$this->account()->hasFullAccess()) {

                                        if ($this->account()->isBranchAdmin()) {
                                            $sql .= ' AND acca.branch = ' . $this->account()->getBranch();
                                        } else {
                                            $sql .= ' AND acc.owner_user = ' . $this->account()->getAccountId();
                                        }
                                    }


                        $sql .= ' AND (acc.name LIKE "%' . $search_key . '%" OR CONCAT(acca.firstName, " ", acca.lastName) LIKE "%' . $search_key . '%") ';

                        
                        $sql .= ' LIMIT 25) ';
     
                        
                                $results =  $this->db->query($sql)->result();
                               
                        
                                $jsonClients = array();
                                
                                $AccountsArray = [];
                                $jsonClients['items'] = [];
                                foreach ($results as $data) {
                        
                                    try {
                        
                                        
                                            $AccountsArray[] = array(
                                                'label' => $data->entity_name,
                                                'id' => $data->entity_id,
                                                'entity_id' => $data->entity_id,
                                                'entity_name' => $data->entity_name,
                                                'entity_type' => $data->entity_type,
                                                'client_name' => $data->client_name,
                                                'account_name' => $data->account_name,
                                                'project_name' => $data->project_name,
                                                'email' => $data->search_email,
                                                'owner_name' => $data->owner_name,
                                                'job_number' => $data->job_number,
                                                'created_date' => $data->created_date,
                                                'proposal_price' => $data->proposal_price,
                                                'lead_status' => $data->lead_status,
                                                'contact_count' => $data->contact_count,
                                                'total_bid' => number_format($data->total_bid),
                                                'proposal_count' => $data->proposal_count,
                                            );
                                        
                                        
                                    } catch (\Exception $e) {
                                        // Don't populate result
                                    }
                        
                                }
                                
                                $jsonClients['items'][0]['text'] = 'Accounts';
                                $jsonClients['items'][0]['children'] = $AccountsArray;
                                $jsonClients['items'][0]['result_count'] = count($AccountsArray);
                        
                                $jsonClients['incomplete_results'] = false;
                                $jsonClients['total_count'] = count($results);
                                echo json_encode($jsonClients);
    
    
    
    
    
                        break;  
                default:
                    $noKey = true;
              }
            
        }

    if($noKey){ 
        
     // echo 'test';die;
            $search_key = $this->input->get('startsWith');

    $sql = "(SELECT p.projectName as entity_name,p.proposalId as entity_id,'proposal' as entity_type,CONCAT(pc.firstName, ' ', pc.lastName) as client_name,pcc.name as account_name,p.projectName as project_name,'email' as search_email,CONCAT(pa.firstName, ' ', pa.lastName) as owner_name,p.jobNumber as job_number,p.created as created_date,p.price as proposal_price,'lead_status' as lead_status,
    'proposal_count' as proposal_count,'total_bid' as total_bid,'contact_count' as contact_count
     FROM proposals p
            LEFT JOIN clients pc ON p.client = pc.clientId
            LEFT JOIN accounts pa on p.owner = pa.accountId
            LEFT JOIN client_companies pcc on pc.client_account = pcc.id";

            // Filter by user permissions
            if ($this->account()->getUserClass() >= 2) {
                //company admin or full access, access to all proposals
                
                    $sql .= ' WHERE p.company_id =' . $this->account()->getCompany()->getCompanyId();
                
                
            } else {
                if ($this->account()->isBranchAdmin()) {
                    //branch admin, can access only his branch
                    $sql .= ' WHERE pa.branch = ' . $this->account()->getBranch();
                    
                    $sql .= ' AND p.company_id =' . $this->account()->getCompany()->getCompanyId();
                
                } else {
                    //regular user, can access only his proposals
                    $sql .= ' WHERE p.owner=' . $this->account()->getAccountId();
                }
            }

            $i = 0;
            //foreach ($search_keys as $search_key) {     
    $sql .= ' AND (p.projectName LIKE "%' . $search_key . '%" OR pc.firstName LIKE "%' . $search_key . '%" OR pc.lastName LIKE "%' . $search_key . '%" OR pcc.name LIKE "%' . $search_key . '%" OR pa.firstName LIKE "%' . $search_key . '%" OR pa.lastName LIKE "%' . $search_key . '%" OR CONCAT(pc.firstName, " ", pc.lastName) LIKE "%' . $search_key . '%" OR CONCAT(pa.firstName, " ", pa.lastName) LIKE "%' . $search_key . '%" OR p.jobNumber LIKE "%' . $search_key . '%")  ';
            //}
            
            
    $sql .= ' LIMIT 25) ';

    $sql .= "UNION (SELECT CONCAT(l.firstName, ' ', l.lastName) as entity_name,l.leadId as entity_id,'lead' as entity_type,'test' as client_name,l.companyName as account_name,l.projectName as project_name,'email' as search_email,CONCAT(la.firstName, ' ', la.lastName) as owner_name,'job_number' as job_number,'created' as created_date,'price' as proposal_price,l.status as lead_status,
    'proposal_count' as proposal_count,'total_bid' as total_bid,'contact_count' as contact_count
     FROM leads l
            LEFT JOIN accounts la on l.account = la.accountId 
                WHERE l.company=" . $this->account()->getCompany()->getCompanyId();

                if ($this->account()->getUserClass() < 1) {
                    // $qb->andWhere('l.account = :accountId');
                    // $qb->setParameter(':accountId', $this->getAccountId());
                    $sql .= ' AND l.account = ' . $this->account()->getAccountId();
                }
        
        
                // For branch managers, join with accounts and branch id
                if ($this->account()->isBranchAdmin()) {
                    $sql .= ' AND la.branch = ' . $this->account()->getBranch();
                }

            $i = 0;
            //foreach ($search_keys as $search_key) {
    $sql .= ' AND (l.firstName LIKE "%' . $search_key . '%" OR l.lastName LIKE "%' . $search_key . '%" OR l.projectName LIKE "%' . $search_key . '%" OR l.companyName LIKE "%' . $search_key . '%" OR CONCAT(l.firstName, " ", l.lastName) LIKE "%' . $search_key . '%")  ';
            //}
    $sql .= ' LIMIT 25) ';

    $sql .= "UNION (SELECT CONCAT(c.firstName, ' ', c.lastName) as entity_name,clientId as entity_id,'client' as entity_type,'test' as client_name,cc.name as account_name,'project' as project_name,c.email as search_email,CONCAT(cac.firstName, ' ', cac.lastName) as owner_name,'job_number' as job_number,'created' as created_date,'price' as proposal_price,'lead_status' as lead_status,
    'proposal_count' as proposal_count,'total_bid' as total_bid,'contact_count' as contact_count
     FROM clients c
    LEFT JOIN client_companies cc ON c.client_account = cc.id
    LEFT JOIN accounts cac ON c.account = cac.accountId
        WHERE c.company=" . $this->account()->getCompany()->getCompanyId();


            $i = 0;
            //foreach ($search_keys as $search_key) {
    $sql .= ' AND (c.firstName LIKE "%' . $search_key . '%" OR c.lastName LIKE "%' . $search_key . '%" OR c.email LIKE "%' . $search_key . '%" OR cc.name LIKE "%' . $search_key . '%" OR CONCAT(c.firstName, " ", c.lastName) LIKE "%' . $search_key . '%")  ';
        // }
    $sql .= ' LIMIT 25) ';

    $sql .= "UNION (SELECT CONCAT(ps.firstName, ' ', ps.lastName) as entity_name,ps.prospectId as entity_id,'prospect' as entity_type,'test' as client_name,'test1' as account_name,'project' as project_name,'email' as search_email,CONCAT(psa.firstName, ' ', psa.lastName) as owner_name,'job_number' as job_number,'created' as created_date,'price' as proposal_price,'lead_status' as lead_status,
    'proposal_count' as proposal_count,'total_bid' as total_bid,'contact_count' as contact_count
    
    FROM prospects ps
    LEFT JOIN accounts psa on ps.account = psa.accountId 
                WHERE ps.company=" . $this->account()->getCompany()->getCompanyId();

                if (!$this->account()->hasFullAccess()) {

            
                    $sql .= ' AND psa.branch = ' . $this->account()->getBranch();
                
                    // For peons, add further restriction to their own account
                    if ($this->account()->isUser()) {
                    
                        $sql .= ' AND ps.account = ' . $this->account()->getAccountId();
                    }
                }
                $i = 0;
            //foreach ($search_keys as $search_key) {
    $sql .= ' AND (ps.firstName LIKE "%' . $search_key . '%" OR ps.lastName LIKE "%' . $search_key . '%" OR ps.companyName LIKE "%' . $search_key . '%" OR psa.firstName LIKE "%' . $search_key . '%" OR psa.lastName LIKE "%' . $search_key . '%" OR CONCAT(ps.firstName, " ", ps.lastName) LIKE "%' . $search_key . '%" OR CONCAT(psa.firstName, " ", psa.lastName) LIKE "%' . $search_key . '%") ';
            //}

    $sql .= ' LIMIT 25) ';

    $sql .= "UNION (SELECT acc.name as entity_name,acc.id as entity_id,'account' as entity_type,'test' as client_name,'test1' as account_name,'project' as project_name,'email' as search_email,CONCAT(acca.firstName, ' ', acca.lastName) as owner_name,'job_number' as job_number,'created' as created_date,'price' as proposal_price,'lead_status' as lead_status,
    
        (SELECT COUNT(proposalId) FROM proposals as ccp, clients clcc WHERE ccp.client = clcc.clientId AND clcc.client_account = acc.id ) as proposal_count,
        (SELECT SUM(ccp2.price) FROM proposals ccp2, clients clcc2 WHERE ccp2.client = clcc2.clientId AND  ccp2.duplicateOf IS NULL AND clcc2.client_account = acc.id) AS total_bid,
        (SELECT COUNT(clcc3.clientId) FROM clients clcc3 LEFT JOIN accounts ac3 ON clcc3.account = ac3.accountId  WHERE clcc3.client_account = acc.id ) AS contact_count
        FROM client_companies acc
        LEFT JOIN accounts acca on acc.owner_user = acca.accountId 
                WHERE acc.owner_company=" . $this->account()->getCompany()->getCompanyId();


                 // Permissions
                if (!$this->account()->hasFullAccess()) {

                    if ($this->account()->isBranchAdmin()) {
                        $sql .= ' AND acca.branch = ' . $this->account()->getBranch();
                    } else {
                        $sql .= ' AND acc.owner_user = ' . $this->account()->getAccountId();
                    }
                }


    $sql .= ' AND (acc.name LIKE "%' . $search_key . '%" OR CONCAT(acca.firstName, " ", acca.lastName) LIKE "%' . $search_key . '%") ';

    
    $sql .= ' LIMIT 25) ';
            

            $results =  $this->db->query($sql)->result();
        




            $jsonClients = array();
            $LeadsArray = [];
            $ProposalsArray = [];
            $ContactsArray = [];
            $ProspectsArray = [];
            $AccountsArray = [];
            $jsonClients['items'] = [];
            foreach ($results as $data) {

                try {

                    if($data->entity_type =='proposal'){
                        $ProposalsArray[] = array(
                            'label' => $data->entity_name,
                            'id' => $data->entity_id,
                            'entity_id' => $data->entity_id,
                            'entity_name' => $data->entity_name,
                            'entity_type' => $data->entity_type,
                            'client_name' => $data->client_name,
                            'account_name' => $data->account_name,
                            'project_name' => $data->project_name,
                            'email' => $data->search_email,
                            'owner_name' => $data->owner_name,
                            'job_number' => ($data->job_number) ? $data->job_number : '-',
                            'created_date' => date('m/d/y', $data->created_date + TIMEZONE_OFFSET),
                            'proposal_price' => number_format($data->proposal_price),
                            'lead_status' => $data->lead_status,
                            'contact_count' => $data->contact_count,
                            'total_bid' => $data->total_bid,
                            'proposal_count' => $data->proposal_count,

                        );
                    }else if($data->entity_type =='lead'){
                        $LeadsArray[] = array(
                            'label' => $data->entity_name,
                            'id' => $data->entity_id,
                            'entity_id' => $data->entity_id,
                            'entity_name' => $data->entity_name,
                            'entity_type' => $data->entity_type,
                            'client_name' => $data->client_name,
                            'account_name' => $data->account_name,
                            'project_name' => $data->project_name,
                            'email' => $data->search_email,
                            'owner_name' => $data->owner_name,
                            'job_number' => $data->job_number,
                            'created_date' => $data->created_date,
                            'proposal_price' => $data->proposal_price,
                            'lead_status' => $data->lead_status,
                            'contact_count' => $data->contact_count,
                            'total_bid' => $data->total_bid,
                            'proposal_count' => $data->proposal_count,
                        );
                    }else if($data->entity_type =='client'){
                        $ContactsArray[] = array(
                            'label' => $data->entity_name,
                            'id' => $data->entity_id,
                            'entity_id' => $data->entity_id,
                            'entity_name' => $data->entity_name,
                            'entity_type' => $data->entity_type,
                            'client_name' => $data->client_name,
                            'account_name' => $data->account_name,
                            'project_name' => $data->project_name,
                            'email' => $data->search_email,
                            'owner_name' => $data->owner_name,
                            'job_number' => $data->job_number,
                            'created_date' => $data->created_date,
                            'proposal_price' => $data->proposal_price,
                            'lead_status' => $data->lead_status,
                            'contact_count' => $data->contact_count,
                            'total_bid' => $data->total_bid,
                            'proposal_count' => $data->proposal_count,
                        );
                    }else if($data->entity_type =='prospect'){
                        $ProspectsArray[] = array(
                            'label' => $data->entity_name,
                            'id' => $data->entity_id,
                            'entity_id' => $data->entity_id,
                            'entity_name' => $data->entity_name,
                            'entity_type' => $data->entity_type,
                            'client_name' => $data->client_name,
                            'account_name' => $data->account_name,
                            'project_name' => $data->project_name,
                            'email' => $data->search_email,
                            'owner_name' => $data->owner_name,
                            'job_number' => $data->job_number,
                            'created_date' => $data->created_date,
                            'proposal_price' => $data->proposal_price,
                            'lead_status' => $data->lead_status,
                            'contact_count' => $data->contact_count,
                            'total_bid' => $data->total_bid,
                            'proposal_count' => $data->proposal_count,
                        );
                    }else if($data->entity_type =='account'){
                        $AccountsArray[] = array(
                            'label' => $data->entity_name,
                            'id' => $data->entity_id,
                            'entity_id' => $data->entity_id,
                            'entity_name' => $data->entity_name,
                            'entity_type' => $data->entity_type,
                            'client_name' => $data->client_name,
                            'account_name' => $data->account_name,
                            'project_name' => $data->project_name,
                            'email' => $data->search_email,
                            'owner_name' => $data->owner_name,
                            'job_number' => $data->job_number,
                            'created_date' => $data->created_date,
                            'proposal_price' => $data->proposal_price,
                            'lead_status' => $data->lead_status,
                            'contact_count' => $data->contact_count,
                            'total_bid' => number_format($data->total_bid),
                            'proposal_count' => $data->proposal_count,
                        );
                    }
                    
                } catch (\Exception $e) {
                    // Don't populate result
                }

            }
            $jsonClients['items'][0]['text'] = 'Proposals';
            $jsonClients['items'][0]['children'] = $ProposalsArray;
            $jsonClients['items'][0]['result_count'] = count($ProposalsArray);
            
            $jsonClients['items'][1]['text'] = 'Leads';
            $jsonClients['items'][1]['children'] = $LeadsArray;
            $jsonClients['items'][1]['result_count'] = count($LeadsArray);

            $jsonClients['items'][2]['text'] = 'Contacts';
            $jsonClients['items'][2]['children'] = $ContactsArray;
            $jsonClients['items'][2]['result_count'] = count($ContactsArray);

            $jsonClients['items'][3]['text'] = 'Prospects';
            $jsonClients['items'][3]['children'] = $ProspectsArray;
            $jsonClients['items'][3]['result_count'] = count($ProspectsArray);

            $jsonClients['items'][4]['text'] = 'Accounts';
            $jsonClients['items'][4]['children'] = $AccountsArray;
            $jsonClients['items'][4]['result_count'] = count($AccountsArray);

            $jsonClients['incomplete_results'] = false;
            $jsonClients['total_count'] = count($results);
            echo json_encode($jsonClients);
    }


    }


    /**
     * @description Set the order of prospect Type for this company
     */
    public function order_individual_proposal_section()
    {
        
        $proposal_id = $this->input->post('proposal_id');
        //$this->getCompanyRepository()->clearIndividualProposalSectionOrder($proposal_id);
       
        $types = $this->input->post('type');

        if (count($types)) {
            $i = 1;
            foreach ($types as $type) {
                
                $proposal_section = $this->em->find('\models\ProposalSectionIndividualOrder', $type);

                // $psio = new models\ProposalSectionIndividualOrder();
                // $psio->setProposalSectionId($type);
                // $psio->setProposalId($proposal_id);
                $proposal_section->setOrd($i);
                $this->em->persist($proposal_section);
                $i++;
            }

            $proposal = $this->em->findProposal($proposal_id);
            $proposal->setRebuildFlag(1);
            $this->em->persist($proposal);

            $this->em->flush();

            $this->log_manager->add('individual_proposal_section', 'Proposal Section order changed', $proposal->getClient(),$proposal, $this->account());
            
        }
        echo json_encode(array('error' => 0));
    }

    function hide_show_individual_proposal_section(){
        
        if ($this->input->post('sectionId') == 0) {
             $data = array();
            $data['error'] = 1;
            $data['isSuccess'] = false;


            echo json_encode($data);
            die;
            
        }else{
            $proposal_section = $this->em->find('\models\ProposalSectionIndividualOrder', $this->input->post('sectionId'));
            $proposal_id = $this->input->post('proposal_id');
            $proposal_section->setVisible($this->input->post('action'));
            $this->em->persist($proposal_section);

            $proposal = $this->em->findProposal($proposal_id);
            $proposal->setRebuildFlag(1);
            $this->em->persist($proposal);
            $this->em->flush();
            
            $this->log_manager->add(
                 \models\ActivityAction::UPDATE_PROPOSAL_SETTING,
                'Proposal Section setting changed',
                $proposal->getClient(),
                $proposal, $this->account()
            );
            $data = array();
            $data['error'] = 0;
            $data['isSuccess'] = true;


            echo json_encode($data);
            die;

        }
    }


    public function masterDashboardStats($filter = 'all')
    {
        $data = [];
        $time['start'] = '0';
        $time['finish'] = Carbon::create()->endOfDay()->timestamp;
        $dashboardStats = $this->getDashboardStatsRepository();

        $range = $this->input->post('range');

        if ($range != 'custom') {
            $time = getRangeStartFinish($range);
        } else {
            if ($this->input->post('customFrom') == '' && $this->input->post('customTo') == '') {
                $time['start'] = '0';
                $time['finish'] = Carbon::create()->endOfDay()->timestamp;
            } else {
                // $time['start'] = strtotime($this->input->post('customFrom'));
                $time['start'] = Carbon::parse($this->input->post('customFrom'))->startOfDay()->timestamp;
                // $time['finish'] = strtotime("11:59:59pm " . $customFrom = $this->input->post('customTo'));
                $time['finish'] = Carbon::parse($this->input->post('customTo'))->endOfDay()->timestamp;
            }
        }

        $companyId = $this->account()->getCompany()->getCompanyId();
        $tabId = $this->input->post('tabId');
        

       
        if($this->input->post('filterIds')){
            $filterIds = explode(",",$this->input->post('filterIds'));
            switch ($this->input->post('filterType')) {

                case 'company':
                case 'all':
                    

                    if ($tabId != 2) {
                                    // Totals
                                    $data['proposalCount'] = $this->account()->getCompany()->getMasterRangeCreatedProposals($time, true,$filterIds);
                                    $data['proposalValue'] = $this->account()->getCompany()->getMasterRangeCreatedProposalsPrice($time,$filterIds);
                
                                    $data['readableTotalValue'] = readableValue($data['proposalValue']);
                                    // Rollover
                                    $data['rolloverValue'] = readableValue($this->account()->getCompany()->getMasterRolloverValue($time['start'],$filterIds));
                                    //complate
                                    $compVal = $this->account()->getCompany()->getMasterRangeMagicNumber($time, $this->account()->getCompany()->getDefaultStatus(\models\Status::COMPLETED),$filterIds);
                                }

                // print_r( $data['proposalCount']);
                // die;

                    switch ($tabId) {

                        case '0':

                            ////////tab 1

                            // SF Values
                            $data['magicNumberValue'] = readableValue($compVal);
                            $compValSF = $this->account()->getCompany()->getRangeCreatedProposalsStatusPrice($time,
                                $this->account()->getCompany()->getDefaultStatus(\models\Status::COMPLETED));
                            $data['completedValueSF'] = readableValue($compValSF);
                            $data['completedPct'] = $data['proposalValue'] ? number_format((($compValSF / $data['proposalValue']) * 100)) : 0;

                            $openValSF = $this->account()->getCompany()->getRangeCreatedProposalsStatusPrice($time,
                                $this->account()->getCompany()->getDefaultStatus(\models\Status::OPEN));
                            $data['openValueSF'] = readableValue($openValSF);
                            $data['openPct'] = $data['proposalValue'] ? number_format((($openValSF / $data['proposalValue']) * 100)) : 0;

                            $wonValSF = $this->account()->getCompany()->getRangeCreatedProposalsStatusPrice($time,
                                $this->account()->getCompany()->getDefaultStatus(\models\Status::WON));
                            $data['wonValueSF'] = readableValue($wonValSF);
                            $data['wonPct'] = $data['proposalValue'] ? number_format((($wonValSF / $data['proposalValue']) * 100)) : 0;

                            $lostValSF = $this->account()->getCompany()->getRangeCreatedProposalsStatusPrice($time,
                                $this->account()->getCompany()->getDefaultStatus(\models\Status::LOST));
                            $data['lostValueSF'] = readableValue($lostValSF);
                            $data['lostPct'] = $data['proposalValue'] ? number_format((($lostValSF / $data['proposalValue']) * 100)) : 0;
                            break;

                        case '1':

                            // Completed
                            $data['completedValue'] = readableValue($compVal);
                            $data['avgValue'] = $data['proposalCount'] ? (readableValue($data['proposalValue'] / $data['proposalCount'])) : 0;
                            // Won
                            $wonVal = $this->account()->getCompany()->getMasterRangeCreatedProposalsStatusPrice($time,
                                $this->account()->getCompany()->getDefaultStatus(\models\Status::WON),$filterIds);
                            $data['wonValue'] = readableValue($wonVal);
                            // Open
                            $openVal = $this->account()->getCompany()->getMasterRangeCreatedProposalsStatusPrice($time,
                                $this->account()->getCompany()->getDefaultStatus(\models\Status::OPEN),$filterIds);
                            $data['openValue'] = readableValue($openVal);
                            // Lost
                            $lostVal = $this->account()->getCompany()->getMasterRangeCreatedProposalsStatusPrice($time,
                                $this->account()->getCompany()->getDefaultStatus(\models\Status::LOST),$filterIds);
                            $data['lostValue'] = readableValue($lostVal);
                            break;

                        case '2':

                            /*Leads Stuff*/
                            $data = array_merge($data, $dashboardStats->getMasterCompanyStats($this->account()->getCompany(), $time['start'],
                                $time['finish'],null,null,$filterIds));

                            break;
                    }

                    break;

                    case 'branch':

                    // $branch_filters = explode("_",$filterIds);
                    
                        $filterBranches = array();
                        foreach($filterIds as $filterId){
                            $tempArr = explode("_",$filterId);
                            $filterBranches[] = array(
                                'companyId' => $tempArr[0],
                                'branchId' => $tempArr[1],
                            );

                        }

                        switch ($tabId) {

                            case '1':

                                

                                $proposalCount = 0;
                                $proposalValue = 0;
                                $readableTotalValue = 0;
                                $rolloverValue = 0;
                                $compVal = 0;
                                $wonVal = 0;
                                $openVal = 0;
                                $lostVal = 0;

                                
                                foreach($filterBranches as $filterBranch){
                                    
                                    if( $filterBranch['branchId'] > 0){
                                        $branch = $this->em->findBranch($filterBranch['branchId']);
                                        $branchCompany = $this->em->findCompany($branch->getCompany());

                                        // Totals
                                        $proposalCount += $branch->getRangeCreatedProposals($time, true);
                                        $proposalValue += $branch->getRangeCreatedProposalsPrice($time);

                                        //$readableTotalValue += readableValue($data['proposalValue']);
                                        // Rollover
                                        $rolloverValue += $branch->getRolloverValue($time['start']);
                                        // Completed
                                        $compVal += $branch->getRangeMagicNumber($time, $branchCompany->getDefaultStatus(\models\Status::COMPLETED));


                                        // Completed
                                        
                                        // Won
                                        $wonVal += $this->account()->getCompany()->getMasterRangeCreatedProposalsStatusPrice($time,
                                            $this->account()->getCompany()->getDefaultStatus(\models\Status::WON),$filterIds);
                                        
                                        // Open
                                        $openVal += $this->account()->getCompany()->getMasterRangeCreatedProposalsStatusPrice($time,
                                            $this->account()->getCompany()->getDefaultStatus(\models\Status::OPEN),$filterIds);
                                        
                                        // Lost
                                        $lostVal += $this->account()->getCompany()->getMasterRangeCreatedProposalsStatusPrice($time,
                                            $this->account()->getCompany()->getDefaultStatus(\models\Status::LOST),$filterIds);
                                    }else{


                                    
                                            // Main branch - needs different queries
                                            $branchCompany = $this->em->findCompany($filterBranch['companyId']);
                                            $companyId = $filterBranch['companyId'];
                                            
                                            // Totals
                                            $proposalCount += \models\Branches::getRangeCreatedProposalsMain($time, $companyId, true);
                                            $proposalValue += \models\Branches::getRangeCreatedProposalsPriceMain($time, $companyId);
                    
                                        
                                            // Rollover
                                            $rolloverValue += \models\Branches::getRolloverValueMain($time['start'],
                                                $companyId);
                                            // Completed
                                            $compVal += \models\Branches::getRangeMagicNumberMain($time, $companyId, $branchCompany->getDefaultStatus(\models\Status::COMPLETED));
                                        
                    
                                        
                                            
                                                // Won
                                                $wonVal += \models\Branches::getRangeMagicNumberMain($time, $companyId,
                                                    $branchCompany->getDefaultStatus(\models\Status::WON));
                                                // Open
                                                $openVal += \models\Branches::getRangeMagicNumberMain($time, $companyId,
                                                    $branchCompany->getDefaultStatus(\models\Status::OPEN));
                                                // Lost
                                                $lostVal += \models\Branches::getRangeMagicNumberMain($time, $companyId,
                                                    $branchCompany->getDefaultStatus(\models\Status::LOST));
                                                
                    

                                        
                                    }
                                    
                                }
                                

                                $data['proposalCount'] = $proposalCount;
                                $data['proposalValue'] = $proposalValue;

                                $data['readableTotalValue'] = readableValue($data['proposalValue']);
                                // Rollover
                                $data['rolloverValue'] = readableValue($rolloverValue);

                                $data['completedValue'] = readableValue($compVal);
                                $data['avgValue'] = $data['proposalCount'] ? (readableValue($data['proposalValue'] / $data['proposalCount'])) : 0;
                                $data['wonValue'] = readableValue($wonVal);
                                $data['openValue'] = readableValue($openVal);
                                $data['lostValue'] = readableValue($lostVal);
                            break;
                        case '2':

                            if(1){
                                $data = array_merge($data,
                                        $dashboardStats->getMasterCompanyBranchStats($filterBranches, $time['start'],
                                            $time['finish']));
        
                            }else{
                                    /*Leads Stuff*/
                                    $data = array_merge($data,
                                    $dashboardStats->getCompanyStats($this->account()->getCompany()->getCompanyId(), $time['start'],
                                        $time['finish'], null, $this->input->post('branchId')));
                                
                            }


                            break;
                        }
                    


                    break;

                    case 'user':
                        if ($tabId != 2) {
                        
                        }
        
                        switch ($tabId) {
        
                            
        
                            case '1':

                                $account = $this->em->findAccount($this->input->post('accountId'));
        
                            
                                $data['proposalCount'] = $this->getProposalRepository()->getRangeCreatedMasterProposals($time, $filterIds);
                                
                                $data['proposalValue'] = $this->getProposalRepository()->getRangeCreatedMasterProposalsPrice($time, $filterIds);
                                //readable total value
                                $data['readableTotalValue'] = readableValue($data['proposalValue']);
            
                                //complete value
                                $compVal = $this->getProposalRepository()->getRangeMasterMagicNumber($time, $this->account()->getCompany()->getDefaultStatus(\models\Status::COMPLETED), $filterIds);

                                //rollover value
                                $data['rolloverValue'] = readableValue($this->getProposalRepository()->getMasterRolloverValue($this->account()->getCompany(),$time['start'], $filterIds));
                                
                                // Completed
                                $data['completedValue'] = readableValue($compVal);
                                // Won
                                $wonVal = $this->getProposalRepository()->getRangeMasterCreatedProposalsStatusPrice($time, $this->account()->getCompany()->getDefaultStatus(\models\Status::WON), $filterIds);
                                $data['wonValue'] = readableValue($wonVal);
                                // Lost
                                $lostVal = $this->getProposalRepository()->getRangeMasterCreatedProposalsStatusPrice($time, $this->account()->getCompany()->getDefaultStatus(\models\Status::LOST), $filterIds);
                                $data['lostValue'] = readableValue($lostVal);
                                // Open
                                $openVal = $this->getProposalRepository()->getRangeMasterCreatedProposalsStatusPrice($time, $this->account()->getCompany()->getDefaultStatus(\models\Status::OPEN), $filterIds);
                                $data['openValue'] = readableValue($openVal);
                                // avg value
                                $data['avgValue'] = $data['proposalCount'] ? (readableValue($data['proposalValue'] / $data['proposalCount'])) : 0;
                                break;
        
                            case '2':
        
                                $data = array_merge($data, $dashboardStats->getMasterCompanyStats($this->account()->getCompany()->getCompanyId(), $time['start'], $time['finish'], $filterIds));
                                break;
                        }
        
                        break;






                }
            }else{

               
                $data['proposalCount'] = 0;
                $data['proposalValue'] = 0;
                $data['readableTotalValue'] = 0;
                $data['rolloverValue'] = 0;
                $data['completedValue'] = 0;
                $data['wonValue'] = 0;
                $data['lostValue'] = 0;
                $data['openValue'] = 0;
                $data['avgValue'] = 0;


                $data['leadsCount'] = 0;
                $data['leadsActive'] = 0;
                $data['leadsConverted'] = 0;
                $data['leadsConvertedPercent'] = 0;
                $data['leadsCancelled'] = 0;
                $data['leadsAvgConversion'] = 0;
                $data['leadsAdded'] = 0;
                $data['leadsNew'] = 0;
                $data['leadsCurrent'] = 0;
                $data['leadsOld'] = 0;




            }

            //print_r($data);


        $data['time'] = $time;

        // Return as JSON
        echo json_encode($data);
    }

    public function ajaxSelect2SearchSuperUser()
    {

        $search_keys = preg_split('/\s+/', $this->input->get('startsWith'));
        $sql = "SELECT a FROM models\Accounts a
            INNER JOIN a.company c
            WHERE a.company IS NOT NULL AND a.is_super_user = 0  AND a.deleted = 0 AND (c.companyStatus = 'Active' OR c.companyStatus = 'Test' ) ";

        $i = 0;
        foreach ($search_keys as $search_key) {

            $sql .= " AND (c.companyName LIKE :searchkey" . $i . " OR a.firstName LIKE :searchkey" . $i . " OR a.lastName LIKE :searchkey" . $i . " OR a.email LIKE :searchkey" . $i . " )";
            $i++;
        }

        $query = $this->em->createQuery($sql)
            ->setMaxResults(30);
        $j = 0;
        foreach ($search_keys as $search_key) {
            $search_key = $this->db->escape_str($search_key);
            $query->setParameter(':searchkey' . $j, "%" . $search_key . "%");
            $j++;
        }

        $accounts = $query->getResult();

        $jsonClients = array();
        $jsonClients['items'] = [];
        foreach ($accounts as $account) {
            try {
                $jsonClients['items'][] = array(
                    'label' => $account->getFullName(),
                    'id' => $account->getAccountId(),
                    'email' => $account->getEmail(),
                    'username' => $account->getFirstName() . ' ' . $account->getLastName(),
                    'company' => $account->getCompany()->getCompanyName(),
                    'company_id' => $account->getCompany()->getCompanyId(),
                );
            } catch (\Exception $e) {
                // Don't populate result
            }

        }
        $jsonClients['incomplete_results'] = false;
        $jsonClients['total_count'] = count($accounts);
        echo json_encode($jsonClients);
    }
    

    public function ajaxSelect2SearchProposalShareUser()
    {

        
        $search_keys = preg_split('/\s+/', $this->input->get('startsWith'));
        $company_id = $this->account()->getCompany()->getCompanyId();
        $proposal_id = preg_split('/\s+/', $this->input->get('proposal_id'));

        $siblingChildCompanyIds = $this->account()->getCompany()->getSiblingChildCompanyIds(true);
        
        $sql = "SELECT a FROM models\Accounts a
            INNER JOIN a.company c
            WHERE a.company IS NOT NULL AND a.company IN( ".implode(",",$siblingChildCompanyIds).") AND a.parent_user_id = 0  AND a.deleted = 0 AND (c.companyStatus = 'Active' OR c.companyStatus = 'Test' ) ";

        $i = 0;
        foreach ($search_keys as $search_key) {

            $sql .= " AND (c.companyName LIKE :searchkey" . $i . " OR a.firstName LIKE :searchkey" . $i . " OR a.lastName LIKE :searchkey" . $i . " OR a.email LIKE :searchkey" . $i . " )";
            $i++;
        }

        $query = $this->em->createQuery($sql)->setMaxResults(30);
        $j = 0;
        foreach ($search_keys as $search_key) {
            $search_key = $this->db->escape_str($search_key);
            $query->setParameter(':searchkey' . $j, "%" . $search_key . "%");
            $j++;
        }

        $user_array = [];
        $accounts = $query->getResult();
        if(isset($proposal_id[0])){
            $user_sql = "select  user_id from proposal_user_permissions where proposal_id =" . $proposal_id[0];
            $user_ids_data = $this->db->query($user_sql)->result();

            foreach($user_ids_data as $user_ids){
                $user_array[] = $user_ids->user_id;
            }
        }



        $jsonClients = array();
        $jsonClients['items'] = [];
        foreach ($accounts as $account) {
            try {
                if(!in_array($account->getAccountId(),$user_array)){
                    $jsonClients['items'][] = array(
                        'label' => $account->getFullName(),
                        'id' => $account->getAccountId(),
                        'email' => $account->getEmail(),
                        'username' => $account->getFirstName() . ' ' . $account->getLastName(),
                        'company' => $account->getCompany()->getCompanyName(),
                        'company_id' => $account->getCompany()->getCompanyId(),
                    );
                }
                
            } catch (\Exception $e) {
                // Don't populate result
            }

        }
        $jsonClients['incomplete_results'] = false;
        $jsonClients['total_count'] = count($accounts);
        echo json_encode($jsonClients);
    }

    public function dashboardTableMasterSalesTargets()
    {
        $companyRepo = $this->getCompanyRepository();

        $from = $this->session->userdata('pStatusFilterFrom');
        $to = $this->session->userdata('pStatusFilterTo');

        $startTime = new Carbon($from . '00:00:00');
        $endTime = new Carbon($to);

        $weekdays = $startTime->diffInWeekdays($endTime);

       


        $accounts = array();

        //$tempAccounts = array();
        $filterIds = explode(",",$this->input->post('filterIds'));

        switch ($this->input->post('filterType')) {

            case 'company':
            case 'all':
                $accounts = $companyRepo->getMasterSalesAccounts($filterIds);
                break;

            case 'branch':

                $filterBranches = array();
                    foreach($filterIds as $filterId){
                        $tempArr = explode("_",$filterId);
                        // $filterBranches[] = array(
                        //     'companyId' => $tempArr[0],
                        //     'branchId' => $tempArr[1],
                        // );

                        $tempAccounts = $companyRepo->getMasterSalesAccounts([$tempArr[0]],$tempArr[1]);
                        $accounts = array_merge($accounts,$tempAccounts);
                       

                    }

                    //$accounts = $tempAccounts;

                    // foreach($filterBranches as $filterBranch){
                                
                    //     if( $filterBranch['branchId'] > 0){
                    //         $branch = $this->em->findBranch($filterBranch['branchId']);
                    //         $branchCompany = $this->em->findCompany($branch->getCompany());

                    //         $accounts = $companyRepo->getMasterSalesAccounts($filterIds);

                    //     }
                    // }

                
                
            break; 
            
            case 'user':
                foreach($filterIds as $filterId){
                    $accounts[] = $this->em->findAccount($filterId);
                }
            break; 

        }







        // Now we have the account(s) and can process the data in the same way for all
        $data = array();
        $data['sEcho'] = 1;
        $data['iTotalRecords'] = count($accounts);
        $data['iTotalDisplayRecords'] = count($accounts);
        $data['aaData'] = array();
        $salesTargetStats = $this->getSalesTargetsRepository();
       
        foreach ($accounts as $account) {

           
            /* @var $account \models\Accounts */

            $targets = $salesTargetStats->getConfig($account->getCompanyId(), $account->getAccountId());

            // Dates now have to be calculate per user in case of varying start times
            $startTime = new Carbon($from);
            $endTime = new Carbon($to);

            $startTimeString = '';
            if ($targets['start_date'] > $startTime->timestamp) {
                $startTime = Carbon::createFromTimestamp($targets['start_date']);
                $startTimeString = '<a href="#" class="right tiptipright iconLink" onclick="return false" title="User Start Date is ' . $startTime->format('m/d/y') . '. Targets are adjusted to account for this."><i class="fa fa-fw fa-calendar"></i></a>';
            }

            // Calculate weekdays
            $weekdays = $startTime->diffInWeekdays($endTime);

            // Get the stats
            $stats = $salesTargetStats->getUserStats($account, $from, $to);

            // Win rate
            $targetWinRate = $targets['win_rate'];
            $winRate = $stats['win_rate'];

            // Sales Target
            $currentSalesTarget = ($targets['sales_per_day'] * $weekdays);

            // Bid Target
            $targetBidPerDay = $targets['bid_per_day_52'];
//            $targetBidPerDay = $targets['bid_per_day'];
            $targetTotalBid = ($targetBidPerDay * $weekdays);
            $totalBid = $stats['total_bid'];
            $bidDiff = $totalBid - $targetTotalBid;
            $plusDiff = ($bidDiff >= 0);
            if ($weekdays > 0) {
                $bidsPerDay = round($stats['totalProposals'] / $weekdays, 2);
            } else {
                //if weekdays 0 set it as 1
                $weekdays = 1;
                $bidsPerDay = round($stats['totalProposals'] / $weekdays, 2);
            }

            // Sales Value
            $salesValue = $stats['wonCompletedProposals'];
            $rolloverValue = $stats['rangeRollover'];
            $actualValue = ($salesValue - $rolloverValue);
            $differenceValue = ($salesValue - $currentSalesTarget);

            if ($differenceValue < 0) {
                $differenceValueContent = '<span style="color: #FB0003;">' . readableValueWithDollar($differenceValue) . '</span>';
            } else {
                $differenceValueContent = '+$' . str_replace(str_split('()'), '', readableValue($differenceValue));
            }
            $smiley = '';
            if ($plusDiff) {
                $smiley = '<i class="fa fa fw fa-smile-o"></i>';
            }

            // Build the html content //
            $targetsHit = 0;

            // Sales $ //
            $salesClass = 'fa fa-fw fa-arrow-down';
            $linkClass = 'belowTarget';
            if ($salesValue >= $currentSalesTarget) {
                $salesClass = 'fa fa-fw fa-arrow-up';
                $linkClass = 'aboveTarget';
                $targetsHit++;
            }
            $salesContent = '<div style="display: flex;"><a class="" href="javascript:void(0)">$' . readableValue($salesValue) . '</a> <a style="margin-left: auto;" class=" iconLink tiptiptarget ' . $linkClass . '" title="
                <p style=\'text-align: center; margin-bottom: 5px; width: 150px; font-weight: bold;\'>Win</p>
                <table width=\'100%\'>
                    <tr>
                        <td>Target:</td>
                        <td>$' . readableValue($currentSalesTarget) . '</td>
                    </tr>
                    <tr style=\'padding: 5px;\'>
                        <td></td>
                        <td></td>
                   </tr>
                        <td>Actual:</td>
                        <td>$' . readableValue($actualValue) . '</td>
                   <tr>
                   </tr>
                        <td>Rollover:</td>
                        <td>$' . readableValue($rolloverValue) . '</td>
                   <tr>
                   </tr>
                        <td>Difference: </td>
                        <td>$' . readableValue($differenceValue) . '</td>
                   <tr>
                </table>
                ">
                <i class="' . $salesClass . '"</i></a>';


            if ($currentSalesTarget) {
                $targetPercentage = round(($salesValue > 0) ? ($salesValue * 100) / $currentSalesTarget : 0, 2) . '%';
            } else {
                $targetPercentage = '-';
            }

            // Win Rate
            $winRateClass = 'fa fa-fw fa-arrow-down';
            $linkClass = 'belowTarget';
            if ($winRate >= $targetWinRate) {
                $winRateClass = 'fa fa-fw fa-arrow-up';
                $linkClass = 'aboveTarget';
            }
            $actual_percent = ($totalBid > 0) ? (($salesValue * 100) / $totalBid) : 0;
            $percent_info = '';
            if ($actual_percent > $winRate) {
                $percent_info .= ' <i class="fa fa-fw fa-info-circle  tiptip right" style="margin-top: 1px;" title="This % does not match the Won $ amount.</br></br>This is because you have won a proposal that was created before the time range you selected.</br></br>The Win Rate is only for proposals you created AND won in the time range."></i>';
            } else if ($actual_percent < $winRate) {
                $percent_info .= ' <i class="fa fa-fw fa-info-circle  tiptip right" style="margin-top: 1px;" title="This % does not match the Won $ amount.</br></br>This is because you have some proposals marked as won, but do not have a win date saved which means they are not included in the Won $. </br></br>Update the win rate of your won proposals and this number will update automatically."></i>';
            }

            if ($winRate > 0) {
                $winRateContent = '<div style="display: flex;"><span class="" ><a class="" href="javascript:void(0)">' . number_format($winRate,
                        2) . '%</a></span> ' . $percent_info . ' <a style="margin-left: auto;" class=" iconLink tiptip ' . $linkClass . '" title="Target: ' . $targetWinRate . '%"><i class="' . $winRateClass . '"</i></a></div>';
            } else {
                $winRateContent = '<div style="display: flex;"><span class="" >' . number_format($winRate,
                        2) . '%</span> ' . $percent_info . ' <a style="margin-left: auto;" class=" iconLink tiptip ' . $linkClass . '" title="Target: ' . $targetWinRate . '%"><i class="' . $winRateClass . '"</i></a></div>';
            }


            // Bid Amount
            $bidClass = 'fa fa-fw fa-arrow-down';
            $linkClass = 'belowTarget';
            if ($totalBid >= $targetTotalBid) {
                $bidClass = 'fa fa-fw fa-arrow-up';
                $linkClass = 'aboveTarget';
            }
            $bidContent = '<div style="display: flex;"><a class="" href="javascript:void(0)">$' . readableValue($totalBid) . '</a> <a style="margin-left: auto;" class="iconLink tiptip  ' . $linkClass . '" title="Target: $' . readableValue($targetTotalBid) . '"><i class="' . $bidClass . '"</i></a>';

            // Smiley
            $smileyContent = '';
            if ($targetsHit > 0) {
                $smileyContent = '<img src="/3rdparty/icons/happy.svg" width="15px" height="15px" style="margin-top: 2px;" />';
            }

            $totalProposals = 0;
            if ($stats['totalProposals'] > 0) {
                $totalProposals = '<a href="javascript:void(0)">' . $stats['totalProposals'] . '</a> ';
            }

            $totalOpen = 0;
            if ($stats['totalOpen'] > 0) {
                $totalOpen = '<a href="javascript:void(0)">$' . readableValue($stats['totalOpen']) . '</a> ';
            }

            $totalOtherProposal = 0;
            if ($stats['totalOtherProposal'] > 0) {
                $totalOtherProposal = '<a href="javascript:void(0)">$' . readableValue($stats['totalOtherProposal']) . '</a> ';
            }


            // Content needs to be style dependent on comparison vs performance
            $row = [
                '<a href="javascript:void(0)" class="tiptipright" title="Company:'.$account->getCompany()->getCompanyName().'<br/> <br/>Click to View User Statistics">' . $account->getFullName() . '</a>' . $startTimeString,
                $targetsHit,
                $smileyContent,
                $salesContent,
                $targetPercentage,
                $differenceValueContent,
                $differenceValue,
                $totalOpen,
                $totalBid,
                $bidContent,
                $totalOtherProposal,
                $winRateContent,
                $totalProposals,
                $bidsPerDay,
                $salesValue,
                $winRate,
                $targets['sales_target'],
                '$' . readableValue($targets['sales_target']),
                $stats['totalOpen'],
                $stats['totalOtherProposal']
            ];

            $data['aaData'][] = $row;
        }
        

        // Return as JSON
        echo json_encode($data);
    }


    public function dashboardProposalCompanyBreakDownTable()
    {
        $companyRepo = $this->getCompanyRepository();

        $time['start'] = '0';
        $time['finish'] = Carbon::create()->endOfDay()->timestamp;
        $time['start'] = strtotime($this->session->userdata('pStatusFilterFrom'));
        $time['finish'] = strtotime("11:59:59pm " . $this->session->userdata('pStatusFilterTo'));

        if($this->input->post('companyIds')){
            $filterIds = explode(",",$this->input->post('filterIds'));
            $companyIds = $this->input->post('companyIds');
            switch ($this->input->post('filterType')) {

                case 'company':
                case 'all':

                    $data = array();

                    $data['sEcho'] = 1;
                    $data['iTotalRecords'] = count($companyIds);
                    $data['iTotalDisplayRecords'] = count($companyIds);
                    $data['aaData'] = array();
        
                    foreach ($companyIds as $companyId) {
        
                        $company = $this->em->findCompany($companyId);
                        
                        /* @var $company \models\Companies */
                        $companyOpenStatus = $company->getDefaultStatus(\models\Status::OPEN);
                        $companyCompleteStatus = $company->getDefaultStatus(\models\Status::COMPLETED);
                        $companyWonStatus = $company->getDefaultStatus(\models\Status::WON);
                        $companyLostStatus = $company->getDefaultStatus(\models\Status::LOST);
        
                        // Totals
                        $totalBid = $company->getRangeCreatedMasterProposalsPrice($time);
                    
                        $proposalCount = $company->getRangeCreatedProposals($time, true);
                        // Average - avoid division by 0
                        $avgBid = $proposalCount ? ($totalBid / $proposalCount) : 0;
        
                        // Open
                        $openBidPrice = $company->getRangeMagicNumber($time, $companyOpenStatus);
        
                        // Won
                        $wonBidPrice = $company->getRangeMagicNumber($time, $companyWonStatus);
        
                        // Lost
                        $lostBidPrice = $company->getRangeMagicNumber($time, $companyLostStatus);
        
                        // Complete
                        $compBidPrice = $company->getRangeMagicNumber($time, $companyCompleteStatus);
        
                        // Rollover
                        $rollover = $company->getRolloverValue($time['start']);
        
                        // Populate the table row data
                        $row = [];
                        // User name
                        $row[] = $company->getCompanyName();
                        // Number of proposals
                        $row[] = $proposalCount;
                        $row[] = '<a href="javascript:void(0)">' . $proposalCount . '</a>';
                        // Total bid value
                        $row[] = $totalBid;
                        $row[] = '<a href="javascript:void(0)">$' . readableValue($totalBid) . '</a>';
                        // Avarage Value
                        $row[] = $avgBid;
                        $row[] = '$' . readableValue($avgBid);
                        // Completed Value
                        $row[] = $compBidPrice;
                        $row[] = '<a href="javascript:void(0)">$' . readableValue($compBidPrice) . '</a>';
                        // Open Value
                        $row[] = $openBidPrice;
                        $row[] = '<a href="javascript:void(0)">$' . readableValue($openBidPrice) . '</a>';
                        // Won Value
                        $row[] = $wonBidPrice;
                        $row[] = '<a href="javascript:void(0)">$' . readableValue($wonBidPrice) . '</a>';
                        // Lost Value
                        $row[] = $lostBidPrice;
                        $row[] = '<a href="javascript:void(0)">$' . readableValue($lostBidPrice) . '</a>';
        
                        $data['aaData'][] = $row;
                    }


                break;

                case 'branch':

                    // $branch_filters = explode("_",$filterIds);
                    
                    foreach ($companyIds as $companyId) {
        
                        $company = $this->em->findCompany($companyId);


                        $filterBranches = array();
                        foreach($filterIds as $filterId){
                            $tempArr = explode("_",$filterId);
                            if($tempArr[0] == $companyId){
                                $filterBranches[] = array(
                                    'companyId' => $tempArr[0],
                                    'branchId' => $tempArr[1],
                                );
                            }
                            

                        }
 

                                $proposalCount = 0;
                                $proposalValue = 0;
                                $readableTotalValue = 0;
                                $rolloverValue = 0;
                                $compVal = 0;
                                $wonVal = 0;
                                $openVal = 0;
                                $lostVal = 0;

                                
                                foreach($filterBranches as $filterBranch){
                                    
                                    if( $filterBranch['branchId'] > 0){
                                        $branch = $this->em->findBranch($filterBranch['branchId']);
                                        $branchCompany = $company;

                                        // Totals
                                        $proposalCount += $branch->getRangeCreatedProposals($time, true);
                                        $proposalValue += $branch->getRangeCreatedProposalsPrice($time);

                                        //$readableTotalValue += readableValue($data['proposalValue']);
                                        // Rollover
                                        $rolloverValue += $branch->getRolloverValue($time['start']);
                                        // Completed
                                        $compVal += $branch->getRangeMagicNumber($time, $branchCompany->getDefaultStatus(\models\Status::COMPLETED));


                                        // Completed
                                        
                                        // Won
                                        $wonVal += $branch->getRangeMagicNumber($time,
                                        $branchCompany->getDefaultStatus(\models\Status::WON));
                                        
                                        // Open
                                        $openVal += $branch->getRangeMagicNumber($time,
                                        $branchCompany->getDefaultStatus(\models\Status::OPEN));
                                        
                                        // Lost
                                        $lostVal += $branch->getRangeMagicNumber($time,
                                            $branchCompany->getDefaultStatus(\models\Status::LOST));
                                    }else{


                                    
                                            // Main branch - needs different queries
                                            $branchCompany = $this->em->findCompany($filterBranch['companyId']);
                                            $companyId = $filterBranch['companyId'];
                                            
                                            // Totals
                                            $proposalCount += \models\Branches::getRangeCreatedProposalsMain($time, $companyId, true);
                                            $proposalValue += \models\Branches::getRangeCreatedProposalsPriceMain($time, $companyId);
                    
                                        
                                            // Rollover
                                            $rolloverValue += \models\Branches::getRolloverValueMain($time['start'],
                                                $companyId);
                                            // Completed
                                            $compVal += \models\Branches::getRangeMagicNumberMain($time, $companyId, $branchCompany->getDefaultStatus(\models\Status::COMPLETED));
                                        
                    
                                        
                                            
                                                // Won
                                                $wonVal += \models\Branches::getRangeMagicNumberMain($time, $companyId,
                                                    $branchCompany->getDefaultStatus(\models\Status::WON));
                                                // Open
                                                $openVal += \models\Branches::getRangeMagicNumberMain($time, $companyId,
                                                    $branchCompany->getDefaultStatus(\models\Status::OPEN));
                                                // Lost
                                                $lostVal += \models\Branches::getRangeMagicNumberMain($time, $companyId,
                                                    $branchCompany->getDefaultStatus(\models\Status::LOST));
                                                
                    

                                        
                                    }
                                    
                                }



                                // Totals
                        $totalBid = $proposalValue;
                    
                        // Average - avoid division by 0
                        $avgBid = $proposalCount ? ($totalBid / $proposalCount) : 0;
        
                        // Open
                        $openBidPrice =readableValue($openVal);
        
                        // Won
                        $wonBidPrice = readableValue($wonVal);
        
                        // Lost
                        $lostBidPrice = readableValue($lostVal);
        
                        // Complete
                        $compBidPrice = readableValue($compVal);
        
                        // Rollover
                        $rollover = readableValue($rolloverValue);
        
                        // Populate the table row data
                        $row = [];
                        // User name
                        $row[] = $company->getCompanyName();
                        // Number of proposals
                        $row[] = $proposalCount;
                        $row[] = '<a href="javascript:void(0)">' . $proposalCount . '</a>';
                        // Total bid value
                        $row[] = $totalBid;
                        $row[] = '<a href="javascript:void(0)">$' . ($totalBid) . '</a>';
                        // Avarage Value
                        $row[] = $avgBid;
                        $row[] = '$' . readableValue($avgBid);
                        // Completed Value
                        $row[] = $compBidPrice;
                        $row[] = '<a href="javascript:void(0)">$' . ($compBidPrice) . '</a>';
                        // Open Value
                        $row[] = $openBidPrice;
                        $row[] = '<a href="javascript:void(0)">$' . ($openBidPrice) . '</a>';
                        // Won Value
                        $row[] = $wonBidPrice;
                        $row[] = '<a href="javascript:void(0)">$' . ($wonBidPrice) . '</a>';
                        // Lost Value
                        $row[] = $lostBidPrice;
                        $row[] = '<a href="javascript:void(0)">$' . ($lostBidPrice) . '</a>';
        
                        $data['aaData'][] = $row;
                      
                        }

                    break;

                    
                    case 'user':
                        
                            
                        foreach ($companyIds as $companyId) {

                            $company = $this->em->findCompany($companyId); 
                            
                            //$checkFilterIds = explode(",",$filterIds);
                            $finalFilterIds = [];
                            $checkAccounts = $company->getAccounts();

                            foreach($checkAccounts as $checkAccount){
                                if(in_array($checkAccount->getAccountId(),$filterIds)){
                                    $finalFilterIds[] = $checkAccount->getAccountId();
                                }
                                
                            }

                           // $finalFilterIds = implode(",",$finalFilterIds);
                            
                                $proposalCount = $this->getProposalRepository()->getRangeCreatedMasterProposals($time, $finalFilterIds);
                                
                                $proposalValue = $this->getProposalRepository()->getRangeCreatedMasterProposalsPrice($time, $finalFilterIds);
                                //readable total value
                                $readableTotalValue = readableValue($proposalValue);
            
                                //complete value
                                $compVal = $this->getProposalRepository()->getRangeMasterMagicNumber($time, $this->account()->getCompany()->getDefaultStatus(\models\Status::COMPLETED), $finalFilterIds);

                                //rollover value
                                $rolloverValue = readableValue($this->getProposalRepository()->getMasterRolloverValue($this->account()->getCompany(),$time['start'], $finalFilterIds));
                                
                                // Completed
                                $completedValue = readableValue($compVal);
                                // Won
                                $wonVal = $this->getProposalRepository()->getRangeMasterCreatedProposalsStatusPrice($time, $this->account()->getCompany()->getDefaultStatus(\models\Status::WON), $finalFilterIds);
                                $wonValue = readableValue($wonVal);
                                // Lost
                                $lostVal = $this->getProposalRepository()->getRangeMasterCreatedProposalsStatusPrice($time, $this->account()->getCompany()->getDefaultStatus(\models\Status::LOST), $finalFilterIds);
                                $lostValue = readableValue($lostVal);
                                // Open
                                $openVal = $this->getProposalRepository()->getRangeMasterCreatedProposalsStatusPrice($time, $this->account()->getCompany()->getDefaultStatus(\models\Status::OPEN), $filterIds);
                                $openValue = readableValue($openVal);
                                // avg value
                                $avgValue = $proposalCount ? (readableValue($proposalValue / $proposalCount)) : 0;
                                

                                // Populate the table row data
                                $row = [];
                                // User name
                                $row[] = $company->getCompanyName();
                                // Number of proposals
                                $row[] = $proposalCount;
                                $row[] = '<a href="javascript:void(0)">' . $proposalCount . '</a>';
                                // Total bid value
                                $row[] = $readableTotalValue;
                                $row[] = '<a href="javascript:void(0)">$' . ($readableTotalValue) . '</a>';
                                // Avarage Value
                                $row[] = $avgValue;
                                $row[] = '$' . readableValue($avgValue);
                                // Completed Value
                                $row[] = $completedValue;
                                $row[] = '<a href="javascript:void(0)">$' . ($completedValue) . '</a>';
                                // Open Value
                                $row[] = $openValue;
                                $row[] = '<a href="javascript:void(0)">$' . ($openValue) . '</a>';
                                // Won Value
                                $row[] = $wonValue;
                                $row[] = '<a href="javascript:void(0)">$' . ($wonValue) . '</a>';
                                // Lost Value
                                $row[] = $lostValue;
                                $row[] = '<a href="javascript:void(0)">$' . ($lostValue) . '</a>';
                
                                $data['aaData'][] = $row;

                        }
                          
                        break;




            }
        }else{
            $data = array();

            $data['sEcho'] = 1;
            $data['iTotalRecords'] = 0;
            $data['iTotalDisplayRecords'] = 0;
            $data['aaData'] = array();

        }

        // if($this->input->post('filterIds')){

        //     $filterIds = $this->input->post('filterIds');

        //     $data = array();

        //     $data['sEcho'] = 1;
        //     $data['iTotalRecords'] = count($filterIds);
        //     $data['iTotalDisplayRecords'] = count($filterIds);
        //     $data['aaData'] = array();

        //     foreach ($filterIds as $filterId) {

        //         $company = $this->em->findCompany($filterId);
                
        //         /* @var $company \models\Companies */
        //         $companyOpenStatus = $company->getDefaultStatus(\models\Status::OPEN);
        //         $companyCompleteStatus = $company->getDefaultStatus(\models\Status::COMPLETED);
        //         $companyWonStatus = $company->getDefaultStatus(\models\Status::WON);
        //         $companyLostStatus = $company->getDefaultStatus(\models\Status::LOST);

        //         // Totals
        //         $totalBid = $company->getRangeCreatedMasterProposalsPrice($time);
            
        //         $proposalCount = $company->getRangeCreatedProposals($time, true);
        //         // Average - avoid division by 0
        //         $avgBid = $proposalCount ? ($totalBid / $proposalCount) : 0;

        //         // Open
        //         $openBidPrice = $company->getRangeMagicNumber($time, $companyOpenStatus);

        //         // Won
        //         $wonBidPrice = $company->getRangeMagicNumber($time, $companyWonStatus);

        //         // Lost
        //         $lostBidPrice = $company->getRangeMagicNumber($time, $companyLostStatus);

        //         // Complete
        //         $compBidPrice = $company->getRangeMagicNumber($time, $companyCompleteStatus);

        //         // Rollover
        //         $rollover = $company->getRolloverValue($time['start']);

        //         // Populate the table row data
        //         $row = [];
        //         // User name
        //         $row[] = $company->getCompanyName();
        //         // Number of proposals
        //         $row[] = $proposalCount;
        //         $row[] = '<a href="javascript:void(0)">' . $proposalCount . '</a>';
        //         // Total bid value
        //         $row[] = $totalBid;
        //         $row[] = '<a href="javascript:void(0)">$' . readableValue($totalBid) . '</a>';
        //         // Avarage Value
        //         $row[] = $avgBid;
        //         $row[] = '$' . readableValue($avgBid);
        //         // Completed Value
        //         $row[] = $compBidPrice;
        //         $row[] = '<a href="javascript:void(0)">$' . readableValue($compBidPrice) . '</a>';
        //         // Open Value
        //         $row[] = $openBidPrice;
        //         $row[] = '<a href="javascript:void(0)">$' . readableValue($openBidPrice) . '</a>';
        //         // Won Value
        //         $row[] = $wonBidPrice;
        //         $row[] = '<a href="javascript:void(0)">$' . readableValue($wonBidPrice) . '</a>';
        //         // Lost Value
        //         $row[] = $lostBidPrice;
        //         $row[] = '<a href="javascript:void(0)">$' . readableValue($lostBidPrice) . '</a>';

        //         $data['aaData'][] = $row;
        //     }

        // }else{
        //     $data = array();

        //     $data['sEcho'] = 1;
        //     $data['iTotalRecords'] = 0;
        //     $data['iTotalDisplayRecords'] = 0;
        //     $data['aaData'] = array();

        // }    

        echo json_encode($data, JSON_PRETTY_PRINT);
    }
    


    public function superDashboardTableLeads()
    {
        $companyRepo = $this->getCompanyRepository();

        $time = array();
        $time['start'] = strtotime($this->session->userdata('pStatusFilterFrom'));
        $time['finish'] = strtotime("11:59:59pm " . $this->session->userdata('pStatusFilterTo'));
        $includeUnassigned = false;






        if($this->input->post('companyIds')){
            $filterIds = explode(",",$this->input->post('filterIds'));
            $companyIds = $this->input->post('companyIds');
            $dashboardStats = $this->getDashboardStatsRepository();
            switch ($this->input->post('filterType')) {

                case 'company':
                case 'all':

                    $data = array();

                    $data['sEcho'] = 1;
                    $data['iTotalRecords'] = count($companyIds);
                    $data['iTotalDisplayRecords'] = count($companyIds);
                    $data['aaData'] = array();
        
                    foreach ($companyIds as $companyId) {
        
                        $company = $this->em->findCompany($companyId);
                        
                        

                        
            
                            $row = array();
                            $row[] = $company->getCompanyName();
                            $row[] = $dashboardStats->leadsActive($companyId, $time['start'], $time['finish'], null, null, false);
                            $row[] = $dashboardStats->leadsNew($companyId, $time['start'], $time['finish'], null, null, false);
                            $row[] = $dashboardStats->leadsCurrent($companyId, $time['start'], $time['finish'], null, null, false);
                            $row[] = $dashboardStats->leadsOld($companyId, $time['start'], $time['finish'], null, null, false);
                            $row[] = $dashboardStats->leadsConverted($companyId, $time['start'], $time['finish'], null, null, false);
                            $row[] = $dashboardStats->leadsCancelled($companyId, $time['start'], $time['finish'], null, null, false);
                            $row[] = $dashboardStats->totalLeads($companyId, $time['start'], $time['finish'], null, null, false);
                            $avgConversion = ($dashboardStats->leadAvgConversion($companyId, $time['start'], $time['finish'], null,
                                null, false)) ?: 'No Data';
                            $row[] = $avgConversion;
                            $data['aaData'][] = $row;
                        
                    }


                break;

                case 'branch':

                    // $branch_filters = explode("_",$filterIds);
                    
                    foreach ($companyIds as $companyId) {
        
                        $company = $this->em->findCompany($companyId);


                        $filterBranches = array();
                        foreach($filterIds as $filterId){
                            $tempArr = explode("_",$filterId);
                            if($tempArr[0] == $companyId){
                                $filterBranches[] = array(
                                    'companyId' => $tempArr[0],
                                    'branchId' => $tempArr[1],
                                );
                            }
                            

                        }


                        $leadBranchdata = $dashboardStats->getMasterCompanyBranchStats($filterBranches, $time['start'],$time['finish']);
 

                        $row = array();
                        $row[] = $company->getCompanyName();
                        $row[] = $leadBranchdata['leadsActive'];
                        $row[] = $leadBranchdata['leadsNew'];
                        $row[] = $leadBranchdata['leadsCurrent'];
                        $row[] = $leadBranchdata['leadsOld'];
                        $row[] = $leadBranchdata['leadsConverted'];
                        $row[] = $leadBranchdata['leadsCancelled'];
                        $row[] = $leadBranchdata['leadsCount'];
                        
                        $row[] = $leadBranchdata['leadsAvgConversion'] ;
                        $data['aaData'][] = $row;

                      
                        }

                    break;

                    
                    case 'user':
                        
                            
                        foreach ($companyIds as $companyId) {

                            $company = $this->em->findCompany($companyId); 
                            
                            //$checkFilterIds = explode(",",$filterIds);
                            $finalFilterIds = [];
                            $checkAccounts = $company->getAccounts();

                            foreach($checkAccounts as $checkAccount){
                                if(in_array($checkAccount->getAccountId(),$filterIds)){
                                    $finalFilterIds[] = $checkAccount->getAccountId();
                                }
                                
                            }

                            $leadBranchdata = $dashboardStats->getMasterCompanyStats($company, $time['start'], $time['finish'], $finalFilterIds);


                            $row = array();
                            $row[] = $company->getCompanyName();
                            $row[] = $leadBranchdata['leadsActive'];
                            $row[] = $leadBranchdata['leadsNew'];
                            $row[] = $leadBranchdata['leadsCurrent'];
                            $row[] = $leadBranchdata['leadsOld'];
                            $row[] = $leadBranchdata['leadsConverted'];
                            $row[] = $leadBranchdata['leadsCancelled'];
                            $row[] = $leadBranchdata['leadsCount'];
                            
                            $row[] = $leadBranchdata['leadsAvgConversion'] ;
                            $data['aaData'][] = $row;
                           

                        }
                          
                        break;




            }
        }else{
            $data = array();

            $data['sEcho'] = 1;
            $data['iTotalRecords'] = 0;
            $data['iTotalDisplayRecords'] = 0;
            $data['aaData'] = array();

        }




        // if($this->input->post('filterIds')){

        
        //     $filterIds = $this->input->post('filterIds');

        //     $data = array();

        //     $data['sEcho'] = 1;
        //     $data['iTotalRecords'] = count($filterIds);
        //     $data['iTotalDisplayRecords'] = count($filterIds);
        //     $data['aaData'] = array();
        //     $dashboardStats = $this->getDashboardStatsRepository();

        //     foreach ($filterIds as $filterId) {

        //         $company = $this->em->findCompany($filterId);

        //         $row = array();
        //         $row[] = $company->getCompanyName();
        //         $row[] = $dashboardStats->leadsActive($filterId, $time['start'], $time['finish'], null, null, false);
        //         $row[] = $dashboardStats->leadsNew($filterId, $time['start'], $time['finish'], null, null, false);
        //         $row[] = $dashboardStats->leadsCurrent($filterId, $time['start'], $time['finish'], null, null, false);
        //         $row[] = $dashboardStats->leadsOld($filterId, $time['start'], $time['finish'], null, null, false);
        //         $row[] = $dashboardStats->leadsConverted($filterId, $time['start'], $time['finish'], null, null, false);
        //         $row[] = $dashboardStats->leadsCancelled($filterId, $time['start'], $time['finish'], null, null, false);
        //         $row[] = $dashboardStats->totalLeads($filterId, $time['start'], $time['finish'], null, null, false);
        //         $avgConversion = ($dashboardStats->leadAvgConversion($filterId, $time['start'], $time['finish'], null,
        //             null, false)) ?: 'No Data';
        //         $row[] = $avgConversion;
        //         $data['aaData'][] = $row;
        //     }
        // }else{
        //     $data = array();

        //     $data['sEcho'] = 1;
        //     $data['iTotalRecords'] = 0;
        //     $data['iTotalDisplayRecords'] = 0;
        //     $data['aaData'] = array();

        // }

       

        echo json_encode($data, JSON_PRETTY_PRINT);
    }



    public function ajaxGetParentDashboardBusinessTypes()
    {

        $companyRepo = $this->getCompanyRepository();
        $accounts = [];

        // switch ($this->input->get('user')) {

        //     case 'user':

        //         if ($this->input->get('accountId')) {
        //             $accounts = [
        //                 $this->em->findAccount($this->input->get('accountId')),
        //             ];
        //         } else {
        //             // If it's just a user logged in, there's no account ID
        //             $accounts = [
        //                 $this->account(),
        //             ];
        //         }

        //         $sub_url = '/' . $this->input->get('accountId');
        //         break;

        //     case 'branch':
        //         $accounts = $companyRepo->getSalesAccounts($this->account()->getCompanyId(),
        //             $this->input->get('branchId'));
        //         $sub_url = '/user/branch_' . $this->input->get('branchId');
        //         break;

        //     case 'company':
        //         $accounts = $companyRepo->getSalesAccounts($this->account()->getCompanyId());
        //         $sub_url = '/user/company';
        //         break;
        // }

        $filterIds = explode(",",$this->input->get('filterIds'));

        switch ($this->input->get('filterType')) {

            case 'company':
            case 'all':
                $accounts = $companyRepo->getMasterSalesAccounts($filterIds);
                break;

            case 'branch':

                $filterBranches = array();
                    foreach($filterIds as $filterId){
                        $tempArr = explode("_",$filterId);
                        

                        $tempAccounts = $companyRepo->getMasterSalesAccounts([$tempArr[0]],$tempArr[1]);
                        $accounts = array_merge($accounts,$tempAccounts);
                       

                    }

                   
                
            break; 
            
            case 'user':
                foreach($filterIds as $filterId){
                    $accounts[] = $this->em->findAccount($filterId);
                }
            break; 

        }


        $childCompanyIds = [];
        $childCompanies =  $this->getCompanyRepository()->getParentChildCompanies($this->account()->getParentCompany()->getCompanyId());

        foreach($childCompanies as $childCompany){
            
            $childCompanyIds[] = $childCompany->companyId;
           

        }

        $accountArray = array();
        foreach ($accounts as $account) {
            /* @var $account \models\Accounts */
            array_push($accountArray, $account->getAccountId());

        }
       

        if (count($accountArray) > 0) {
            $users = implode(',', $accountArray);
            
            $businessTypes = $this->account()->getParentDashboardBusinessTypesTableData($users,$childCompanyIds);
            //print_r($businessTypes);die;
            //$filteredBusinessTypes = $this->account()->getDashboardBusinessTypesTableData($users,true);
        } else {
            $businessTypes = [];
            //$filteredBusinessTypes = [];
        }

        $data = [];
        $businessTypesData = [];

        foreach ($businessTypes as $businessType) {
            $percent_td = ($businessType->percent_total > 0) ? '<a href="javascript:void(0);" title="View Proposals" class="tiptip "  >' . round($businessType->percent_total, 2) . ' % </a>' : round($businessType->percent_total, 2) . ' %';
            $actual_percent = ($businessType->totalBid > 0) ? (($businessType->totalSold * 100) / $businessType->totalBid) : 0;
            if ($actual_percent > $businessType->percent_total) {
                $percent_td .= ' <i class="fa fa-fw fa-info-circle  tiptipleft right" style="margin-top: 1px;" title="This % does not match the Won $ amount.</br></br>This is because you have won a proposal that was created before the time range you selected.</br></br>The Win Rate is only for proposals you created AND won in the time range."></i>';
            } else if ($actual_percent < $businessType->percent_total) {
                $percent_td .= ' <i class="fa fa-fw fa-info-circle  tiptipleft right" style="margin-top: 1px;" title="This % does not match the Won $ amount.</br></br>This is because you have some proposals marked as won, but do not have a win date saved which means they are not included in the Won $. </br></br>Update the win rate of your won proposals and this number will update automatically."></i>';
            }
            $businessTypesData[] = [
                $businessType->type_name,
                ($businessType->numProposals > 0) ? '<a href="javascript:void(0);" title="View Proposals" class="tiptip show_stats_proposals"  >' . $businessType->numProposals . '</a>' : $businessType->numProposals,
                ($businessType->totalBid > 0) ? '<a href="javascript:void(0);" title="View Proposals" class="tiptip show_stats_proposals"  >$' . number_format($businessType->totalBid) . '</a>' : '$' . number_format($businessType->totalBid),
                ($businessType->totalOpen > 0) ? '<a href="javascript:void(0);" title="View Proposals" class="tiptip "  >$' . number_format($businessType->totalOpen) . '</a>' : '$' . number_format($businessType->totalOpen),
                ($businessType->totalOther > 0) ? '<a href="javascript:void(0);" title="View Proposals" class="tiptip "  >$' . number_format($businessType->totalOther) . '</a>' : '$' . number_format($businessType->totalOther),
                ($businessType->totalSold > 0) ? '<a href="javascript:void(0);" title="View Proposals" class="tiptip "  >$' . number_format($businessType->totalSold) . '</a>' : '$' . number_format($businessType->totalSold),
                $percent_td,

            ];
        }

        $data['aaData'] = $businessTypesData;
        $data['sEcho'] = $this->input->get('sEcho');
        $data["iTotalRecords"] = count($businessTypes);
        $data["iTotalDisplayRecords"] = count($businessTypes);
        echo json_encode($data);
    }


    public function businessTypeBreakdownParentDashboardTable()
    {

        //$businessTypes = $this->account()->getDashboardBusinessTypesTableData($user_id,true);

        $companyRepo = $this->getCompanyRepository();
        $accounts = [];
       
        $filterIds = explode(",",$this->input->get('filterIds'));

        switch ($this->input->get('filterType')) {

            case 'company':
            case 'all':
                $accounts = $companyRepo->getMasterSalesAccounts($filterIds);
                break;

            case 'branch':

                $filterBranches = array();
                    foreach($filterIds as $filterId){
                        $tempArr = explode("_",$filterId);
                        

                        $tempAccounts = $companyRepo->getMasterSalesAccounts([$tempArr[0]],$tempArr[1]);
                        $accounts = array_merge($accounts,$tempAccounts);
                       

                    }

                   
                
            break; 
            
            case 'user':
                foreach($filterIds as $filterId){
                    $accounts[] = $this->em->findAccount($filterId);
                }
            break; 

        }

        $childCompanyIds = [];
        $childCompanies=  $this->getCompanyRepository()->getParentChildCompanies($this->account()->getParentCompany()->getCompanyId());

        foreach($childCompanies as $childCompany){
            
            $childCompanyIds[] = $childCompany->companyId;
           

        }


        $accountArray = array();
        foreach ($accounts as $account) {
            /* @var $account \models\Accounts */
            array_push($accountArray, $account->getAccountId());

        }

        if (count($accountArray) > 0) {
            $users = implode(',', $accountArray);

            $businessTypes = $this->account()->getParentDashboardBusinessTypesTableData($users,$childCompanyIds, true);
            // print_r($businessTypes);die;
            //$filteredBusinessTypes = $this->account()->getDashboardBusinessTypesTableData($users,true);
        } else {
            $businessTypes = [];
            //$filteredBusinessTypes = [];
        }


        $bid_total = 0;
        $win_total = 0;
        foreach ($businessTypes as $businessType) {
            $bid_total = $bid_total + $businessType->totalBid;
            $win_total = $win_total + $businessType->totalSold;
        }

        $data = [];
        $businessTypesData = [];

        foreach ($businessTypes as $businessType) {


            $win_final = ($win_total > 0) ? round(($businessType->totalSold / $win_total) * 100, 2) : 0;
            $bid_final = ($bid_total > 0) ? round(($businessType->totalBid / $bid_total) * 100, 2) : 0;

            $businessTypesData[] = [

                $businessType->type_name,
                '$' . number_format($businessType->totalBid, 0),

                ($businessType->totalBid > 0) ? round(($businessType->totalBid / $bid_total) * 100, 2) . ' %' : '0.0%',
                ($businessType->totalBid > 0) ? round(($businessType->totalBid / $bid_total) * 100, 2) : '0',
                '$' . number_format($businessType->totalSold, 0),
                ($businessType->totalSold > 0) ? round(($businessType->totalSold / $win_total) * 100, 2) . ' %' : '0.0%',
                ($businessType->totalSold > 0) ? round(($businessType->totalSold / $win_total) * 100, 2) : '0',
                round($win_final - $bid_final,2),

            ];
        }

        $data['aaData'] = $businessTypesData;
        $data['sEcho'] = $this->input->get('sEcho');
        $data["iTotalRecords"] = count($businessTypes);
        $data["iTotalDisplayRecords"] = count($businessTypes);
        echo json_encode($data);
    }



    public function businessTypeParentDashboardInfoPie()
    {
        $this->load->library('stats/MyQueryServlet');
        $servlet = new MyQueryServlet();

        //$cAccount = $this->em->findClientAccount($this->input->post('accountId'));
        //$userId = $this->input->post('user_id');
        $time = array();
        if ($this->session->userdata('pStatusFilterFrom') && $this->session->userdata('pStatusFilterTo')) {
            $time['start'] = strtotime($this->session->userdata('pStatusFilterFrom'));

            $time['finish'] = strtotime("11:59:59pm " . $this->session->userdata('pStatusFilterTo'));

        }

        $childCompanyIds = [];
        $data['childCompanies'] =  $this->getCompanyRepository()->getParentChildCompanies($this->account()->getParentCompany()->getCompanyId());

        // foreach($data['childCompanies'] as $childCompany){
            
        //     $childCompanyIds[] = $childCompany->companyId;
           

        // }

        //$business_types = $this->getCompanyRepository()->getParentCompanyBusinessTypes(implode(',',$childCompanyIds));
       
       


        $business_types_object = array();

        $i = 0;
        foreach($data['childCompanies'] as $childCompany){
            
            $childCompanyIds[] = $childCompany->companyId;
            $branchCompany = $this->em->findCompany($childCompany->companyId);
           

            $business_types = $this->getCompanyRepository()->getCompanyBusinessTypes($branchCompany);
           
            

            foreach ($business_types as $business_type) { 


            if (!in_array($business_type->getId(), array_column($business_types_object, 'type_id'))) {
               
                    $business_types_object[$i]['type_id'] = $business_type->getId();
                    $business_types_object[$i]['type_name'] = $business_type->getTypeName();
                    $i++;
              }

               
            }


        }


        $totalVal = 0;

        // Create the datatable
        $data = new DataTable();
        // Colums for pie chart
        $data->addColumn(new ColumnDescription('type', ValueType::STRING, 'Type'));
        $data->addColumn(new ColumnDescription('value', ValueType::NUMBER, 'Value'));


        $companyRepo = $this->getCompanyRepository();
        $accounts = [];
        
        $filterIds = explode(",",$this->input->post('filterIds'));

        switch ($this->input->post('filterType')) {

            case 'company':
            case 'all':
                $accounts = $companyRepo->getMasterSalesAccounts($filterIds);
                break;

            case 'branch':

                $filterBranches = array();
                    foreach($filterIds as $filterId){
                        $tempArr = explode("_",$filterId);
                        

                        $tempAccounts = $companyRepo->getMasterSalesAccounts([$tempArr[0]],$tempArr[1]);
                        $accounts = array_merge($accounts,$tempAccounts);
                       

                    }

                   
                
            break; 
            
            case 'user':
                foreach($filterIds as $filterId){
                    $accounts[] = $this->em->findAccount($filterId);
                }
            break; 

        }

        
        $accountArray = array();
        foreach ($accounts as $account) {
            /* @var $account \models\Accounts */
            array_push($accountArray, $account->getAccountId());

        }


        if (count($accountArray) > 0) {
            $users = implode(',', $accountArray);
            foreach ($business_types_object as $business_type_check) {
                $business_type = $this->em->find('\models\BusinessType', $business_type_check['type_id']);
                $val = $business_type->getRangeCreatedProposalsBusinessTypeDashboard($time, $users, $business_type->getId());
                $totalVal += $val;
                $theVal = (int)$val;


                // Only add the status if it has a value
                if ($theVal > 0) {
                    $row = new TableRow(array($business_type->getTypeName(), $theVal));
                    $data->addRow($row);
                }
            }
        }

      

        if ($totalVal > 0) {
            $servlet->setDataTable($data);
            $servlet->execute();
        } else {
            echo json_encode(array('empty' => 1));
        }
    }



    public function dashboardParentStatusTable()
    {

        $companyRepo = $this->getCompanyRepository();

        $from = $this->session->userdata('pStatusFilterFrom');
        $to = $this->session->userdata('pStatusFilterTo');

        $startTime = new Carbon($from . '00:00:00');
        $endTime = new Carbon($to);

        $weekdays = $startTime->diffInWeekdays($endTime);

        $filterIds = explode(",",$this->input->post('filterIds'));

        $accounts = [];

        switch ($this->input->post('filterType')) {

            case 'company':
            case 'all':
                $accounts = $companyRepo->getMasterSalesAccounts($filterIds);
                break;

            case 'branch':

                $filterBranches = array();
                    foreach($filterIds as $filterId){
                        $tempArr = explode("_",$filterId);
                        

                        $tempAccounts = $companyRepo->getMasterSalesAccounts([$tempArr[0]],$tempArr[1]);
                        $accounts = array_merge($accounts,$tempAccounts);
                       

                    }

                   
                
            break; 
            
            case 'user':
                foreach($filterIds as $filterId){
                    $accounts[] = $this->em->findAccount($filterId);
                }
            break; 

        }

        $childCompanies = $this->getCompanyRepository()->getParentChildCompanies($this->account()->getParentCompany()->getCompanyId());

        $statusObject = [];
        $i=0;

        foreach($childCompanies as $childCompany){
            
            $childCompanyIds[] = $childCompany->companyId;
            $branchCompany = $this->em->findCompany($childCompany->companyId);
           
           
            
            $Statuses = $branchCompany->getStatuses();

            foreach ($Statuses as $status) { 


            if (!in_array($status->getStatusId(), array_column($statusObject, 'status_id'))) {
               
                    $statusObject[$i]['status_id'] = $status->getStatusId();
                    //$statusObject[$i]['status_color'] = $status->getColor();
                    $i++;
              }

               
            }


        }

       // print_r($childCompanies);die;

        // Now we have the account(s) and can process the data in the same way for all
        $data = array();
        $data['sEcho'] = 1;
        $data['iTotalRecords'] = count($accounts);
        $data['iTotalDisplayRecords'] = count($accounts);
        $data['aaData'] = array();

        foreach ($accounts as $account) {
            /* @var $account \models\Accounts */


            // Dates now have to be calculate per user in case of varying start times
            $startTime = new Carbon($from);
            $startTime = $startTime->startOfDay();
            $endTime = new Carbon($to);
            $endTime = $endTime->endOfDay();
            $time = [
                'start' => $startTime->timestamp,
                'finish' => $endTime->timestamp
            ];
            $row = [
                '<a href="javascript:void(0);">' . $account->getFullName() . '</a>'

            ];
            //$Statuses = $account->getCompany()->getStatuses();

            foreach ($statusObject as $StatusCheck) {

                $Status = $this->em->findStatus($StatusCheck['status_id']);
                $proposals_count = $account->getNumRangeCreatedProposalsStatus($time, $Status);
                if ($proposals_count > 0) {
                    $row[] = '<a href="javascript:void(0);"  >' . $proposals_count . '</a>';
                } else {
                    $row[] = $proposals_count;
                }

            }

            $email_off_count = $account->getNumRangeCreatedProposalsEmailOff($time);
            if ($email_off_count > 0) {
                $row[] = '<a href=""  >' . $email_off_count . '</a>';
            } else {
                $row[] = $email_off_count;
            }


            // Content needs to be style dependent on comparison vs performance


            $data['aaData'][] = $row;
        }

        // Return as JSON
        echo json_encode($data);
    }


    public function dashboardParentPie()
    {

        $this->load->library('stats/MyQueryServlet');
        $servlet = new MyQueryServlet();
        

        $time = array();
        $time['start'] = '0';
        $time['finish'] = Carbon::create()->endOfDay()->timestamp;
        $time['start'] = strtotime('midnight ' . $this->session->userdata('pStatusFilterFrom'));
        $time['finish'] = strtotime("11:59:59pm " . $this->session->userdata('pStatusFilterTo'));

        $range = $this->input->post('range');

       
        if($this->input->post('filterIds')){
            $filterIds = explode(',',$this->input->post('filterIds'));
        }else{
            $filterIds = [];
        }
        

        //$statuses = $this->account()->getCompany()->getStatuses();


        $childCompanies = $this->getCompanyRepository()->getParentChildCompanies($this->account()->getParentCompany()->getCompanyId());
        $statusObject = [];
        $i=0;

        foreach($childCompanies as $childCompany){
            
            $childCompanyIds[] = $childCompany->companyId;
            $branchCompany = $this->em->findCompany($childCompany->companyId);
           
           
            
            $Statuses = $branchCompany->getStatuses();

            foreach ($Statuses as $status) { 


            if (!in_array($status->getStatusId(), array_column($statusObject, 'status_id'))) {
               
                    $statusObject[$i]['status_id'] = $status->getStatusId();
                    $statusObject[$i]['status_text'] = $status->getText();
                    $i++;
              }

               
            }


        }


        $totalVal = 0;

        // Create the datatable
        $data = new DataTable();
        // Colums for pie chart
        $data->addColumn(new ColumnDescription('status', ValueType::STRING, 'Status'));
        $data->addColumn(new ColumnDescription('value', ValueType::NUMBER, 'Value'));


        switch ($this->input->post('filterType')) {

            case 'company':
            case 'all':
                //$accounts = $companyRepo->getMasterSalesAccounts($filterIds);


                foreach($filterIds as $filterId){
            
                    
                    $branchCompany = $this->em->findCompany($filterId);

                
                        foreach ($statusObject as $statusCheck) {
                            $val = $branchCompany->getRangeCreatedProposalsStatusPrice($time, $statusCheck['status_id']);
                            $totalVal += $val;
                            $row = new TableRow(array($statusCheck['status_text'], (int)$val));
                            $data->addRow($row);
                        }

                    }
                break;





            case 'branch':


                $filterBranches = array();
                        foreach($filterIds as $filterId){
                            $tempArr = explode("_",$filterId);
                            $filterBranches[] = array(
                                'companyId' => $tempArr[0],
                                'branchId' => $tempArr[1],
                            );

                        }




                        foreach($filterBranches as $filterBranch){
                                    
                            if ($filterBranch['branchId'] > 0) {
                                $branch = $this->em->find('\models\Branches', $filterBranch['branchId']);
            
                               
    
    
                                foreach ($statusObject as $statusCheck) {
                                    $val = $branch->getRangeCreatedProposalsStatusPrice($time, $statusCheck['status_id']);
                                    $totalVal += $val;
                                    $row = new TableRow(array($statusCheck['status_text'], (int)$val));
                                    $data->addRow($row);
                                }
    
                            } else {
                               
                                
                                $companyId = $filterBranch['companyId'];
    
    
    
                                foreach ($statusObject as $statusCheck) {
                                    $val = \models\Branches::getRangeCreatedProposalsStatusPriceMain($time,
                                    $companyId, $statusCheck['status_id']);
                                    $totalVal += $val;
                                    $row = new TableRow(array($statusCheck['status_text'], (int)$val));
                                    $data->addRow($row);
                                }
                            }
                            
                        }

         
            break; 
            
            case 'user':
                foreach($filterIds as $filterId){
                    //$accounts[] = $this->em->findAccount($filterId);


                    $account = $this->em->findAccount($filterId);
                    foreach ($statusObject as $statusCheck) {
                        $val = $account->getRangeCreatedProposalsStatusPrice($time, $statusCheck['status_id']);
                        $totalVal += $val;
                        $row = new TableRow(array($statusCheck['status_text'], (int)$val));
                        $data->addRow($row);
                    }
                }
            break; 

        }


        if ($totalVal > 0) {
            $servlet->setDataTable($data);
            $servlet->execute();
        } else {
            echo json_encode(array('empty' => 1));
        }
    }


    public function sharedProposalUsers($proposalId)
    {

        $company_id = $this->account()->getCompany()->getCompanyId();
        $CI = &get_instance();
        
        $dql = "SELECT pup.id,pup.proposal_id,a.email, CONCAT(a.firstName,' ',a.lastName) as username,c.companyName
                FROM proposal_user_permissions AS pup
                LEFT JOIN accounts a  ON pup.user_id = a.accountId 
                LEFT JOIN companies c  ON a.company = c.companyId 
                WHERE proposal_id = ".$proposalId."
                AND company_id != ".$company_id;




        // Searching
        $searchVal = $this->input->get('search')['value'];
        if ($searchVal) {
            $dql .= " AND((CONCAT(a.firstName,' ',a.lastName) LIKE '%" . $searchVal . "%')
                        OR (a.email LIKE '%" . $searchVal . "%')
                        OR (c.companyName LIKE '%" . $searchVal . "%'))";
        }

        // Sorting
        $sort = $this->input->get('order')[0];

        $sortDir = $sort['dir'];

        switch ($sort['column']) {
            case 0:
                $sortCol = 'username';
                break;
            case 1:
                $sortCol = 'a.email';
                break;
            case 2:
                $sortCol = 'c.companyName';
                break;

        }

        $dql .= " ORDER BY " . $sortCol . ' ' . $sortDir;
        $dql .= ' LIMIT ' . $this->input->get('length');
        $dql .= ' OFFSET ' . $this->input->get('start');


        $sharedUsers = $this->db->query($dql)->result();

        $tableData = [];


        foreach ($sharedUsers as $sharedUser) {
            

            
            
            
                $tableData[] = [
                    $sharedUser->username,
                    $sharedUser->email,
                    $sharedUser->companyName,
                    '<a class="btn btn-delete tiptip remove_shared_proposal" href="javascript:void(0);" data-proposal-id="'.$proposalId.'" data-shared-id="'.$sharedUser->id.'" title="Remove Sharing" href="">Delete</a>',
                ];
            
            
        }

        $data = [];
        $data['aaData'] = $tableData;
        $data['sEcho'] = $this->input->get('sEcho');

       

        $data["iTotalRecords"] = count($sharedUsers);
        $data["iTotalDisplayRecords"] = count($sharedUsers);

       
        echo json_encode($data);
    }


    public function remove_shared_proposal_permission(){
        $proposal_id = $this->input->post('proposal_id');
        $shared_id = $this->input->post('shared_id');

        $sharing = $this->em->find('models\ProposalUserPermission', $shared_id);

        if($sharing){
            
        

        $account = $this->em->findAccount($sharing->getUserId());
        $proposal = $this->em->findProposal($proposal_id);


        $subject = 'Proposal Sharing Removed';
        $content = 'Hello <strong>'.$account->getFullName().'</strong>,<br/> <p>You currently now Removed access to work on this proposal:</p>
        <p><span style="width:100px;float:left"><strong>Project Name:</strong></span><span>'.$proposal->getProjectName().'</span> </p>
        <p><span style="width:100px;float:left"><strong>Project Owner:</strong></span><span>'.$proposal->getOwner()->getFullname().'</span> </p>
        <p>If you have any questions, please contact your administrator</p>
        <p>Thanks.</p>';

        
            $emailData = [
                'to' => $account->getEmail(),
                'fromName' => SITE_NAME,
                'fromEmail' => 'no-reply@' . SITE_EMAIL_DOMAIN,
                'subject' => $subject,
                'body' => $content,
            ];

            $this->getEmailRepository()->send($emailData);

            
            $this->log_manager->add(0,
            'Proposal Sharing Removed with '.$account->getFullname(),
            $proposal->getClient(),
            $proposal,
            null,
            $this->account());

            $this->em->remove($sharing);
            $this->em->flush();

        $response = new JsonResponse();
        $response->success = true;

        
        $response->send();
        }else{
            $response = new JsonResponse();
            $response->success = false;

            
            $response->send();
        }
    }

    

    public function totalRoundOff()
    {
        $phaseId = $this->input->post('phase_id');
        $totalValue = $this->input->post('total_val');
        $proposal_service_id = $this->input->post('proposal_service_id');
        $lineItem = $this->getEstimationRepository()->getPhaseLineItemArray($phaseId, $proposal_service_id); 
        $getPrevPrice = $this->em->getRepository('models\proposal_services')->findOneBy(array(
            'serviceId' => $proposal_service_id
        ));
        $customLineItems = $this->getEstimationRepository()->getPhaseLineItemArray($phaseId, $proposal_service_id, true);
        $oldValue =  $getPrevPrice->getPrice();
        $totalValue = str_replace('$', '', $totalValue);
        $totalValue = str_replace(',', '', $totalValue);
        $oldValue = str_replace('$', '', $oldValue);
        $oldValue = str_replace(',', '', $oldValue);
        $currentTotal = $totalValue-$oldValue;
        $total_price = $totalValue;  
      //  echo "<pre>";print_r($lineItem);

        if(!empty($lineItem))
      {
                $first_arr_val =  $lineItem[0]['total_price'];
                $newFirstArray1 = $first_arr_val + $currentTotal;
                $quantity = $lineItem[0]['quantity'];
                $new_baseUnitPrice = number_format(($newFirstArray1 / $quantity), 2, '.', '');
                $expectedTotal = number_format($quantity * $new_baseUnitPrice, 2, '.', '');           
         if ($lineItem[0]['id']) {
            $eli = $this->em->findEstimationLineItem($lineItem[0]['id'] ?: null);
            $updating = true;
            $oldItem = clone $eli;
            $oldItemQunatity = $oldItem->getQuantity();
            $eli->setEditedBasePrice($lineItem[0]['edited_base_price']);
            $margin = number_format($total_price - $expectedTotal, 2, '.', '');
            // set new overHeader price
                    $overhead_price = $lineItem[0]['overhead_rate'];
                    $profit_price = $lineItem[0]['profit_price'];
                    $total_oh_pm = number_format(($overhead_price ? $overhead_price:0) + ($profit_price ? $profit_price:0), 2, '.', '');
                    if ($total_oh_pm != 0) {
                        $oh_ratio = number_format(($overhead_price / $total_oh_pm) * 100, 2, '.', '');
                        $pm_ratio = number_format(($profit_price / $total_oh_pm) * 100, 2, '.', '');
                    } else {
                        $pm_ratio = 0;
                        $oh_ratio = 0;
                    }
                    $new_oh_total = number_format(($margin * $oh_ratio) / 100, 2, '.', '');
                    $new_pm_total = number_format(($margin * $pm_ratio) / 100, 2, '.', '');
                   // $eli->setOverheadRate($new_oh_total);
                    $eli->setOverheadRate($new_pm_total);
                    $eli->setOverheadPrice($new_oh_total);
                    if ($expectedTotal > 0) {
                        $oh_percent = number_format(($new_oh_total / $expectedTotal) * 100, 2, '.', '');
                        $pm_percent = number_format(($new_pm_total / $expectedTotal) * 100, 2, '.', '');
                    } else {
                        $oh_percent = '0';
                        $pm_percent = '0';
                    }
           // set overHead price close

           //set New Profit rate
                $newProfitRate = number_format(($new_pm_total / $quantity), 2, '.', '');
                //echo $newProfitRate;die;
                $eli->setProfitRate($newProfitRate);
           // set New Profit rate close

           //set setOverheadRate rate start
                $newOverheadRate = number_format(($new_oh_total / $quantity), 2, '.', '');
                $eli->setOverheadRate($newOverheadRate);
           ///set setOverheadRate rate  close

           // set setProfitPrice start
                $eli->setProfitPrice($lineItem[0]['profit_price']);
           // set setProfitPrice close

           // set setTaxPrice start
                 $taxRate = $lineItem[0]['tax_rate'];
                 $before_tax_total = $total_price;
                if ($taxRate > 0) {
                    $taxMultiplier = number_format((($taxRate / 100) + 1), 2, '.', '');
                    $total_price2 = number_format($before_tax_total / $taxMultiplier, 2, '.', '');
                    $newTaxPrice = number_format($before_tax_total - $total_price2, 2, '.', '');
                } else {
                    $newTaxPrice = '0.00';
                }
                $eli->setTaxRate($taxRate);
                $eli->setTaxPrice($newTaxPrice);
            // set setTaxPrice close

            //set setEditedBasePrice start
                $eli->setProfitPrice($lineItem[0]['edited_base_price']);
            //set setEditedBasePrice close
            //set setEditedTotalPrice start         
                $eli->setEditedTotalPrice($total_price);
                $eli->setTotalPrice($newFirstArray1);
                $eli->setCustomTotalPrice(0);
            //set setEditedTotalPrice close  

            //set baseUnitprice start
              $eli->setUnitPrice($new_baseUnitPrice);
            //set baseUnitprice close
            //Save service to database. 
            $oldValue = number_format($oldValue, 2, '.', ','); // Format the number with commas as thousands separators
            $total_price = number_format($total_price, 2, '.', ','); // Format the number with commas as thousands separators
            $logMessage = $eli->getItem()->getName() . " item round off Service Name: " . $eli->getProposalService()->getServiceName(). "value change "."$".$oldValue." - "."$".$total_price;
             
 
       }
    } else{

        if(!empty($customLineItems))
        {
            $eli = $this->em->findEstimationLineItem($customLineItems[0]['id'] ?: null);
            $customLineItems =  $customLineItems[0];
            $firstCoustomLineItem =  $currentTotal+$customLineItems['total_price'];
            $quantity = $customLineItems['quantity'];
            $new_baseUnitPrice = number_format(($firstCoustomLineItem / $quantity), 2, '.', '');
            $expectedTotal = number_format($quantity * $new_baseUnitPrice, 2, '.', '');           
            $eli->setUnitPrice($new_baseUnitPrice);
            //set baseUnitprice close
            $eli->setTotalPrice($firstCoustomLineItem);
            $eli->setEditedTotalPrice($total_price);
            $margin = number_format($total_price - $expectedTotal, 2, '.', '');
             // set new overHeader price
                $overhead_price = $firstCoustomLineItem['overhead_rate'];
                $profit_price =   $firstCoustomLineItem['profit_price'];
                $total_oh_pm = number_format(($overhead_price ? $overhead_price:0) + ($profit_price ? $profit_price:0), 2, '.', '');
                if ($total_oh_pm != 0) {
                    $oh_ratio = number_format(($overhead_price / $total_oh_pm) * 100, 2, '.', '');
                    $pm_ratio = number_format(($profit_price / $total_oh_pm) * 100, 2, '.', '');
                } else {
                    $pm_ratio = 0;
                    $oh_ratio = 0;
                }
                $new_oh_total = number_format(($margin * $oh_ratio) / 100, 2, '.', '');
                $new_pm_total = number_format(($margin * $pm_ratio) / 100, 2, '.', '');
                // $eli->setOverheadRate($new_oh_total);
                $eli->setOverheadRate($new_pm_total);
                $eli->setOverheadPrice($new_oh_total);
                if ($expectedTotal > 0) {
                    $oh_percent = number_format(($new_oh_total / $expectedTotal) * 100, 2, '.', '');
                    $pm_percent = number_format(($new_pm_total / $expectedTotal) * 100, 2, '.', '');
                } else {
                    $oh_percent = '0';
                    $pm_percent = '0';
                }
            // set overHead price close

            //set New Profit rate
              $newProfitRate = number_format(($new_pm_total / $quantity), 2, '.', '');
              $eli->setProfitRate($newProfitRate);
           // set New Profit rate close

           //set setOverheadRate rate start
             $newOverheadRate = number_format(($new_oh_total / $quantity), 2, '.', '');
             $eli->setOverheadRate($newOverheadRate);
          //set setOverheadRate rate  close

           // set setProfitPrice start
            $eli->setProfitPrice($firstCoustomLineItem['profit_price']);
           // set setProfitPrice close

           // set setTaxPrice start
            $taxRate = $firstCoustomLineItem['tax_rate'];
            $before_tax_total = $total_price;
            if ($taxRate > 0) {
                $taxMultiplier = number_format((($taxRate / 100) + 1), 2, '.', '');
                $total_price2 = number_format($before_tax_total / $taxMultiplier, 2, '.', '');
                $newTaxPrice = number_format($before_tax_total - $total_price2, 2, '.', '');
            } else {
                $newTaxPrice = '0.00';
            }
            $eli->setTaxPrice($newTaxPrice);
        // set setTaxPrice close

        //set setEditedBasePrice start
           $eli->setProfitPrice($firstCoustomLineItem['edited_base_price']);
        //set setEditedBasePrice close

          $oldValue = number_format($oldValue, 2, '.', ','); // Format the number with commas as thousands separators
          $total_price = number_format($total_price, 2, '.', ','); // Format the number with commas as thousands separators
          $logMessage = $eli->getItem()->getName() . " item round off Service Name: " . $eli->getProposalService()->getServiceName(). "value change "."$".$oldValue." - "."$".$total_price;
        }

    }
        //start regular log
        $proposal = $this->em->findProposal($eli->getProposalService()->getProposal());
        $this->log_manager->add(\models\ActivityAction::PROPOSAL_ESTIMATE_ADD_ITEM,
        'Estimate: ' . $logMessage,
        $proposal->getClient(),
        $proposal,
        null,
        $this->account());
    //end regular log
        $this->em->persist($eli);
        $this->em->flush();
       // update service estimation price
        $proposal_service = $this->em->find('models\Proposal_services', $proposal_service_id);
        $newPrice = '$' . number_format($totalValue, 2);
        $proposal_service->setPrice($newPrice);
        $proposal_service->setTaxPrice($this->getEstimationRepository()->getProposalServiceLineItemTaxTotal($proposal_service_id));
        $this->em->persist($proposal_service);
        $this->em->flush(); 
       $this->sendResponse([
            'error' => 0,
            'oh_percent' => $oh_percent,
            'pm_percent' => $pm_percent,
            'new_oh_total' => $new_oh_total,
            'new_pm_total' => $new_pm_total,
            'newTaxPrice' => $newTaxPrice,
            'baseUnitPrice' => $new_baseUnitPrice,
            'margin' => $margin,
            'oldValue'=>$oldValue,
            'total_price'=>$total_price,
            'first_arr_val'=>$first_arr_val,
            'currentTotal'=>$currentTotal,
            "newFirstArray"=>$newFirstArray1,
            "new_baseUnitPrice"=>$new_baseUnitPrice,
            "quantity"=>$quantity,
            "totalValue"=>$totalValue
        ]);
  
    }


        //get propsoal checklist details
        function get_proposal_checklist_details()
        {
            try {
            $proposal_id = $this->input->post('proposal_id');
            $getCheckList = $this->em->getRepository('models\ProposalCustomerCheckList')->findOneBy(array(
                'proposal_id' => $proposal_id
            )); 
            $response = new JsonResponse();
            if(!empty($getCheckList)){
                $response->success = true;
                $response->billing_contact = $getCheckList->getBillingContact();
                $response->billing_address = $getCheckList->getBillingAddress();
                $response->billing_phone = $getCheckList->getBillingPhone();
                $response->billing_email = $getCheckList->getBillingEmail();
                $response->property_owner_name = $getCheckList->getPropertyOwnerName();
                $response->legal_address = $getCheckList->getLegalAddress();
                $response->customer_phone = $getCheckList->getCustomerPhone();
                $response->customer_email = $getCheckList->getCustomerEmail();
                $response->onsite_contact = $getCheckList->getOnsiteContact();
                $response->onsite_phone = $getCheckList->getOnsitePhone();
                $response->onsite_email = $getCheckList->getOnsiteEmail();
                $response->invoicing_portal = $getCheckList->getInvoicingPortal();
                $response->special_instruction = $getCheckList->getSpecialInstructions();
            }else{
                $response->success = false;
            }
            $response->send();
        }catch (\Exception $e) {
            $response->success = false;
            $response->send();
        }
        } 
       //get proposal checklist details

        /*customer billing information  start */
        public function customer_billing_information()
        {
           
            $response = new JsonResponse();
            try {
                $proposal_id = $this->input->post('proposal_id');
                $billing_contact = $this->input->post('billing_contact');
                $billing_address = $this->input->post('billing_address');
                $billing_phone = $this->input->post('billing_phone');
                $billing_email = $this->input->post('billing_email');
                $property_owner_name = $this->input->post('property_owner_name');
                $legal_address = $this->input->post('legal_address');
                $customer_phone = $this->input->post('customer_phone');
                $customer_email = $this->input->post('customer_email');
                $onsite_phone = $this->input->post('onsite_phone');
                $onsite_email = $this->input->post('onsite_email');
                $onsite_contact = $this->input->post('onsite_contact');
                $invoicing_portal = $this->input->post('invoicing_portal');
                $special_instruction = $this->input->post('special_instruction');
                $checkList = $this->em->getRepository('models\ProposalCustomerCheckList')->findOneBy(array(
                    'proposal_id' => $proposal_id
                    ));
                $logMessage = "Customer Check list updated";                
                if(empty($checkList))
                {
                    $logMessage = "Customer Check list added";
                    $checkList = new models\ProposalCustomerCheckList();
                } 
                    $checkList->setProposalId($proposal_id);
                    $checkList->setBillingContact($billing_contact);
                    $checkList->setBillingAddress($billing_address);
                    $checkList->setBillingPhone($billing_phone);
                    $checkList->setBillingEmail($billing_email);
                    $checkList->setProperyOwnerName($property_owner_name);
                    $checkList->setLegalAddress($legal_address);
                    $checkList->setCustomerPhone($customer_phone);
                    $checkList->setCustomerEmail($customer_email);
                    $checkList->setOnsiteContact($onsite_contact);            
                    $checkList->setOnsitePhone($onsite_phone);
                    $checkList->setOnsiteEmail($onsite_email);
                    $checkList->setInvoicingPortal($invoicing_portal);
                    $checkList->setSpecialInstructions($special_instruction);         
                    $this->em->persist($checkList);
                    $this->em->flush(); 
                    $this->log_manager->add(\models\ActivityAction::PROPOSAL_CHECKLIST, $logMessage, "", "");
                    $response->success = true;
                    $response->send();
            } catch (\Exception $e) {
                $response->success = false;
                $response->send();
            }
        }
        /*customer billing information close */


         // Group enable disabled Customer checklist
       public function enableGroupCustomerChecklist()
       {
          $this->load->database();

           $ids = $this->input->post('ids');
           // Counter
           $numDeleted = 0;
   
           // Loop if we have them
           if (count($ids)) {
               foreach ($ids as $companyId) {
                   $company = $this->em->findCompany($companyId);
                   $company->setProposalChecklist(1);
                   $this->em->persist($company);
                   $this->em->flush(); 
                    $this->log_manager->add(\models\ActivityAction::PROPOSAL_ESTIMATE_ACTIVATE, "Customer Checklist activated for" . $company->getCompanyName());
                
                }
   
               $this->session->set_flashdata('success', "Group Customer Checklist activated for " . count($ids) . " companies");
           }
           return true;
       }

       // disable Group  Customer Checklist
       public function disableGroupCustomerChecklist()
       {
           $this->load->database();
           $ids = $this->input->post('ids');
           // Loop if we have them
           if (count($ids)) {
               foreach ($ids as $companyId) {
                   $company = $this->em->findCompany($companyId);
                   $company->setProposalChecklist(0);
                   $this->em->persist($company);
                   $this->em->flush();
                   $this->log_manager->add(\models\ActivityAction::PROPOSAL_ESTIMATE_ACTIVATE, "Customer checklist deactivated for " . $company->getCompanyName());
                }
               $this->session->set_flashdata('success', "Customer Checklist deactivated for " . count($ids) . " companies");
           }
           return true;
       }

        //Group enable dispabled Customer checklist

        //Add a Quickbook error page start
         public function quickbook_error()
        {
            $this->load->database();
        
            $columns = array( 
                0 => 'entity_id',
                1 => 'entity_type',
                2 => 'entity_name',
                3 => 'QBError',
                4 => 'synch_time',
                5 => 'status'
            );

            $filter = ($this->input->get('inovice-filter') !== null ? $this->input->get('inovice-filter') : "");
         
            //echo "filter value ".$filter;
          
         
            $limit = $this->input->post('length');
            $start = $this->input->post('start');
          //  $order = $columns[$this->input->post('order')[0]['column']];
            $order = ($this->input->post('order')[0]['column']==3)?"synch_time":$columns[$this->input->post('order')[0]['column']];
            $dir = $this->input->post('order')[0]['dir'];

            // echo "<pre>";print_r($_POST);
            // echo "order ".$this->input->post('order')[0]['column'];
            // echo "value ".$order;
          
            $totalData = $this->allquickbook_error_count("",$filter);
            $totalFiltered = $totalData; 
                    
            if (empty($this->input->post('search')['value']))
            {            
                $posts = $this->allquickbookdata($limit, $start, $order, $dir,null,$filter);
            }
            else {
                $search = $this->input->post('search')['value']; 
                $posts = $this->allquickbookdata($limit, $start, $order, $dir, $search,$filter);
                $totalFiltered = $this->allquickbook_error_count($search,$filter);    
            }
        
            $data = array();
            if (!empty($posts))
            {
                foreach ($posts as $post)
                {
                    $nestedData['entity_id'] = $post->entity_id;
                    $nestedData['entity_type'] = $post->entity_type;
                    $nestedData['entity_name'] = $post->entity_name;
                    $nestedData['status'] = $post->status;
                    $nestedData['synch_time']="";
                    $synchTime = $post->synch_time;
                    if($synchTime!=null && $synchTime!=0) {
                          //$nestedData['synch_time'] = $carbonDate->format('m/d/y g:ia');
                         $nestedData['synch_time'] = date('m/d/Y g:i A', $synchTime + TIMEZONE_OFFSET);
                         
                    }

                    if ($post->status ==1) {
                        $post->status="Success";
                        $nestedData['statusData'] = '<div class="GreenstatusData tiptiptop" title="Success"><a href="#">' . $post->status . '</a></div>';
                    } else {
                        $post->status="Failed";
                        $nestedData['statusData'] = '<div class="RedstatusData badge tiptiptop" title="Click to view error"><a href="#">' . $post->status . '</a></div>';
                    }
                    $nestedData['QBError'] = $post->QBError;
                    $data[] = $nestedData;
                }
            }
                  
            $json_data = array(
                "draw" => intval($this->input->post('draw')),  
                "recordsTotal" => intval($totalData),  
                "recordsFiltered" => intval($totalFiltered), 
                "data" => $data
            );
                    
            echo json_encode($json_data); 
        }
 
        function allquickbook_error_count($search = null,$filter)
        {   
            $this->load->database();
        
            // Base query to count records with QuickBooks errors created after March 1, 2024
            $baseQuery = "";
        
            if ($filter == "proposal") {
                $baseQuery = "SELECT COUNT(*) AS record_count FROM (
                    SELECT proposalId AS entity_id, 'proposal' AS entity_type, projectName AS entity_name, QBError, proposalId AS order_column,synched_at AS synch_time, 
                    IF(QBID IS NULL OR QBID = '', 0, 1) AS status FROM proposals 
                    WHERE ((QBError IS NOT NULL AND QBError <> '' AND QBError != '0') OR QBID != '') AND `synched_at` > UNIX_TIMESTAMP('2024-03-01')
                ) AS subquery";
            }else if ($filter == "customer") {
                $baseQuery = "SELECT COUNT(*) AS record_count FROM (
                   SELECT clientId AS entity_id, 'customer' AS entity_type, firstName AS entity_name, QBError, clientId AS order_column,synched_at AS synch_time, 
                    IF(QBID IS NULL OR QBID = '', 0, 1) AS status FROM clients 
                    WHERE ((QBError IS NOT NULL AND QBError <> '' AND QBError != '0') OR QBID != '') AND `synched_at` > UNIX_TIMESTAMP('2024-03-01')  
                ) AS subquery";
            }else if ($filter == "service") {
                $baseQuery = "SELECT COUNT(*) AS record_count FROM (
                    SELECT service_id AS entity_id, 'service' AS entity_type, title AS entity_name, QBError, service_id AS order_column,synched_at AS synch_time, 
                    IF(QBID IS NULL OR QBID = '', 0, 1) AS status FROM company_qb_services 
                    WHERE ((QBError IS NOT NULL AND QBError <> '' AND QBError != '0') OR QBID != '') AND `synched_at` > UNIX_TIMESTAMP('2024-03-01')  
                ) AS subquery";
            } else {
                $baseQuery = "SELECT COUNT(*) AS record_count FROM (
                    SELECT clientId AS entity_id, 'customer' AS entity_type, firstName AS entity_name, QBError, clientId AS order_column,synched_at AS synch_time, 
                    IF(QBID IS NULL OR QBID = '', 0, 1) AS status FROM clients 
                    WHERE ((QBError IS NOT NULL AND QBError <> '' AND QBError != '0') OR QBID != '') AND `synched_at` > UNIX_TIMESTAMP('2024-03-01')
                    UNION 
                    SELECT service_id AS entity_id, 'service' AS entity_type, title AS entity_name, QBError, service_id AS order_column,synched_at AS synch_time, 
                    IF(QBID IS NULL OR QBID = '', 0, 1) AS status FROM company_qb_services 
                    WHERE ((QBError IS NOT NULL AND QBError <> '' AND QBError != '0') OR QBID != '') AND `synched_at` > UNIX_TIMESTAMP('2024-03-01')
                    UNION 
                    SELECT proposalId AS entity_id, 'proposal' AS entity_type, projectName AS entity_name, QBError, proposalId AS order_column,synched_at AS synch_time, 
                    IF(QBID IS NULL OR QBID = '', 0, 1) AS status FROM proposals 
                    WHERE ((QBError IS NOT NULL AND QBError <> '' AND QBError != '0') OR QBID != '') AND `synched_at` > UNIX_TIMESTAMP('2024-03-01')
                ) AS subquery";
            }
        
            // Append search conditions if search parameter is provided
            if (!empty($search)) {
                $baseQuery .= " WHERE entity_id LIKE ? OR
                                entity_type LIKE ? OR
                                entity_name LIKE ?";
                $searchParam = "%$search%";
        
                // Execute the query with search parameter
                $record = $this->db->query($baseQuery, array($searchParam, $searchParam, $searchParam))->row()->record_count;
            } else {
                // Execute the query without search parameter
                $record = $this->db->query($baseQuery)->row()->record_count;
            }
        
            return $record;
        } 
        

        function allquickbookdata($limit, $start, $col, $dir, $search = null, $filter)
        {
            $this->load->database();
        
            // Base query without search conditions
            $baseQuery = "";
        
            if ($filter == "proposal") {
                $baseQuery = "SELECT proposalId AS entity_id, 'proposal' AS entity_type, projectName AS entity_name, QBError, proposalId AS order_column,
                                synched_at AS synch_time, 
                                IF(QBID IS NULL OR QBID = '', 0, 1) AS status 
                                FROM proposals 
                                WHERE ((QBError IS NOT NULL AND QBError <> '' AND QBError != '0') OR QBID != '') 
                                AND `synched_at` > UNIX_TIMESTAMP('2024-03-01')";
            }else if($filter == "customer") {
                $baseQuery = "SELECT clientId AS entity_id, 'customer' AS entity_type, firstName AS entity_name, QBError, clientId AS order_column,
                                synched_at AS synch_time, 
                                IF(QBID IS NULL OR QBID = '', 0, 1) AS status FROM clients 
                                WHERE ((QBError IS NOT NULL AND QBError <> '' AND QBError != '0') OR QBID != '') 
                                AND `synched_at` > UNIX_TIMESTAMP('2024-03-01')";
            }else if($filter == "service") {
                $baseQuery = "SELECT service_id AS entity_id, 'service' AS entity_type, title AS entity_name, QBError, service_id AS order_column,synched_at AS synch_time, 
                                IF(QBID IS NULL OR QBID = '', 0, 1) AS status FROM company_qb_services 
                                WHERE ((QBError IS NOT NULL AND QBError <> '' AND QBError != '0') OR QBID != '') 
                                AND `synched_at` > UNIX_TIMESTAMP('2024-03-01')";
            } else {
                $baseQuery = "SELECT * FROM (
                                SELECT clientId AS entity_id, 'customer' AS entity_type, firstName AS entity_name, QBError, clientId AS order_column,
                                synched_at AS synch_time, 
                                IF(QBID IS NULL OR QBID = '', 0, 1) AS status FROM clients 
                                WHERE ((QBError IS NOT NULL AND QBError <> '' AND QBError != '0') OR QBID != '') 
                                AND `synched_at` > UNIX_TIMESTAMP('2024-03-01')
                                UNION 
                                SELECT proposalId AS entity_id, 'proposal' AS entity_type, projectName AS entity_name, QBError, proposalId AS order_column,
                                synched_at AS synch_time, 
                                IF(QBID IS NULL OR QBID = '', 0, 1) AS status FROM proposals 
                                WHERE ((QBError IS NOT NULL AND QBError <> '' AND QBError != '0') OR QBID != '') 
                                AND `synched_at` > UNIX_TIMESTAMP('2024-03-01')
                                UNION 
                                SELECT service_id AS entity_id, 'service' AS entity_type, title AS entity_name, QBError, service_id AS order_column,synched_at AS synch_time, 
                                IF(QBID IS NULL OR QBID = '', 0, 1) AS status FROM company_qb_services 
                                WHERE ((QBError IS NOT NULL AND QBError <> '' AND QBError != '0') OR QBID != '') 
                                AND `synched_at` > UNIX_TIMESTAMP('2024-03-01')
                            ) AS subquery";
            }
        
            // Append search conditions if search parameter is provided
            if (!empty($search)) {
                $searchCondition = "entity_id LIKE '%$search%' OR
                                    entity_type LIKE '%$search%' OR
                                    entity_name LIKE '%$search%'";
        
                $baseQuery = "SELECT * FROM ($baseQuery) AS searchResults WHERE $searchCondition";
            }
        
            $baseQuery .= " ORDER BY $col $dir LIMIT $limit OFFSET $start";
        
            //   echo "<br>";
            //  echo " Filter ".$filter;
            //  echo "<br>";
            //  echo $baseQuery;
            $record = $this->db->query($baseQuery)->result();
        
            if (count($record) > 0) {
                return $record;
            } else {
                return null;
            }
        }
        
 //Add a Quickbook error page close

 public function setRecentUserStatusDateFilter()
 {

     $this->load->library('JsonResponse');

     // Check they are still logged in
     if (!$this->session->userdata('logged')) {
         $this->jsonresponse->loginRequired = 1;
         $this->jsonresponse->send();
         return;
     }

     $range = $this->input->post('range');
     $finish = false;
     $custom = false;
     $customFrom = $this->input->post('customFrom');
     $customTo = $this->input->post('customTo');

     if ($customFrom && $customTo) {
         $custom = array();
         $custom['from'] = strtotime('midnight ' . $customFrom);
         $custom['to'] = strtotime("11:59:59pm " . $customTo);
     }

     $dt = new Carbon();

     // Calculate the start time based on the time period
     switch ($range) {
        case 'day':
            $start = Carbon::create()->startOfDay()->timestamp;
            $finish = Carbon::create()->endOfDay()->timestamp;
            break;

        case 'week':
            $start = strtotime('midnight Monday this week');
            $start = Carbon::create()->startOfWeek()->startOfDay()->timestamp;
            $finish = Carbon::create()->endOfDay()->timestamp;
            break;

        case 'month':
            $start = Carbon::now()->subMonth()->startOfMonth()->startOfDay()->timestamp;
            $finish = Carbon::create()->endOfDay()->timestamp;
            break;

        case 'quarter':
            $start = Carbon::now()->subDays(90)->startOfDay()->timestamp;
            $end = Carbon::now()->endOfDay()->timestamp;
            break;

        case 'year':
            $start = Carbon::create()->startOfYear()->startOfDay()->timestamp;
            $finish = Carbon::create()->endOfDay()->timestamp;
            break;

        case 'prevYear':
            $start = Carbon::create()->subYear(1)->startOfYear()->startOfDay()->timestamp;
            $finish = Carbon::create()->subYear(1)->endOfYear()->endOfDay()->timestamp;
            break;

        case 'last12thMonth':
          //  $start = Carbon::create()->subYear(1)->startOfYear()->startOfDay()->timestamp;
            $start = Carbon::now()->subYear()->startOfDay()->timestamp;
            $finish = Carbon::now()->timestamp;
            break;
        case 'custom':
            $start = $custom['from'];
            $finish = $custom['to'];
            break;
    } 

     if (!$finish) {
         $finish = time();
     }

     // Convert
     $filterStart = date('m/d/Y', $start);
     $filterFinish = date('m/d/Y', $finish);

     $this->session->set_userdata('pStatusFilterFrom', $filterStart);
     $this->session->set_userdata('pStatusFilterTo', $filterFinish);
     $this->session->set_userdata('pStatusFilterChangeFrom', $filterStart);
     $this->session->set_userdata('pStatusFilterChangeTo', $filterFinish);
     $this->session->set_userdata('pStatsFilterFrom', $filterStart);
     $this->session->set_userdata('pStatsFilterTo', $filterFinish);

     $this->jsonresponse->startDate = $filterStart;
     $this->jsonresponse->finishDate = $filterFinish;
     $this->jsonresponse->success = 1;
     $this->jsonresponse->send();
 }

 public function test()
 {
    echo readableValueWithDollar("21444598.00");
    echo "<br>";
    $this->doctrine->deleteSiteAllCache();
    echo "cache clear by deleteSiteAllCache function";die;

 }

    public function deleteNotes($noteId)
    {
        $noteText = $this->em->getRepository('models\Notes')->findBy(array('noteId' => $noteId));
        foreach($noteText as $note){
            $type="";
            $notesName="";
            $type = $note->getType();
            $type = ($type)? ucfirst($type):"";
            $notesName = $note->getNoteText();
        }
        $result = $this->db->query('DELETE FROM notes WHERE noteId=' . $noteId);
         if($result)
         {
            echo json_encode(['success' => $result]);
         }else{
            echo json_encode(['faild' => $result]);
         }
         $this->getLogRepository()->add([
            'action' => models\ActivityAction::DELETE_NOTES,
            'details' => " $type Note Deleted: $notesName",
            'proposal' => $this->input->post('relationId'),
            'account' => $this->account()->getAccountId(),
            'company' => $this->account()->getCompanyId(),
        ]);
    }

    public function update_note()
    {
     $note_id = $this->input->post('note_id');
    $note_text = $this->input->post('note_text');
    // Assuming you have a model method to update the note
    $NoteData = $this->em->find('\models\notes', $note_id);
    $type="";
    $notesName="";
    $type = $NoteData->getType();
    $type = ($type)? ucfirst($type):"";
    $notesName = $NoteData->getNoteText();
    $NoteData->setNoteText($note_text);
     $this->getLogRepository()->add([
        'action' => models\ActivityAction::EDIT_NOTES,
        'details' => " $type Note Updated: $note_text",
        'proposal' => $this->input->post('relationId'),
        'account' => $this->account()->getAccountId(),
        'company' => $this->account()->getCompanyId(),
    ]);
     $this->em->persist($NoteData);
     $this->em->flush();
    if ($NoteData) {
        echo json_encode(['success' => true]);
    } else {
        echo json_encode(['success' => false]);
    }
  }

  public function otp_validate() {
    $account = $this->em->getRepository('models\Accounts')->findOneBy(
        array('email' => $this->input->post('email'))
    );

    if ($account) {
        // Convert DateTime to Unix timestamp
        $stored_time = $account->getOtpTime() ? $account->getOtpTime() : 0;
        $current_time = time(); 
        $time_diff = $current_time - $stored_time;

        if($this->input->post('otp')==""){
            echo json_encode(array(
                'fail' => false,
                'msg'=>"OTP field is required"
            ));
            die; 
        }

        if(!$account->getEmailOtp())
        {
            echo json_encode(array(
                'fail' => false,
                'otp' =>  false,
                'msg'=>"OTP expired"
            ));
            die;
        }else if($account->getEmailOtp() == $this->input->post('otp')) {
            if ($time_diff <= 120) {
                $this->session->sess_create($account->getAccountId());
                $this->session->set_userdata(array(
                    'logged' => 1,
                    'accountId' => $account->getAccountId(),
                    'psaAlertShown' => '',
                ));
                $this->log_manager->add(\models\ActivityAction::LOGIN, 'User successfully logged in.');
                if ($this->input->post('remember')) {
                    $token = md5(time());
                    $account->setToken($token); 
                    $cookie = array(
                        'name' => 'auth_token',
                        'value' => $token,
                        'expire' => 432000,
                    );
                    $this->input->set_cookie($cookie);
                    $authCookie = array(
                        'name' => 'remember_email',
                        'value' => $this->input->post('email'),
                        'expire' => 432000,
                    );
                    $this->input->set_cookie($authCookie);
                }
                $account->setAuthLogin(1);
                $account->setLastLogin(Carbon::now());
                $account = $this->em->merge($account);
                $this->em->persist($account);
                $this->em->flush();
                $this->em->clear();
                echo json_encode(array(
                    'success' => true,
                    'otp'=>"valid"
                ));
                // You can continue with login or any further processing here
            } else {
                // OTP expired, handle accordingly
                echo json_encode(array(
                    'fail' => false,
                    'msg'=>"OTP expired",
                    'otp' =>  false
                ));
                $account->setEmailOtp(null); // Clear OTP after expiration
                $this->em->persist($account);
                $this->em->flush();
            }
        } else {
             echo json_encode(array(
                'fail' => false,
                'msg'=>"OTP Not Matched"
            ));
        }
    } else {
         echo json_encode(array(
            'fail' => false,
            'msg'=>"Account not found with email id"
        ));
    }
}
 

public function send_email_otp($email, $otp, $account)
{
    // Fetch the email template
    $emailTemplate = $this->doctrine->em->findAdminTemplate(57);

    // Prepare dynamic data to replace in the template
    $data = [
        'lastName' => $account->getLastName(),
        'firstName' => $account->getFirstName(),
        'email' => $email,
        'site_title'=>"Pavement Layers",
        'otp' => $otp,
    ];

    // Parse the subject and body using the new function
    //$subject = $this->parse_template($emailTemplate->getTemplateSubject(), $data);
    $content = $this->parse_template($emailTemplate->getTemplateBody(), $data);

    // Prepare email data
    $emailData = [
        'to' => $email,
        'fromName' => SITE_NAME,
        'fromEmail' => 'no-reply@' . SITE_EMAIL_DOMAIN,
        'subject' => $emailTemplate->getTemplateSubject(),
        'body' => $content,
    ];

    // Send the OTP email
    // $emailOtpResult =  $this->getEmailRepository()->sendOtp($emailData);

    // echo "<pre>";print_r($emailOtpResult);
    // die;

    return  $this->getEmailRepository()->sendOtp($emailData);

}

public function resendOtp(){
    $email  = $this->input->post('email');
    $valid = $this->input->post('valid');
    $account = $this->em->getRepository("models\Accounts")->findOneBy(array(
        'email' => $this->input->post('email')
    ));

     
    if (!$account) {
        echo json_encode(array(
            'error' => 'Email Not Exist!',
        ));
    } else if($account->getEmail() && $account->getEmail()==trim($email))
         {
            $generated_otp = rand(100000, 999999); // Generate a 6-digit OTP
            $current_time = time(); // Get current time
            $mobileNo = $account->getCellPhone();
            if($mobileNo){
                $mobileOtpResult = $this->sendMobileOtp($mobileNo,$generated_otp);
                 if(!empty($mobileOtpResult) && $mobileOtpResult['success']==1)
                {
                    $maskedNumber = str_repeat('*', strlen($mobileNo) - 4) . substr($mobileNo, -4);

                  if(!$valid){
                    // it's hide when request is come to edit_user page to resend otp 
                    //becuse we did not reload the page but when user save the setting page would be reloading 
                    //so we add condtion
                       $this->session->set_flashdata('success', "Otp sent to your mobile number $maskedNumber");
                  }
                  echo json_encode(array(
                      'auth' => true,
                      'mobileAuth'=>true,
                      'msg'=> "Otp sent to your mobile number ".$maskedNumber
                  ));
                }else{
                  echo json_encode(array(
                      'auth' => false,'mobileAuth'=>false,"fail"=>0
                  ));die;
                }
            }else{
                // Print the entire session data
                $emailOtpResult = $this->send_email_otp($this->input->post('email'),$generated_otp,$account);
                if($emailOtpResult)
                {
                    echo json_encode(array(
                        'auth' => true,
                        'emailAuth'=>true
                    ));
                }else{
                 echo json_encode(array(
                     'auth' => false,
                     'emailAuth'=>false
                 ));die;

                }
            }
            $account->setEmailOtp($generated_otp);
            $account->setOtpTime($current_time); // Save the current timestamp
            $this->em->persist($account);
            $this->em->flush();
            $this->em->clear();
            die;
          
         }
         else{
                // echo '<pre>';
                // print_r($this->session->all_userdata());
                // echo '</pre>';
            echo json_encode(array(
                'error' => 'User Not Authenticate!',
            ));
         }

         
 
    die;

}

public function parse_template($template, $data) {
    foreach ($data as $key => $value) {
        // Replace placeholders in the format {key} with the corresponding value
        $template = str_replace('{' . $key . '}', $value, $template);
    }
    return $template;
} 

public function sendMobileOtp($to_number,$otp)
{
    $this->log_manager->add(\models\ActivityAction::LOGIN, 'User successfully logged in.');
   
    $mobileNo = ['9039181447','9826778111'];
    // if (substr($to_number, 0, 1) !== '+') {
    //     // If it doesn't, prepend the country code (+91 for India)
    //     $to_number = '+91' . $to_number;
    // }
     // Check if the number exists in the array
     if (in_array($to_number, $mobileNo)) {
        // Prepend the country code for India (+91)
        $to_number = '+91' . $to_number;
    } else {
        // Prepend the country code for USA (+1)
        $to_number = '+1' . $to_number;
    }
    $result = $this->twiliolibrary->send_mobile_otp($to_number,$otp);
    return $result;
}


public function forget_pass_validate() {
    $account = $this->em->getRepository('models\Accounts')->findOneBy(
        array('email' => $this->input->post('email'))
    );

    if ($account) {
        // Convert DateTime to Unix timestamp
        $stored_time = $account->getOtpTime() ? $account->getOtpTime() : 0;
        $current_time = time(); 
        $time_diff = $current_time - $stored_time;
        if($this->input->post('otp')==""){
            echo json_encode(array(
                'fail' => false,
                'msg'=>"OTP field is required"
            ));
            die; 
        }
        if(!$account->getEmailOtp())
        {
            echo json_encode(array(
                'fail' => false,
                'otp' =>  false,
                'msg'=>"OTP expired"
            ));
            die;
        }else if($account->getEmailOtp() == $this->input->post('otp')) {
            if ($time_diff <= 120) {
                echo json_encode(array(
                    'success' => true,
                    'otp'=>"valid"
                ));
                // You can continue with login or any further processing here
            } else {
                // OTP expired, handle accordingly
                echo json_encode(array(
                    'fail' => false,
                    'msg'=>"OTP expired",
                    'otp' =>  false
                ));
                $account->setEmailOtp(null); // Clear OTP after expiration
                $this->em->persist($account);
                $this->em->flush();
            }
        } else {
             echo json_encode(array(
                'fail' => false,
                'msg'=>"OTP Not Matched"
            ));
        }
    } else {
         echo json_encode(array(
            'fail' => false,
            'msg'=>"Account not found with email id"
        ));
    }
}
 

public function testlog()
{

}



}